/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * Talent Match API
 * 全面重構後的 Talent Match 後端 API 文件

🆕 v2.1 新功能：整合式課程建立 API，支援同時上傳圖片和設定價格方案
 * OpenAPI spec version: 2.1.0
 */
import { HttpClient } from '@angular/common/http';
import type {
  HttpContext,
  HttpEvent,
  HttpHeaders,
  HttpParams,
  HttpResponse as AngularHttpResponse,
} from '@angular/common/http';

import { Injectable, inject } from '@angular/core';

// import type { DeepNonNullable } from '@orval/core/src/utils/deep-non-nullable';

// 使用 TypeScript 內建的 NonNullable 型別
type DeepNonNullable<T> = T extends (...args: any[]) => any
  ? T
  : T extends any[]
  ? _DeepNonNullableArray<T[number]>
  : T extends object
  ? _DeepNonNullableObject<T>
  : NonNullable<T>;

type _DeepNonNullableArray<T> = Array<DeepNonNullable<NonNullable<T>>>;

type _DeepNonNullableObject<T> = {
  [P in keyof T]-?: DeepNonNullable<NonNullable<T[P]>>;
};

import { Observable } from 'rxjs';

import type {
  CreatePaymentSuccessResponse,
  GetApiPaymentsEcpayReturnParams,
  PaymentStatusSuccessResponse,
  PostApiPaymentsEcpayCallbackBody,
} from '../talentMatchAPI.schemas';

interface HttpClientOptions {
  headers?: HttpHeaders | Record<string, string | string[]>;
  context?: HttpContext;
  params?:
    | HttpParams
    | Record<
        string,
        string | number | boolean | ReadonlyArray<string | number | boolean>
      >;
  reportProgress?: boolean;
  withCredentials?: boolean;
  credentials?: RequestCredentials;
  keepalive?: boolean;
  priority?: RequestPriority;
  cache?: RequestCache;
  mode?: RequestMode;
  redirect?: RequestRedirect;
  referrer?: string;
  integrity?: string;
  transferCache?: { includeHeaders?: string[] } | boolean;
  timeout?: number;
}

@Injectable({ providedIn: 'root' })
export class PaymentService {
  private readonly http = inject(HttpClient);
  /**
 * 為指定訂單建立綠界付款連結。

**業務邏輯**：
- 驗證訂單存在且屬於該使用者
- 檢查訂單付款狀態為待付款
- 生成綠界商店訂單編號
- 建立綠界付款表單資料
- 更新訂單狀態為處理中

**前端使用方式**：
1. 取得回傳的 form_data
2. 動態建立 HTML form
3. 自動提交到 payment_url

 * @summary 建立付款連結
 */
  postApiOrdersOrderIdPayment<TData = CreatePaymentSuccessResponse>(
    orderId: number,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  postApiOrdersOrderIdPayment<TData = CreatePaymentSuccessResponse>(
    orderId: number,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  postApiOrdersOrderIdPayment<TData = CreatePaymentSuccessResponse>(
    orderId: number,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  postApiOrdersOrderIdPayment<TData = CreatePaymentSuccessResponse>(
    orderId: number,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.post<TData>(
      `/api/orders/${orderId}/payment`,
      undefined,
      options,
    );
  }
  /**
 * 查詢指定訂單的付款狀態。

**業務邏輯**：
- 驗證訂單存在且屬於該使用者
- 回傳最新的付款狀態資訊
- 包含綠界交易資訊 (如有)

 * @summary 查詢付款狀態
 */
  getApiOrdersOrderIdPaymentStatus<TData = PaymentStatusSuccessResponse>(
    orderId: number,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  getApiOrdersOrderIdPaymentStatus<TData = PaymentStatusSuccessResponse>(
    orderId: number,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  getApiOrdersOrderIdPaymentStatus<TData = PaymentStatusSuccessResponse>(
    orderId: number,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  getApiOrdersOrderIdPaymentStatus<TData = PaymentStatusSuccessResponse>(
    orderId: number,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.get<TData>(
      `/api/orders/${orderId}/payment/status`,
      options,
    );
  }
  /**
 * 手動檢查訂單付款狀態，主要用於開發階段測試。

**注意**：正常情況下綠界會自動回調更新付款狀態，
此 API 僅用於開發測試和異常狀況的手動檢查。

 * @summary 手動檢查付款狀態 (開發用)
 */
  postApiOrdersOrderIdPaymentCheck<TData = PaymentStatusSuccessResponse>(
    orderId: number,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  postApiOrdersOrderIdPaymentCheck<TData = PaymentStatusSuccessResponse>(
    orderId: number,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  postApiOrdersOrderIdPaymentCheck<TData = PaymentStatusSuccessResponse>(
    orderId: number,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  postApiOrdersOrderIdPaymentCheck<TData = PaymentStatusSuccessResponse>(
    orderId: number,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.post<TData>(
      `/api/orders/${orderId}/payment/check`,
      undefined,
      options,
    );
  }
  /**
 * 綠界金流的付款結果回調端點 (無需認證)。

**注意**：
- 此端點由綠界伺服器直接呼叫
- 不需要前端呼叫
- 用於接收付款成功/失敗的通知
- 會自動更新訂單付款狀態

 * @summary 綠界付款回調 (Server-to-Server)
 */
  postApiPaymentsEcpayCallback(
    postApiPaymentsEcpayCallbackBody: PostApiPaymentsEcpayCallbackBody,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<string>;
  postApiPaymentsEcpayCallback(
    postApiPaymentsEcpayCallbackBody: PostApiPaymentsEcpayCallbackBody,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<string>>;
  postApiPaymentsEcpayCallback(
    postApiPaymentsEcpayCallbackBody: PostApiPaymentsEcpayCallbackBody,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<string>>;
  postApiPaymentsEcpayCallback(
    postApiPaymentsEcpayCallbackBody: PostApiPaymentsEcpayCallbackBody,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    const formUrlEncoded = new URLSearchParams();
    if (postApiPaymentsEcpayCallbackBody.MerchantID !== undefined) {
      formUrlEncoded.append(
        `MerchantID`,
        postApiPaymentsEcpayCallbackBody.MerchantID,
      );
    }
    if (postApiPaymentsEcpayCallbackBody.MerchantTradeNo !== undefined) {
      formUrlEncoded.append(
        `MerchantTradeNo`,
        postApiPaymentsEcpayCallbackBody.MerchantTradeNo,
      );
    }
    if (postApiPaymentsEcpayCallbackBody.RtnCode !== undefined) {
      formUrlEncoded.append(
        `RtnCode`,
        postApiPaymentsEcpayCallbackBody.RtnCode,
      );
    }
    if (postApiPaymentsEcpayCallbackBody.RtnMsg !== undefined) {
      formUrlEncoded.append(`RtnMsg`, postApiPaymentsEcpayCallbackBody.RtnMsg);
    }
    if (postApiPaymentsEcpayCallbackBody.TradeNo !== undefined) {
      formUrlEncoded.append(
        `TradeNo`,
        postApiPaymentsEcpayCallbackBody.TradeNo,
      );
    }
    if (postApiPaymentsEcpayCallbackBody.TradeAmt !== undefined) {
      formUrlEncoded.append(
        `TradeAmt`,
        postApiPaymentsEcpayCallbackBody.TradeAmt,
      );
    }
    if (postApiPaymentsEcpayCallbackBody.PaymentDate !== undefined) {
      formUrlEncoded.append(
        `PaymentDate`,
        postApiPaymentsEcpayCallbackBody.PaymentDate,
      );
    }
    if (postApiPaymentsEcpayCallbackBody.PaymentType !== undefined) {
      formUrlEncoded.append(
        `PaymentType`,
        postApiPaymentsEcpayCallbackBody.PaymentType,
      );
    }
    if (postApiPaymentsEcpayCallbackBody.CheckMacValue !== undefined) {
      formUrlEncoded.append(
        `CheckMacValue`,
        postApiPaymentsEcpayCallbackBody.CheckMacValue,
      );
    }

    return this.http.post(`/api/payments/ecpay/callback`, formUrlEncoded, {
      responseType: 'text',
      ...options,
    });
  }
  /**
 * 使用者完成付款後，綠界會將瀏覽器重導向到此端點。
此端點會再次重導向到前端的結果頁面。

**流程**：
1. 使用者在綠界完成付款
2. 綠界重導向到此端點
3. 此端點重導向到前端結果頁面

 * @summary 綠界付款返回處理
 */
  getApiPaymentsEcpayReturn<TData = unknown>(
    params?: DeepNonNullable<GetApiPaymentsEcpayReturnParams>,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  getApiPaymentsEcpayReturn<TData = unknown>(
    params?: DeepNonNullable<GetApiPaymentsEcpayReturnParams>,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  getApiPaymentsEcpayReturn<TData = unknown>(
    params?: DeepNonNullable<GetApiPaymentsEcpayReturnParams>,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  getApiPaymentsEcpayReturn<TData = unknown>(
    params?: DeepNonNullable<GetApiPaymentsEcpayReturnParams>,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.get<TData>(`/api/payments/ecpay/return`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  }
}

export type PostApiOrdersOrderIdPaymentClientResult =
  NonNullable<CreatePaymentSuccessResponse>;
export type GetApiOrdersOrderIdPaymentStatusClientResult =
  NonNullable<PaymentStatusSuccessResponse>;
export type PostApiOrdersOrderIdPaymentCheckClientResult =
  NonNullable<PaymentStatusSuccessResponse>;
export type PostApiPaymentsEcpayCallbackClientResult = NonNullable<string>;
export type GetApiPaymentsEcpayReturnClientResult = NonNullable<unknown>;
