/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * Talent Match API
 * 全面重構後的 Talent Match 後端 API 文件

🆕 v2.1 新功能：整合式課程建立 API，支援同時上傳圖片和設定價格方案
 * OpenAPI spec version: 2.1.0
 */
import { HttpClient } from '@angular/common/http';
import type {
  HttpContext,
  HttpEvent,
  HttpHeaders,
  HttpParams,
  HttpResponse as AngularHttpResponse,
} from '@angular/common/http';

import { Injectable, inject } from '@angular/core';

import { Observable } from 'rxjs';

import type {
  ArchiveCourseRequest,
  ArchiveCourseSuccessResponse,
  PublishCourseSuccessResponse,
  ResubmitCourseRequest,
  ResubmitCourseSuccessResponse,
  SubmitCourseRequest,
  SubmitCourseSuccessResponse,
} from '../talentMatchAPI.schemas';

interface HttpClientOptions {
  headers?: HttpHeaders | Record<string, string | string[]>;
  context?: HttpContext;
  params?:
    | HttpParams
    | Record<
        string,
        string | number | boolean | ReadonlyArray<string | number | boolean>
      >;
  reportProgress?: boolean;
  withCredentials?: boolean;
  credentials?: RequestCredentials;
  keepalive?: boolean;
  priority?: RequestPriority;
  cache?: RequestCache;
  mode?: RequestMode;
  redirect?: RequestRedirect;
  referrer?: string;
  integrity?: string;
  transferCache?: { includeHeaders?: string[] } | boolean;
  timeout?: number;
}

@Injectable({ providedIn: 'root' })
export class CourseStatusManagementService {
  private readonly http = inject(HttpClient);
  /**
 * 提交課程給管理員進行審核。需要教師身份認證且課程必須符合提交條件。

**業務邏輯**：
- 驗證使用者具有教師權限和課程所有權
- 檢查課程狀態：只有草稿 (draft) 且未在審核中的課程可以提交
- 將課程審核狀態設為待審核 (pending)
- 可選擇性添加提交備註供審核者參考
- 提交後等待管理員審核 (核准/拒絕)

**前置條件**：
- 課程狀態必須為 draft
- 課程審核狀態不能是 pending

 * @summary 提交課程審核
 */
  postApiCoursesIdSubmit<TData = SubmitCourseSuccessResponse>(
    id: number,
    submitCourseRequest?: SubmitCourseRequest,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  postApiCoursesIdSubmit<TData = SubmitCourseSuccessResponse>(
    id: number,
    submitCourseRequest?: SubmitCourseRequest,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  postApiCoursesIdSubmit<TData = SubmitCourseSuccessResponse>(
    id: number,
    submitCourseRequest?: SubmitCourseRequest,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  postApiCoursesIdSubmit<TData = SubmitCourseSuccessResponse>(
    id: number,
    submitCourseRequest?: SubmitCourseRequest,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.post<TData>(
      `/api/courses/${id}/submit`,
      submitCourseRequest,
      options,
    );
  }
  /**
 * 重新提交被拒絕的課程給管理員進行審核。需要教師身份認證且課程必須是被拒絕狀態。

**業務邏輯**：
- 驗證使用者具有教師權限和課程所有權
- 檢查課程審核狀態：只有被拒絕 (rejected) 的課程可以重新提交
- 將課程審核狀態重新設為待審核 (pending)
- 建議添加重新提交備註說明修正的內容
- 重新提交後等待管理員重新審核

**前置條件**：
- 課程審核狀態必須為 rejected

 * @summary 重新提交課程審核
 */
  postApiCoursesIdResubmit<TData = ResubmitCourseSuccessResponse>(
    id: number,
    resubmitCourseRequest?: ResubmitCourseRequest,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  postApiCoursesIdResubmit<TData = ResubmitCourseSuccessResponse>(
    id: number,
    resubmitCourseRequest?: ResubmitCourseRequest,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  postApiCoursesIdResubmit<TData = ResubmitCourseSuccessResponse>(
    id: number,
    resubmitCourseRequest?: ResubmitCourseRequest,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  postApiCoursesIdResubmit<TData = ResubmitCourseSuccessResponse>(
    id: number,
    resubmitCourseRequest?: ResubmitCourseRequest,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.post<TData>(
      `/api/courses/${id}/resubmit`,
      resubmitCourseRequest,
      options,
    );
  }
  /**
 * 將審核通過的課程發布到平台上，讓學生可以瀏覽和購買。需要教師身份認證。

**業務邏輯**：
- 驗證使用者具有教師權限和課程所有權
- 檢查課程狀態：必須是草稿 (draft) 且審核通過 (approved)
- 將課程狀態設為已發布 (published)
- 發布後課程將在公開平台上可見
- 學生可以搜尋、瀏覽和購買該課程

**前置條件**：
- 課程狀態必須為 draft
- 課程審核狀態必須為 approved

 * @summary 發布課程
 */
  postApiCoursesIdPublish<TData = PublishCourseSuccessResponse>(
    id: number,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  postApiCoursesIdPublish<TData = PublishCourseSuccessResponse>(
    id: number,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  postApiCoursesIdPublish<TData = PublishCourseSuccessResponse>(
    id: number,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  postApiCoursesIdPublish<TData = PublishCourseSuccessResponse>(
    id: number,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.post<TData>(
      `/api/courses/${id}/publish`,
      undefined,
      options,
    );
  }
  /**
 * 將已發布的課程封存，讓課程從公開平台下架但保留資料。需要教師身份認證。

**業務邏輯**：
- 驗證使用者具有教師權限和課程所有權
- 檢查課程狀態：只有已發布 (published) 的課程可以封存
- 將課程狀態設為已封存 (archived)
- 封存後課程將從公開平台移除，學生無法搜尋或購買
- 可選擇性添加封存原因說明
- 封存的課程可以透過重新審核流程再次發布

**前置條件**：
- 課程狀態必須為 published

 * @summary 封存課程
 */
  postApiCoursesIdArchive<TData = ArchiveCourseSuccessResponse>(
    id: number,
    archiveCourseRequest?: ArchiveCourseRequest,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  postApiCoursesIdArchive<TData = ArchiveCourseSuccessResponse>(
    id: number,
    archiveCourseRequest?: ArchiveCourseRequest,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  postApiCoursesIdArchive<TData = ArchiveCourseSuccessResponse>(
    id: number,
    archiveCourseRequest?: ArchiveCourseRequest,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  postApiCoursesIdArchive<TData = ArchiveCourseSuccessResponse>(
    id: number,
    archiveCourseRequest?: ArchiveCourseRequest,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.post<TData>(
      `/api/courses/${id}/archive`,
      archiveCourseRequest,
      options,
    );
  }
}

export type PostApiCoursesIdSubmitClientResult =
  NonNullable<SubmitCourseSuccessResponse>;
export type PostApiCoursesIdResubmitClientResult =
  NonNullable<ResubmitCourseSuccessResponse>;
export type PostApiCoursesIdPublishClientResult =
  NonNullable<PublishCourseSuccessResponse>;
export type PostApiCoursesIdArchiveClientResult =
  NonNullable<ArchiveCourseSuccessResponse>;
