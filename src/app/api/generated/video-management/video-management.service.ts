/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * Talent Match API
 * 全面重構後的 Talent Match 後端 API 文件
 * OpenAPI spec version: 2.0.0
 */
import { HttpClient } from '@angular/common/http';
import type {
  HttpContext,
  HttpEvent,
  HttpHeaders,
  HttpParams,
  HttpResponse as AngularHttpResponse,
} from '@angular/common/http';

import { Injectable, inject } from '@angular/core';

// import type { DeepNonNullable } from '@orval/core/src/utils/deep-non-nullable';

// 使用 TypeScript 內建的 NonNullable 型別
type DeepNonNullable<T> = T extends (...args: any[]) => any
  ? T
  : T extends any[]
  ? _DeepNonNullableArray<T[number]>
  : T extends object
  ? _DeepNonNullableObject<T>
  : NonNullable<T>;

type _DeepNonNullableArray<T> = Array<DeepNonNullable<NonNullable<T>>>;

type _DeepNonNullableObject<T> = {
  [P in keyof T]-?: DeepNonNullable<NonNullable<T[P]>>;
};

import { Observable } from 'rxjs';

import type {
  GetVideosParams,
  SuccessResponse,
  VideoDetailResponse,
  VideoListResponse,
  VideoUpdateRequest,
  VideoUpdateResponse,
  VideoUploadRequest,
  VideoUploadResponse,
} from '../talentMatchAPI.schemas';

interface HttpClientOptions {
  headers?: HttpHeaders | Record<string, string | string[]>;
  context?: HttpContext;
  params?:
    | HttpParams
    | Record<
        string,
        string | number | boolean | ReadonlyArray<string | number | boolean>
      >;
  reportProgress?: boolean;
  withCredentials?: boolean;
  credentials?: RequestCredentials;
  keepalive?: boolean;
  priority?: RequestPriority;
  cache?: RequestCache;
  mode?: RequestMode;
  redirect?: RequestRedirect;
  referrer?: string;
  integrity?: string;
  transferCache?: { includeHeaders?: string[] } | boolean;
  timeout?: number;
}

@Injectable({ providedIn: 'root' })
export class VideoManagementService {
  private readonly http = inject(HttpClient);
  /**
 * 教師可以透過此端點上傳影片。支援兩種上傳方式：
1. **檔案上傳**: 上傳本地影片檔案 (video_type: storage)
2. **YouTube 連結**: 提供 YouTube 影片連結 (video_type: youtube)

**業務規則:**
- 需要教師權限
- 影片名稱必填且不能超過 100 字元
- 分類欄位不能超過 50 字元
- 介紹欄位不能超過 1000 字元
- YouTube 連結必須是有效的 YouTube URL
- 支援的檔案格式: mp4, avi, mov, wmv

 * @summary 上傳影片
 */
  postVideos<TData = VideoUploadResponse>(
    videoUploadRequest: VideoUploadRequest,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  postVideos<TData = VideoUploadResponse>(
    videoUploadRequest: VideoUploadRequest,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  postVideos<TData = VideoUploadResponse>(
    videoUploadRequest: VideoUploadRequest,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  postVideos<TData = VideoUploadResponse>(
    videoUploadRequest: VideoUploadRequest,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.post<TData>(`/videos`, videoUploadRequest, options);
  }
  /**
 * 取得當前教師的影片列表，支援分頁、搜尋和篩選功能。

**查詢功能:**
- 依分類篩選影片
- 依關鍵字搜尋影片名稱和介紹
- 分頁查詢結果
- 只顯示該教師上傳的影片

 * @summary 取得影片列表
 */
  getVideos<TData = VideoListResponse>(
    params?: DeepNonNullable<GetVideosParams>,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  getVideos<TData = VideoListResponse>(
    params?: DeepNonNullable<GetVideosParams>,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  getVideos<TData = VideoListResponse>(
    params?: DeepNonNullable<GetVideosParams>,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  getVideos<TData = VideoListResponse>(
    params?: DeepNonNullable<GetVideosParams>,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.get<TData>(`/videos`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  }
  /**
 * 取得指定影片的詳細資訊。只能取得該教師上傳的影片詳情。

**業務規則:**
- 只能查看自己上傳的影片
- 影片ID必須為有效的數字
- 不會顯示已刪除的影片

 * @summary 取得影片詳細資訊
 */
  getVideosId<TData = VideoDetailResponse>(
    id: number,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  getVideosId<TData = VideoDetailResponse>(
    id: number,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  getVideosId<TData = VideoDetailResponse>(
    id: number,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  getVideosId<TData = VideoDetailResponse>(
    id: number,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.get<TData>(`/videos/${id}`, options);
  }
  /**
 * 更新指定影片的資訊。支援部分欄位更新。

**可更新欄位:**
- 影片名稱 (name)
- 分類 (category)
- 介紹 (intro)

**業務規則:**
- 只能更新自己上傳的影片
- 至少需要提供一個要更新的欄位
- 不能修改影片類型 (video_type)
- 不能修改檔案路徑或 YouTube 連結

 * @summary 更新影片資訊
 */
  putVideosId<TData = VideoUpdateResponse>(
    id: number,
    videoUpdateRequest: VideoUpdateRequest,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  putVideosId<TData = VideoUpdateResponse>(
    id: number,
    videoUpdateRequest: VideoUpdateRequest,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  putVideosId<TData = VideoUpdateResponse>(
    id: number,
    videoUpdateRequest: VideoUpdateRequest,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  putVideosId<TData = VideoUpdateResponse>(
    id: number,
    videoUpdateRequest: VideoUpdateRequest,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.put<TData>(`/videos/${id}`, videoUpdateRequest, options);
  }
  /**
 * 刪除指定的影片（軟刪除）。影片不會被實際刪除，只是標記為已刪除狀態。

**業務規則:**
- 只能刪除自己上傳的影片
- 使用軟刪除機制，不會實際刪除資料
- 已刪除的影片無法再次刪除
- 刪除後的影片不會出現在列表中

 * @summary 刪除影片
 */
  deleteVideosId<TData = SuccessResponse>(
    id: number,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  deleteVideosId<TData = SuccessResponse>(
    id: number,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  deleteVideosId<TData = SuccessResponse>(
    id: number,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  deleteVideosId<TData = SuccessResponse>(
    id: number,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.delete<TData>(`/videos/${id}`, options);
  }
}

export type PostVideosClientResult = NonNullable<VideoUploadResponse>;
export type GetVideosClientResult = NonNullable<VideoListResponse>;
export type GetVideosIdClientResult = NonNullable<VideoDetailResponse>;
export type PutVideosIdClientResult = NonNullable<VideoUpdateResponse>;
export type DeleteVideosIdClientResult = NonNullable<SuccessResponse>;
