/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * Talent Match API
 * 全面重構後的 Talent Match 後端 API 文件

🆕 v2.1 新功能：整合式課程建立 API，支援同時上傳圖片和設定價格方案
 * OpenAPI spec version: 2.1.0
 */
import { HttpClient } from '@angular/common/http';
import type {
  HttpContext,
  HttpEvent,
  HttpHeaders,
  HttpParams,
  HttpResponse as AngularHttpResponse,
} from '@angular/common/http';

import { Injectable, inject } from '@angular/core';

// import type { DeepNonNullable } from '@orval/core/src/utils/deep-non-nullable';

// 使用 TypeScript 內建的 NonNullable 型別
type DeepNonNullable<T> = T extends (...args: any[]) => any
  ? T
  : T extends any[]
  ? _DeepNonNullableArray<T[number]>
  : T extends object
  ? _DeepNonNullableObject<T>
  : NonNullable<T>;

type _DeepNonNullableArray<T> = Array<DeepNonNullable<NonNullable<T>>>;

type _DeepNonNullableObject<T> = {
  [P in keyof T]-?: DeepNonNullable<NonNullable<T[P]>>;
};

import { Observable } from 'rxjs';

import type {
  GetApiVideos200,
  GetApiVideosId200,
  GetApiVideosParams,
  PostApiVideos201,
  PostApiVideosBodyOne,
  PutApiVideosId200,
  SuccessResponse,
  VideoUpdateRequest,
  VideoUploadRequest,
} from '../talentMatchAPI.schemas';

interface HttpClientOptions {
  headers?: HttpHeaders | Record<string, string | string[]>;
  context?: HttpContext;
  params?:
    | HttpParams
    | Record<
        string,
        string | number | boolean | ReadonlyArray<string | number | boolean>
      >;
  reportProgress?: boolean;
  withCredentials?: boolean;
  credentials?: RequestCredentials;
  keepalive?: boolean;
  priority?: RequestPriority;
  cache?: RequestCache;
  mode?: RequestMode;
  redirect?: RequestRedirect;
  referrer?: string;
  integrity?: string;
  transferCache?: { includeHeaders?: string[] } | boolean;
  timeout?: number;
}

@Injectable({ providedIn: 'root' })
export class VideoManagementService {
  private readonly http = inject(HttpClient);
  /**
 * 上傳新的課程影片，支援兩種上傳方式：
1. **YouTube 影片**：提供 YouTube URL 連結
2. **本地儲存影片**：上傳影片檔案到伺服器

**支援的影片格式：**
- MP4, AVI, MOV, WMV, QuickTime
- 檔案大小限制：最大 500MB

**縮圖檔案（選填）：**
- 格式：JPEG, JPG, PNG, WebP
- 大小限制：最大 5MB

**權限要求：**
- 需要教師身份認證
- 只能為自己的課程上傳影片

 * @summary 上傳課程影片
 */
  postApiVideos<TData = PostApiVideos201>(
    postApiVideosBody: PostApiVideosBodyOne | VideoUploadRequest,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  postApiVideos<TData = PostApiVideos201>(
    postApiVideosBody: PostApiVideosBodyOne | VideoUploadRequest,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  postApiVideos<TData = PostApiVideos201>(
    postApiVideosBody: PostApiVideosBodyOne | VideoUploadRequest,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  postApiVideos<TData = PostApiVideos201>(
    postApiVideosBody: PostApiVideosBodyOne | VideoUploadRequest,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.post<TData>(`/api/videos`, postApiVideosBody, options);
  }
  /**
 * 取得教師的影片列表，支援分頁、搜索和分類篩選。
只能查看自己上傳的影片。

**功能特色：**
- 支援分頁瀏覽
- 支援影片名稱搜索
- 支援分類篩選
- 按上傳時間排序（最新優先）

**權限要求：**
- 需要教師身份認證
- 只能查看自己的影片

 * @summary 取得影片列表
 */
  getApiVideos<TData = GetApiVideos200>(
    params?: DeepNonNullable<GetApiVideosParams>,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  getApiVideos<TData = GetApiVideos200>(
    params?: DeepNonNullable<GetApiVideosParams>,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  getApiVideos<TData = GetApiVideos200>(
    params?: DeepNonNullable<GetApiVideosParams>,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  getApiVideos<TData = GetApiVideos200>(
    params?: DeepNonNullable<GetApiVideosParams>,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.get<TData>(`/api/videos`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  }
  /**
 * 取得指定影片的詳細資訊，包含完整的影片資料和統計資訊。
只能查看自己上傳的影片。

**返回資訊：**
- 影片基本資訊（名稱、分類、介紹）
- 影片檔案資訊（URL、大小、時長）
- 縮圖資訊
- 上傳和更新時間

**權限要求：**
- 需要教師身份認證
- 只能查看自己的影片

 * @summary 取得影片詳情
 */
  getApiVideosId<TData = GetApiVideosId200>(
    id: number,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  getApiVideosId<TData = GetApiVideosId200>(
    id: number,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  getApiVideosId<TData = GetApiVideosId200>(
    id: number,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  getApiVideosId<TData = GetApiVideosId200>(
    id: number,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.get<TData>(`/api/videos/${id}`, options);
  }
  /**
 * 更新指定影片的基本資訊，包含名稱、分類和介紹。
只能更新自己上傳的影片。

**可更新欄位：**
- name：影片名稱
- category：影片分類
- intro：影片介紹

**注意事項：**
- 至少需要提供一個要更新的欄位
- 不能更改影片類型或檔案
- 縮圖更新需使用專門的上傳端點

**權限要求：**
- 需要教師身份認證
- 只能更新自己的影片

 * @summary 更新影片資訊
 */
  putApiVideosId<TData = PutApiVideosId200>(
    id: number,
    videoUpdateRequest: VideoUpdateRequest,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  putApiVideosId<TData = PutApiVideosId200>(
    id: number,
    videoUpdateRequest: VideoUpdateRequest,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  putApiVideosId<TData = PutApiVideosId200>(
    id: number,
    videoUpdateRequest: VideoUpdateRequest,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  putApiVideosId<TData = PutApiVideosId200>(
    id: number,
    videoUpdateRequest: VideoUpdateRequest,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.put<TData>(
      `/api/videos/${id}`,
      videoUpdateRequest,
      options,
    );
  }
  /**
 * 刪除指定的影片及相關檔案。
只能刪除自己上傳的影片。

**刪除內容：**
- 影片資料庫記錄
- 影片檔案（如果是本地儲存）
- 縮圖檔案（如果有）
- 相關的觀看記錄和統計資料

**注意事項：**
- 刪除是永久性的，無法恢復
- YouTube 影片只會刪除資料庫記錄，不會影響 YouTube 上的影片
- 如果影片正在被課程使用，可能會被拒絕刪除

**權限要求：**
- 需要教師身份認證
- 只能刪除自己的影片

 * @summary 刪除影片
 */
  deleteApiVideosId<TData = SuccessResponse>(
    id: number,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  deleteApiVideosId<TData = SuccessResponse>(
    id: number,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  deleteApiVideosId<TData = SuccessResponse>(
    id: number,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  deleteApiVideosId<TData = SuccessResponse>(
    id: number,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.delete<TData>(`/api/videos/${id}`, options);
  }
}

export type PostApiVideosClientResult = NonNullable<PostApiVideos201>;
export type GetApiVideosClientResult = NonNullable<GetApiVideos200>;
export type GetApiVideosIdClientResult = NonNullable<GetApiVideosId200>;
export type PutApiVideosIdClientResult = NonNullable<PutApiVideosId200>;
export type DeleteApiVideosIdClientResult = NonNullable<SuccessResponse>;
