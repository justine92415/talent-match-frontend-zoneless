/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * Talent Match API
 * 全面重構後的 Talent Match 後端 API 文件
 * OpenAPI spec version: 2.0.0
 */
import { HttpClient } from '@angular/common/http';
import type {
  HttpContext,
  HttpEvent,
  HttpHeaders,
  HttpParams,
  HttpResponse as AngularHttpResponse,
} from '@angular/common/http';

import { Injectable, inject } from '@angular/core';

// import type { DeepNonNullable } from '@orval/core/src/utils/deep-non-nullable';

// 使用 TypeScript 內建的 NonNullable 型別
type DeepNonNullable<T> = T extends (...args: any[]) => any
  ? T
  : T extends any[]
  ? _DeepNonNullableArray<T[number]>
  : T extends object
  ? _DeepNonNullableObject<T>
  : NonNullable<T>;

type _DeepNonNullableArray<T> = Array<DeepNonNullable<NonNullable<T>>>;

type _DeepNonNullableObject<T> = {
  [P in keyof T]-?: DeepNonNullable<NonNullable<T[P]>>;
};

import { Observable } from 'rxjs';

import type {
  AddFavoriteRequest,
  AddItemToCartRequest,
  AdminLoginRequest,
  AdminLoginResponse,
  CalendarViewResponse,
  CheckConflictsResponse,
  ConsumeCourseUsageRequest,
  CourseApprovalResponse,
  CourseReviewsResponse,
  CreateCourseRequest,
  CreateOrderRequest,
  CreatePurchaseFromOrderRequest,
  CreateReservationRequest,
  CreateReservationResponse,
  CreateTeacherCertificateRequest,
  DeleteApiCart200,
  DeleteApiCartItemsItemId200,
  DeleteApiCoursesCourseIdFilesFileId200,
  DeleteApiCoursesCourseIdPriceOptionsId200,
  DeleteApiCoursesCourseIdVideosVideoId200,
  DeleteApiCoursesId200,
  DeleteApiFavoritesCourseId200,
  DeleteApiReservationsId200,
  DeleteProfileResponse,
  DeleteTeachersLearningExperiencesId200,
  DeleteTeachersWorkExperiencesId200,
  ForgotPasswordResponse,
  GetApiAdminProfile200,
  GetApiCart200,
  GetApiCourses200,
  GetApiCoursesCourseIdPriceOptions200,
  GetApiCoursesId200,
  GetApiCoursesIdFiles200,
  GetApiCoursesIdFilesParams,
  GetApiCoursesIdVideos200,
  GetApiCoursesParams,
  GetApiCoursesPublic200,
  GetApiCoursesPublicId200,
  GetApiCoursesPublicParams,
  GetApiCoursesUuidReviewsParams,
  GetApiFavorites200,
  GetApiFavoritesParams,
  GetApiFavoritesStatusCourseId200,
  GetApiOrders200,
  GetApiOrdersOrderId200,
  GetApiOrdersParams,
  GetApiPing200,
  GetApiPurchases200,
  GetApiPurchasesCoursesCourseId200,
  GetApiPurchasesCoursesCourseIdCheck200,
  GetApiPurchasesId200,
  GetApiPurchasesParams,
  GetApiPurchasesSummary200,
  GetApiReservationsCalendarParams,
  GetApiReservationsParams,
  GetApiReviewsCoursesId200,
  GetApiReviewsCoursesIdParams,
  GetApiReviewsCoursesUuid200,
  GetApiReviewsCoursesUuidParams,
  GetApiReviewsMyReviews200,
  GetApiReviewsMyReviewsParams,
  GetApiReviewsReceived200,
  GetApiReviewsReceivedParams,
  GetApiTeachersPublicId200,
  GetApiTeachersPublicIdCourses200,
  GetApiTeachersPublicIdCoursesParams,
  GetProfileResponse,
  GetScheduleResponse,
  GetTeacherDashboardTeacherIdEarnings200,
  GetTeacherDashboardTeacherIdEarningsParams,
  GetTeacherDashboardTeacherIdEarningsStats200,
  GetTeacherDashboardTeacherIdOverview200,
  GetTeacherDashboardTeacherIdReservations200,
  GetTeacherDashboardTeacherIdReservationsParams,
  GetTeacherDashboardTeacherIdSettlements200,
  GetTeacherDashboardTeacherIdSettlementsParams,
  GetTeacherDashboardTeacherIdSettlementsSettlementId200,
  GetTeacherDashboardTeacherIdStatistics200,
  GetTeacherDashboardTeacherIdStatisticsParams,
  GetTeacherDashboardTeacherIdStudents200,
  GetTeacherDashboardTeacherIdStudentsParams,
  GetTeacherDashboardTeacherIdStudentsStudentId200,
  GetTeachersLearningExperiences200,
  GetTeachersProfile200,
  GetTeachersScheduleConflictsParams,
  GetTeachersWorkExperiences200,
  GetVideosParams,
  LoginResponse,
  PostApiAdminLogout200,
  PostApiAdminTeachersTeacherIdReject200,
  PostApiAuthForgotPasswordBody,
  PostApiAuthLoginBody,
  PostApiAuthRefreshTokenBody,
  PostApiCartItems201,
  PostApiCourses201,
  PostApiCoursesCourseIdPriceOptions201,
  PostApiCoursesIdArchive200,
  PostApiCoursesIdArchiveBody,
  PostApiCoursesIdFiles201,
  PostApiCoursesIdFilesBody,
  PostApiCoursesIdPublish200,
  PostApiCoursesIdResubmit200,
  PostApiCoursesIdResubmitBody,
  PostApiCoursesIdSubmit200,
  PostApiCoursesIdSubmitBody,
  PostApiCoursesIdVideos201,
  PostApiCoursesIdVideosBody,
  PostApiFavorites201,
  PostApiOrders201,
  PostApiOrdersOrderIdCancel200,
  PostApiOrdersOrderIdCancelBody,
  PostApiOrdersOrderIdPayment200,
  PostApiOrdersOrderIdPaymentBody,
  PostApiPurchasesCoursesCourseIdConsume200,
  PostApiPurchasesFromOrder201,
  PostApiPurchasesIdUse200,
  PostApiPurchasesIdUseBody,
  PostApiReviews201,
  PostTeachersLearningExperiences201,
  PostTeachersLearningExperiencesBody,
  PostTeachersResubmit200,
  PostTeachersSubmit200,
  PostTeachersSubmitBody,
  PriceOptionCreateRequest,
  PriceOptionUpdateRequest,
  PutApiAuthProfileBody,
  PutApiCartItemsItemId200,
  PutApiCoursesCourseIdPriceOptionsId200,
  PutApiCoursesCourseIdVideosOrder200,
  PutApiCoursesCourseIdVideosOrderBody,
  PutApiCoursesId200,
  PutApiOrdersOrderIdCancel200,
  PutApiOrdersOrderIdCancelBody,
  PutApiReservationsIdStatus200,
  PutTeacherDashboardTeacherIdReservationsReservationIdStatus200,
  PutTeacherDashboardTeacherIdReservationsReservationIdStatusBody,
  PutTeachersLearningExperiencesId200,
  PutTeachersLearningExperiencesIdBody,
  PutTeachersProfile200,
  RefreshTokenResponse,
  RegisterRequest,
  RegisterResponse,
  RejectionRequest,
  ReservationListResponse,
  ResetPasswordRequest,
  ResetPasswordResponse,
  ReviewSubmitRequest,
  SuccessResponse,
  TeacherApplicationCreateResponse,
  TeacherApplicationRequest,
  TeacherApplicationStatusResponse,
  TeacherApplicationUpdateRequest,
  TeacherApplicationUpdateResponse,
  TeacherApprovalResponse,
  TeacherCertificateCreateResponse,
  TeacherCertificateDeleteResponse,
  TeacherCertificateListResponse,
  TeacherCertificateUpdateResponse,
  TeacherProfileUpdateRequest,
  UpdateCartItemRequest,
  UpdateCourseRequest,
  UpdateProfileResponse,
  UpdateReservationStatusRequest,
  UpdateScheduleRequest,
  UpdateScheduleResponse,
  UpdateTeacherCertificateRequest,
  VideoDetailResponse,
  VideoListResponse,
  VideoUpdateRequest,
  VideoUpdateResponse,
  VideoUploadRequest,
  VideoUploadResponse,
  WorkExperienceCreateRequest,
  WorkExperienceCreateResponse,
  WorkExperienceUpdateRequest,
  WorkExperienceUpdateResponse,
} from './talentMatchAPI.schemas';

interface HttpClientOptions {
  headers?: HttpHeaders | Record<string, string | string[]>;
  context?: HttpContext;
  params?:
    | HttpParams
    | Record<
        string,
        string | number | boolean | ReadonlyArray<string | number | boolean>
      >;
  reportProgress?: boolean;
  withCredentials?: boolean;
  credentials?: RequestCredentials;
  keepalive?: boolean;
  priority?: RequestPriority;
  cache?: RequestCache;
  mode?: RequestMode;
  redirect?: RequestRedirect;
  referrer?: string;
  integrity?: string;
  transferCache?: { includeHeaders?: string[] } | boolean;
  timeout?: number;
}

@Injectable({ providedIn: 'root' })
export class TalentMatchAPIService {
  private readonly http = inject(HttpClient);
  /**
 * 管理員登入系統，用於取得管理權限。

**安全特性：**
- 驗證管理員帳號和密碼
- 檢查帳號是否為啟用狀態
- 產生 JWT access token 和 refresh token
- 記錄登入時間

**業務規則：**
- 只有啟用的管理員帳號可以登入
- 登入成功後更新最後登入時間
- Token 具有時效性，需要定期刷新

 * @summary 管理員登入
 */
  postApiAdminLogin<TData = AdminLoginResponse>(
    adminLoginRequest: AdminLoginRequest,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  postApiAdminLogin<TData = AdminLoginResponse>(
    adminLoginRequest: AdminLoginRequest,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  postApiAdminLogin<TData = AdminLoginResponse>(
    adminLoginRequest: AdminLoginRequest,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  postApiAdminLogin<TData = AdminLoginResponse>(
    adminLoginRequest: AdminLoginRequest,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.post<TData>(
      `/api/admin/login`,
      adminLoginRequest,
      options,
    );
  }

  /**
   * 管理員登出系統，清除登入狀態
   * @summary 管理員登出
   */
  postApiAdminLogout<TData = PostApiAdminLogout200>(
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  postApiAdminLogout<TData = PostApiAdminLogout200>(
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  postApiAdminLogout<TData = PostApiAdminLogout200>(
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  postApiAdminLogout<TData = PostApiAdminLogout200>(
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.post<TData>(`/api/admin/logout`, undefined, options);
  }

  /**
   * 取得當前登入管理員的基本資訊
   * @summary 取得管理員個人資訊
   */
  getApiAdminProfile<TData = GetApiAdminProfile200>(
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  getApiAdminProfile<TData = GetApiAdminProfile200>(
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  getApiAdminProfile<TData = GetApiAdminProfile200>(
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  getApiAdminProfile<TData = GetApiAdminProfile200>(
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.get<TData>(`/api/admin/profile`, options);
  }

  /**
 * 核准指定的教師申請，將申請狀態更新為已核准。

**業務流程：**
1. 驗證管理員權限
2. 檢查教師申請是否存在
3. 驗證申請狀態為待審核
4. 更新申請狀態為已核准
5. 記錄審核時間和審核者
6. 更新使用者角色為教師

 * @summary 核准教師申請
 */
  postApiAdminTeachersTeacherIdApprove<TData = TeacherApprovalResponse>(
    teacherId: number,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  postApiAdminTeachersTeacherIdApprove<TData = TeacherApprovalResponse>(
    teacherId: number,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  postApiAdminTeachersTeacherIdApprove<TData = TeacherApprovalResponse>(
    teacherId: number,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  postApiAdminTeachersTeacherIdApprove<TData = TeacherApprovalResponse>(
    teacherId: number,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.post<TData>(
      `/api/admin/teachers/${teacherId}/approve`,
      undefined,
      options,
    );
  }

  /**
 * 拒絕指定的教師申請，並提供拒絕原因。

**業務流程：**
1. 驗證管理員權限和拒絕原因
2. 檢查教師申請是否存在
3. 驗證申請狀態為待審核
4. 更新申請狀態為已拒絕
5. 記錄審核時間、審核者和拒絕原因

 * @summary 拒絕教師申請
 */
  postApiAdminTeachersTeacherIdReject<
    TData = PostApiAdminTeachersTeacherIdReject200,
  >(
    teacherId: number,
    rejectionRequest: RejectionRequest,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  postApiAdminTeachersTeacherIdReject<
    TData = PostApiAdminTeachersTeacherIdReject200,
  >(
    teacherId: number,
    rejectionRequest: RejectionRequest,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  postApiAdminTeachersTeacherIdReject<
    TData = PostApiAdminTeachersTeacherIdReject200,
  >(
    teacherId: number,
    rejectionRequest: RejectionRequest,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  postApiAdminTeachersTeacherIdReject<
    TData = PostApiAdminTeachersTeacherIdReject200,
  >(
    teacherId: number,
    rejectionRequest: RejectionRequest,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.post<TData>(
      `/api/admin/teachers/${teacherId}/reject`,
      rejectionRequest,
      options,
    );
  }

  /**
 * 核准指定的課程申請，將課程狀態更新為已核准。

**注意：** 目前Course實體沒有完整的審核相關欄位，
此API實作了基本的核准流程，待Course實體擴展後將支援完整功能。

 * @summary 核准課程申請
 */
  postApiAdminCoursesCourseIdApprove<TData = CourseApprovalResponse>(
    courseId: number,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  postApiAdminCoursesCourseIdApprove<TData = CourseApprovalResponse>(
    courseId: number,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  postApiAdminCoursesCourseIdApprove<TData = CourseApprovalResponse>(
    courseId: number,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  postApiAdminCoursesCourseIdApprove<TData = CourseApprovalResponse>(
    courseId: number,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.post<TData>(
      `/api/admin/courses/${courseId}/approve`,
      undefined,
      options,
    );
  }

  /**
 * 拒絕指定的課程申請，並提供拒絕原因。

**注意：** 目前Course實體沒有完整的審核相關欄位，
此API實作了基本的拒絕流程，待Course實體擴展後將支援完整功能。

 * @summary 拒絕課程申請
 */
  postApiAdminCoursesCourseIdReject<TData = CourseApprovalResponse>(
    courseId: number,
    rejectionRequest: RejectionRequest,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  postApiAdminCoursesCourseIdReject<TData = CourseApprovalResponse>(
    courseId: number,
    rejectionRequest: RejectionRequest,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  postApiAdminCoursesCourseIdReject<TData = CourseApprovalResponse>(
    courseId: number,
    rejectionRequest: RejectionRequest,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  postApiAdminCoursesCourseIdReject<TData = CourseApprovalResponse>(
    courseId: number,
    rejectionRequest: RejectionRequest,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.post<TData>(
      `/api/admin/courses/${courseId}/reject`,
      rejectionRequest,
      options,
    );
  }

  /**
   * 註冊新的使用者帳戶，成功後自動登入並回傳 JWT Token
   * @summary 使用者註冊
   */
  postApiAuthRegister<TData = RegisterResponse>(
    registerRequest: RegisterRequest,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  postApiAuthRegister<TData = RegisterResponse>(
    registerRequest: RegisterRequest,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  postApiAuthRegister<TData = RegisterResponse>(
    registerRequest: RegisterRequest,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  postApiAuthRegister<TData = RegisterResponse>(
    registerRequest: RegisterRequest,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.post<TData>(
      `/api/auth/register`,
      registerRequest,
      options,
    );
  }

  /**
   * 透過 email 和密碼進行使用者登入驗證
   * @summary 使用者登入
   */
  postApiAuthLogin<TData = LoginResponse>(
    postApiAuthLoginBody: PostApiAuthLoginBody,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  postApiAuthLogin<TData = LoginResponse>(
    postApiAuthLoginBody: PostApiAuthLoginBody,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  postApiAuthLogin<TData = LoginResponse>(
    postApiAuthLoginBody: PostApiAuthLoginBody,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  postApiAuthLogin<TData = LoginResponse>(
    postApiAuthLoginBody: PostApiAuthLoginBody,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.post<TData>(
      `/api/auth/login`,
      postApiAuthLoginBody,
      options,
    );
  }

  /**
   * 使用有效的 refresh token 來取得新的 access token 和 refresh token
   * @summary 刷新 Access Token
   */
  postApiAuthRefreshToken<TData = RefreshTokenResponse>(
    postApiAuthRefreshTokenBody: PostApiAuthRefreshTokenBody,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  postApiAuthRefreshToken<TData = RefreshTokenResponse>(
    postApiAuthRefreshTokenBody: PostApiAuthRefreshTokenBody,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  postApiAuthRefreshToken<TData = RefreshTokenResponse>(
    postApiAuthRefreshTokenBody: PostApiAuthRefreshTokenBody,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  postApiAuthRefreshToken<TData = RefreshTokenResponse>(
    postApiAuthRefreshTokenBody: PostApiAuthRefreshTokenBody,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.post<TData>(
      `/api/auth/refresh-token`,
      postApiAuthRefreshTokenBody,
      options,
    );
  }

  /**
 * 發送重設密碼郵件給使用者。
基於安全考量，無論電子郵件是否存在於系統中，都會回傳相同的成功訊息。
這可以防止惡意使用者探測系統中存在的電子郵件地址。

**業務邏輯**：
- 驗證電子郵件格式
- 若使用者存在且帳號啟用，生成重設令牌並發送郵件
- 若使用者不存在或帳號被停用，不進行任何操作但回傳相同訊息

**安全特性**：
- 防止電子郵件枚舉攻擊
- 重設令牌具有時效性（1小時）
- 重設令牌為加密隨機字串，難以猜測

 * @summary 忘記密碼
 */
  postApiAuthForgotPassword<TData = ForgotPasswordResponse>(
    postApiAuthForgotPasswordBody: PostApiAuthForgotPasswordBody,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  postApiAuthForgotPassword<TData = ForgotPasswordResponse>(
    postApiAuthForgotPasswordBody: PostApiAuthForgotPasswordBody,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  postApiAuthForgotPassword<TData = ForgotPasswordResponse>(
    postApiAuthForgotPasswordBody: PostApiAuthForgotPasswordBody,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  postApiAuthForgotPassword<TData = ForgotPasswordResponse>(
    postApiAuthForgotPasswordBody: PostApiAuthForgotPasswordBody,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.post<TData>(
      `/api/auth/forgot-password`,
      postApiAuthForgotPasswordBody,
      options,
    );
  }

  /**
 * 使用有效的重設令牌來重設使用者密碼

**重要安全特性：**
- 驗證重設令牌的有效性和過期時間
- 檢查帳號狀態（停用帳號無法重設密碼）
- 密碼加密儲存
- 成功重設後清除重設令牌
- 一次性令牌（使用後失效）

**業務規則：**
- 令牌有效期為 1 小時
- 令牌只能使用一次
- 新密碼須符合安全要求
- 已停用帳號無法重設密碼

 * @summary 重設密碼
 */
  postApiAuthResetPassword<TData = ResetPasswordResponse>(
    resetPasswordRequest: ResetPasswordRequest,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  postApiAuthResetPassword<TData = ResetPasswordResponse>(
    resetPasswordRequest: ResetPasswordRequest,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  postApiAuthResetPassword<TData = ResetPasswordResponse>(
    resetPasswordRequest: ResetPasswordRequest,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  postApiAuthResetPassword<TData = ResetPasswordResponse>(
    resetPasswordRequest: ResetPasswordRequest,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.post<TData>(
      `/api/auth/reset-password`,
      resetPasswordRequest,
      options,
    );
  }

  /**
   * @summary 取得個人資料
   */
  getApiAuthProfile<TData = GetProfileResponse>(
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  getApiAuthProfile<TData = GetProfileResponse>(
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  getApiAuthProfile<TData = GetProfileResponse>(
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  getApiAuthProfile<TData = GetProfileResponse>(
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.get<TData>(`/api/auth/profile`, options);
  }

  /**
   * @summary 更新個人資料
   */
  putApiAuthProfile<TData = UpdateProfileResponse>(
    putApiAuthProfileBody: PutApiAuthProfileBody,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  putApiAuthProfile<TData = UpdateProfileResponse>(
    putApiAuthProfileBody: PutApiAuthProfileBody,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  putApiAuthProfile<TData = UpdateProfileResponse>(
    putApiAuthProfileBody: PutApiAuthProfileBody,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  putApiAuthProfile<TData = UpdateProfileResponse>(
    putApiAuthProfileBody: PutApiAuthProfileBody,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.put<TData>(
      `/api/auth/profile`,
      putApiAuthProfileBody,
      options,
    );
  }

  /**
 * 執行軟刪除使用者帳號，保留資料完整性以供稽核。

**功能特性**：
- 使用 TypeORM 軟刪除機制
- 設定 deleted_at 時間戳記
- 刪除後使用者無法登入
- 暱稱和email釋放供新用戶使用
- 保持歷史資料完整性

 * @summary 刪除個人帳號
 */
  deleteApiAuthProfile<TData = DeleteProfileResponse>(
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  deleteApiAuthProfile<TData = DeleteProfileResponse>(
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  deleteApiAuthProfile<TData = DeleteProfileResponse>(
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  deleteApiAuthProfile<TData = DeleteProfileResponse>(
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.delete<TData>(`/api/auth/profile`, options);
  }

  /**
   * 將課程商品加入使用者的購物車，如果已存在相同課程和價格方案會增加數量
   * @summary 加入商品到購物車
   */
  postApiCartItems<TData = PostApiCartItems201>(
    addItemToCartRequest: AddItemToCartRequest,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  postApiCartItems<TData = PostApiCartItems201>(
    addItemToCartRequest: AddItemToCartRequest,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  postApiCartItems<TData = PostApiCartItems201>(
    addItemToCartRequest: AddItemToCartRequest,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  postApiCartItems<TData = PostApiCartItems201>(
    addItemToCartRequest: AddItemToCartRequest,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.post<TData>(
      `/api/cart/items`,
      addItemToCartRequest,
      options,
    );
  }

  /**
   * 取得當前使用者的購物車所有商品和統計資訊
   * @summary 取得購物車內容
   */
  getApiCart<TData = GetApiCart200>(
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  getApiCart<TData = GetApiCart200>(
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  getApiCart<TData = GetApiCart200>(
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  getApiCart<TData = GetApiCart200>(
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.get<TData>(`/api/cart`, options);
  }

  /**
   * 移除購物車中的所有商品項目
   * @summary 清空購物車
   */
  deleteApiCart<TData = DeleteApiCart200>(
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  deleteApiCart<TData = DeleteApiCart200>(
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  deleteApiCart<TData = DeleteApiCart200>(
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  deleteApiCart<TData = DeleteApiCart200>(
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.delete<TData>(`/api/cart`, options);
  }

  /**
   * 更新購物車中指定商品的數量或價格方案
   * @summary 更新購物車商品
   */
  putApiCartItemsItemId<TData = PutApiCartItemsItemId200>(
    itemId: number,
    updateCartItemRequest: UpdateCartItemRequest,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  putApiCartItemsItemId<TData = PutApiCartItemsItemId200>(
    itemId: number,
    updateCartItemRequest: UpdateCartItemRequest,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  putApiCartItemsItemId<TData = PutApiCartItemsItemId200>(
    itemId: number,
    updateCartItemRequest: UpdateCartItemRequest,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  putApiCartItemsItemId<TData = PutApiCartItemsItemId200>(
    itemId: number,
    updateCartItemRequest: UpdateCartItemRequest,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.put<TData>(
      `/api/cart/items/${itemId}`,
      updateCartItemRequest,
      options,
    );
  }

  /**
   * 從購物車中移除指定的商品項目
   * @summary 移除購物車商品
   */
  deleteApiCartItemsItemId<TData = DeleteApiCartItemsItemId200>(
    itemId: number,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  deleteApiCartItemsItemId<TData = DeleteApiCartItemsItemId200>(
    itemId: number,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  deleteApiCartItemsItemId<TData = DeleteApiCartItemsItemId200>(
    itemId: number,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  deleteApiCartItemsItemId<TData = DeleteApiCartItemsItemId200>(
    itemId: number,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.delete<TData>(`/api/cart/items/${itemId}`, options);
  }

  /**
   * 教師建立新的課程，需要提供課程基本資訊
   * @summary 建立新課程
   */
  postApiCourses<TData = PostApiCourses201>(
    createCourseRequest: CreateCourseRequest,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  postApiCourses<TData = PostApiCourses201>(
    createCourseRequest: CreateCourseRequest,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  postApiCourses<TData = PostApiCourses201>(
    createCourseRequest: CreateCourseRequest,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  postApiCourses<TData = PostApiCourses201>(
    createCourseRequest: CreateCourseRequest,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.post<TData>(`/api/courses`, createCourseRequest, options);
  }

  /**
   * 取得當前教師的所有課程列表，支援分頁和排序
   * @summary 取得教師課程列表
   */
  getApiCourses<TData = GetApiCourses200>(
    params?: DeepNonNullable<GetApiCoursesParams>,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  getApiCourses<TData = GetApiCourses200>(
    params?: DeepNonNullable<GetApiCoursesParams>,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  getApiCourses<TData = GetApiCourses200>(
    params?: DeepNonNullable<GetApiCoursesParams>,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  getApiCourses<TData = GetApiCourses200>(
    params?: DeepNonNullable<GetApiCoursesParams>,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.get<TData>(`/api/courses`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  }

  /**
   * 教師更新自己的課程資訊
   * @summary 更新課程資訊
   */
  putApiCoursesId<TData = PutApiCoursesId200>(
    id: number,
    updateCourseRequest: UpdateCourseRequest,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  putApiCoursesId<TData = PutApiCoursesId200>(
    id: number,
    updateCourseRequest: UpdateCourseRequest,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  putApiCoursesId<TData = PutApiCoursesId200>(
    id: number,
    updateCourseRequest: UpdateCourseRequest,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  putApiCoursesId<TData = PutApiCoursesId200>(
    id: number,
    updateCourseRequest: UpdateCourseRequest,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.put<TData>(
      `/api/courses/${id}`,
      updateCourseRequest,
      options,
    );
  }

  /**
   * 取得指定課程的詳細資訊，包含完整的課程內容
   * @summary 取得課程詳情
   */
  getApiCoursesId<TData = GetApiCoursesId200>(
    id: number,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  getApiCoursesId<TData = GetApiCoursesId200>(
    id: number,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  getApiCoursesId<TData = GetApiCoursesId200>(
    id: number,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  getApiCoursesId<TData = GetApiCoursesId200>(
    id: number,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.get<TData>(`/api/courses/${id}`, options);
  }

  /**
   * 教師刪除自己的課程，只能刪除尚未有學生報名的課程
   * @summary 刪除課程
   */
  deleteApiCoursesId<TData = DeleteApiCoursesId200>(
    id: number,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  deleteApiCoursesId<TData = DeleteApiCoursesId200>(
    id: number,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  deleteApiCoursesId<TData = DeleteApiCoursesId200>(
    id: number,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  deleteApiCoursesId<TData = DeleteApiCoursesId200>(
    id: number,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.delete<TData>(`/api/courses/${id}`, options);
  }

  /**
   * 教師將草稿狀態的課程提交審核，課程狀態會從 draft 變更為 under_review
   * @summary 提交課程審核
   */
  postApiCoursesIdSubmit<TData = PostApiCoursesIdSubmit200>(
    id: number,
    postApiCoursesIdSubmitBody?: PostApiCoursesIdSubmitBody,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  postApiCoursesIdSubmit<TData = PostApiCoursesIdSubmit200>(
    id: number,
    postApiCoursesIdSubmitBody?: PostApiCoursesIdSubmitBody,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  postApiCoursesIdSubmit<TData = PostApiCoursesIdSubmit200>(
    id: number,
    postApiCoursesIdSubmitBody?: PostApiCoursesIdSubmitBody,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  postApiCoursesIdSubmit<TData = PostApiCoursesIdSubmit200>(
    id: number,
    postApiCoursesIdSubmitBody?: PostApiCoursesIdSubmitBody,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.post<TData>(
      `/api/courses/${id}/submit`,
      postApiCoursesIdSubmitBody,
      options,
    );
  }

  /**
   * 教師重新提交被退回的課程，課程狀態會從 draft 變更為 under_review
   * @summary 重新提交課程審核
   */
  postApiCoursesIdResubmit<TData = PostApiCoursesIdResubmit200>(
    id: number,
    postApiCoursesIdResubmitBody?: PostApiCoursesIdResubmitBody,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  postApiCoursesIdResubmit<TData = PostApiCoursesIdResubmit200>(
    id: number,
    postApiCoursesIdResubmitBody?: PostApiCoursesIdResubmitBody,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  postApiCoursesIdResubmit<TData = PostApiCoursesIdResubmit200>(
    id: number,
    postApiCoursesIdResubmitBody?: PostApiCoursesIdResubmitBody,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  postApiCoursesIdResubmit<TData = PostApiCoursesIdResubmit200>(
    id: number,
    postApiCoursesIdResubmitBody?: PostApiCoursesIdResubmitBody,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.post<TData>(
      `/api/courses/${id}/resubmit`,
      postApiCoursesIdResubmitBody,
      options,
    );
  }

  /**
   * 管理員或系統將已審核通過的課程發布上線，課程狀態會從 under_review 變更為 published
   * @summary 發布課程
   */
  postApiCoursesIdPublish<TData = PostApiCoursesIdPublish200>(
    id: number,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  postApiCoursesIdPublish<TData = PostApiCoursesIdPublish200>(
    id: number,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  postApiCoursesIdPublish<TData = PostApiCoursesIdPublish200>(
    id: number,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  postApiCoursesIdPublish<TData = PostApiCoursesIdPublish200>(
    id: number,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.post<TData>(
      `/api/courses/${id}/publish`,
      undefined,
      options,
    );
  }

  /**
   * 教師將已發布的課程封存下架，課程狀態會從 published 變更為 archived
   * @summary 封存課程
   */
  postApiCoursesIdArchive<TData = PostApiCoursesIdArchive200>(
    id: number,
    postApiCoursesIdArchiveBody?: PostApiCoursesIdArchiveBody,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  postApiCoursesIdArchive<TData = PostApiCoursesIdArchive200>(
    id: number,
    postApiCoursesIdArchiveBody?: PostApiCoursesIdArchiveBody,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  postApiCoursesIdArchive<TData = PostApiCoursesIdArchive200>(
    id: number,
    postApiCoursesIdArchiveBody?: PostApiCoursesIdArchiveBody,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  postApiCoursesIdArchive<TData = PostApiCoursesIdArchive200>(
    id: number,
    postApiCoursesIdArchiveBody?: PostApiCoursesIdArchiveBody,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.post<TData>(
      `/api/courses/${id}/archive`,
      postApiCoursesIdArchiveBody,
      options,
    );
  }

  /**
   * 教師將多個影片連結到課程，設定顯示順序和預覽標示
   * @summary 連結影片到課程
   */
  postApiCoursesIdVideos<TData = PostApiCoursesIdVideos201>(
    id: number,
    postApiCoursesIdVideosBody: PostApiCoursesIdVideosBody,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  postApiCoursesIdVideos<TData = PostApiCoursesIdVideos201>(
    id: number,
    postApiCoursesIdVideosBody: PostApiCoursesIdVideosBody,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  postApiCoursesIdVideos<TData = PostApiCoursesIdVideos201>(
    id: number,
    postApiCoursesIdVideosBody: PostApiCoursesIdVideosBody,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  postApiCoursesIdVideos<TData = PostApiCoursesIdVideos201>(
    id: number,
    postApiCoursesIdVideosBody: PostApiCoursesIdVideosBody,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.post<TData>(
      `/api/courses/${id}/videos`,
      postApiCoursesIdVideosBody,
      options,
    );
  }

  /**
   * 取得指定課程的所有影片，按照顯示順序排列
   * @summary 取得課程影片列表
   */
  getApiCoursesIdVideos<TData = GetApiCoursesIdVideos200>(
    id: number,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  getApiCoursesIdVideos<TData = GetApiCoursesIdVideos200>(
    id: number,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  getApiCoursesIdVideos<TData = GetApiCoursesIdVideos200>(
    id: number,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  getApiCoursesIdVideos<TData = GetApiCoursesIdVideos200>(
    id: number,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.get<TData>(`/api/courses/${id}/videos`, options);
  }

  /**
   * 教師更新課程中影片的顯示順序
   * @summary 更新課程影片順序
   */
  putApiCoursesCourseIdVideosOrder<TData = PutApiCoursesCourseIdVideosOrder200>(
    courseId: number,
    putApiCoursesCourseIdVideosOrderBody: PutApiCoursesCourseIdVideosOrderBody,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  putApiCoursesCourseIdVideosOrder<TData = PutApiCoursesCourseIdVideosOrder200>(
    courseId: number,
    putApiCoursesCourseIdVideosOrderBody: PutApiCoursesCourseIdVideosOrderBody,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  putApiCoursesCourseIdVideosOrder<TData = PutApiCoursesCourseIdVideosOrder200>(
    courseId: number,
    putApiCoursesCourseIdVideosOrderBody: PutApiCoursesCourseIdVideosOrderBody,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  putApiCoursesCourseIdVideosOrder<TData = PutApiCoursesCourseIdVideosOrder200>(
    courseId: number,
    putApiCoursesCourseIdVideosOrderBody: PutApiCoursesCourseIdVideosOrderBody,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.put<TData>(
      `/api/courses/${courseId}/videos/order`,
      putApiCoursesCourseIdVideosOrderBody,
      options,
    );
  }

  /**
   * 教師移除課程中的特定影片
   * @summary 移除課程影片關聯
   */
  deleteApiCoursesCourseIdVideosVideoId<
    TData = DeleteApiCoursesCourseIdVideosVideoId200,
  >(
    courseId: number,
    videoId: number,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  deleteApiCoursesCourseIdVideosVideoId<
    TData = DeleteApiCoursesCourseIdVideosVideoId200,
  >(
    courseId: number,
    videoId: number,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  deleteApiCoursesCourseIdVideosVideoId<
    TData = DeleteApiCoursesCourseIdVideosVideoId200,
  >(
    courseId: number,
    videoId: number,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  deleteApiCoursesCourseIdVideosVideoId<
    TData = DeleteApiCoursesCourseIdVideosVideoId200,
  >(
    courseId: number,
    videoId: number,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.delete<TData>(
      `/api/courses/${courseId}/videos/${videoId}`,
      options,
    );
  }

  /**
   * 取得指定課程的檔案列表，支援分頁查詢。只能查看自己課程的檔案。
   * @summary 取得課程檔案列表
   */
  getApiCoursesIdFiles<TData = GetApiCoursesIdFiles200>(
    id: number,
    params?: DeepNonNullable<GetApiCoursesIdFilesParams>,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  getApiCoursesIdFiles<TData = GetApiCoursesIdFiles200>(
    id: number,
    params?: DeepNonNullable<GetApiCoursesIdFilesParams>,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  getApiCoursesIdFiles<TData = GetApiCoursesIdFiles200>(
    id: number,
    params?: DeepNonNullable<GetApiCoursesIdFilesParams>,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  getApiCoursesIdFiles<TData = GetApiCoursesIdFiles200>(
    id: number,
    params?: DeepNonNullable<GetApiCoursesIdFilesParams>,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.get<TData>(`/api/courses/${id}/files`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  }

  /**
   * 上傳檔案到指定課程。支援多檔案上傳，檔案格式和大小限制請參考文件。
   * @summary 上傳課程檔案
   */
  postApiCoursesIdFiles<TData = PostApiCoursesIdFiles201>(
    id: number,
    postApiCoursesIdFilesBody: PostApiCoursesIdFilesBody,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  postApiCoursesIdFiles<TData = PostApiCoursesIdFiles201>(
    id: number,
    postApiCoursesIdFilesBody: PostApiCoursesIdFilesBody,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  postApiCoursesIdFiles<TData = PostApiCoursesIdFiles201>(
    id: number,
    postApiCoursesIdFilesBody: PostApiCoursesIdFilesBody,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  postApiCoursesIdFiles<TData = PostApiCoursesIdFiles201>(
    id: number,
    postApiCoursesIdFilesBody: PostApiCoursesIdFilesBody,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    const formData = new FormData();
    if (postApiCoursesIdFilesBody.files !== undefined) {
      postApiCoursesIdFilesBody.files.forEach((value) =>
        formData.append(`files`, value),
      );
    }
    if (postApiCoursesIdFilesBody.descriptions !== undefined) {
      postApiCoursesIdFilesBody.descriptions.forEach((value) =>
        formData.append(`descriptions`, value),
      );
    }

    return this.http.post<TData>(`/api/courses/${id}/files`, formData, options);
  }

  /**
   * 刪除指定課程的指定檔案。只能刪除自己課程的檔案。
   * @summary 刪除課程檔案
   */
  deleteApiCoursesCourseIdFilesFileId<
    TData = DeleteApiCoursesCourseIdFilesFileId200,
  >(
    courseId: number,
    fileId: number,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  deleteApiCoursesCourseIdFilesFileId<
    TData = DeleteApiCoursesCourseIdFilesFileId200,
  >(
    courseId: number,
    fileId: number,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  deleteApiCoursesCourseIdFilesFileId<
    TData = DeleteApiCoursesCourseIdFilesFileId200,
  >(
    courseId: number,
    fileId: number,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  deleteApiCoursesCourseIdFilesFileId<
    TData = DeleteApiCoursesCourseIdFilesFileId200,
  >(
    courseId: number,
    fileId: number,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.delete<TData>(
      `/api/courses/${courseId}/files/${fileId}`,
      options,
    );
  }

  /**
   * 取得指定課程的所有評價，支援分頁、篩選和排序
   * @summary 取得課程評價列表
   */
  getApiCoursesUuidReviews<TData = CourseReviewsResponse>(
    uuid: string,
    params?: DeepNonNullable<GetApiCoursesUuidReviewsParams>,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  getApiCoursesUuidReviews<TData = CourseReviewsResponse>(
    uuid: string,
    params?: DeepNonNullable<GetApiCoursesUuidReviewsParams>,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  getApiCoursesUuidReviews<TData = CourseReviewsResponse>(
    uuid: string,
    params?: DeepNonNullable<GetApiCoursesUuidReviewsParams>,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  getApiCoursesUuidReviews<TData = CourseReviewsResponse>(
    uuid: string,
    params?: DeepNonNullable<GetApiCoursesUuidReviewsParams>,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.get<TData>(`/api/courses/${uuid}/reviews`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  }

  /**
   * 將指定課程加入用戶的收藏清單
   * @summary 新增課程到收藏清單
   */
  postApiFavorites<TData = PostApiFavorites201>(
    addFavoriteRequest: AddFavoriteRequest,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  postApiFavorites<TData = PostApiFavorites201>(
    addFavoriteRequest: AddFavoriteRequest,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  postApiFavorites<TData = PostApiFavorites201>(
    addFavoriteRequest: AddFavoriteRequest,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  postApiFavorites<TData = PostApiFavorites201>(
    addFavoriteRequest: AddFavoriteRequest,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.post<TData>(`/api/favorites`, addFavoriteRequest, options);
  }

  /**
   * 取得目前用戶的收藏課程清單，支援分頁
   * @summary 取得用戶收藏清單
   */
  getApiFavorites<TData = GetApiFavorites200>(
    params?: DeepNonNullable<GetApiFavoritesParams>,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  getApiFavorites<TData = GetApiFavorites200>(
    params?: DeepNonNullable<GetApiFavoritesParams>,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  getApiFavorites<TData = GetApiFavorites200>(
    params?: DeepNonNullable<GetApiFavoritesParams>,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  getApiFavorites<TData = GetApiFavorites200>(
    params?: DeepNonNullable<GetApiFavoritesParams>,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.get<TData>(`/api/favorites`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  }

  /**
   * 將指定課程從用戶的收藏清單中移除
   * @summary 從收藏清單移除課程
   */
  deleteApiFavoritesCourseId<TData = DeleteApiFavoritesCourseId200>(
    courseId: number,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  deleteApiFavoritesCourseId<TData = DeleteApiFavoritesCourseId200>(
    courseId: number,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  deleteApiFavoritesCourseId<TData = DeleteApiFavoritesCourseId200>(
    courseId: number,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  deleteApiFavoritesCourseId<TData = DeleteApiFavoritesCourseId200>(
    courseId: number,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.delete<TData>(`/api/favorites/${courseId}`, options);
  }

  /**
   * 檢查指定課程是否已被目前用戶收藏
   * @summary 檢查課程收藏狀態
   */
  getApiFavoritesStatusCourseId<TData = GetApiFavoritesStatusCourseId200>(
    courseId: number,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  getApiFavoritesStatusCourseId<TData = GetApiFavoritesStatusCourseId200>(
    courseId: number,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  getApiFavoritesStatusCourseId<TData = GetApiFavoritesStatusCourseId200>(
    courseId: number,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  getApiFavoritesStatusCourseId<TData = GetApiFavoritesStatusCourseId200>(
    courseId: number,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.get<TData>(`/api/favorites/status/${courseId}`, options);
  }

  /**
   * 將使用者購物車中的所有商品建立為新訂單，購物車會被清空
   * @summary 從購物車建立訂單
   */
  postApiOrders<TData = PostApiOrders201>(
    createOrderRequest?: CreateOrderRequest,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  postApiOrders<TData = PostApiOrders201>(
    createOrderRequest?: CreateOrderRequest,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  postApiOrders<TData = PostApiOrders201>(
    createOrderRequest?: CreateOrderRequest,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  postApiOrders<TData = PostApiOrders201>(
    createOrderRequest?: CreateOrderRequest,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.post<TData>(`/api/orders`, createOrderRequest, options);
  }

  /**
   * 取得當前使用者的所有訂單列表，支援分頁和狀態篩選
   * @summary 取得使用者訂單列表
   */
  getApiOrders<TData = GetApiOrders200>(
    params?: DeepNonNullable<GetApiOrdersParams>,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  getApiOrders<TData = GetApiOrders200>(
    params?: DeepNonNullable<GetApiOrdersParams>,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  getApiOrders<TData = GetApiOrders200>(
    params?: DeepNonNullable<GetApiOrdersParams>,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  getApiOrders<TData = GetApiOrders200>(
    params?: DeepNonNullable<GetApiOrdersParams>,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.get<TData>(`/api/orders`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  }

  /**
   * 取得指定訂單的完整資訊，包含所有商品項目詳情
   * @summary 取得訂單詳情
   */
  getApiOrdersOrderId<TData = GetApiOrdersOrderId200>(
    orderId: number,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  getApiOrdersOrderId<TData = GetApiOrdersOrderId200>(
    orderId: number,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  getApiOrdersOrderId<TData = GetApiOrdersOrderId200>(
    orderId: number,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  getApiOrdersOrderId<TData = GetApiOrdersOrderId200>(
    orderId: number,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.get<TData>(`/api/orders/${orderId}`, options);
  }

  /**
   * 取消指定的訂單，只有處於待確認狀態的訂單可以被取消
   * @summary 取消訂單
   */
  putApiOrdersOrderIdCancel<TData = PutApiOrdersOrderIdCancel200>(
    orderId: number,
    putApiOrdersOrderIdCancelBody?: PutApiOrdersOrderIdCancelBody,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  putApiOrdersOrderIdCancel<TData = PutApiOrdersOrderIdCancel200>(
    orderId: number,
    putApiOrdersOrderIdCancelBody?: PutApiOrdersOrderIdCancelBody,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  putApiOrdersOrderIdCancel<TData = PutApiOrdersOrderIdCancel200>(
    orderId: number,
    putApiOrdersOrderIdCancelBody?: PutApiOrdersOrderIdCancelBody,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  putApiOrdersOrderIdCancel<TData = PutApiOrdersOrderIdCancel200>(
    orderId: number,
    putApiOrdersOrderIdCancelBody?: PutApiOrdersOrderIdCancelBody,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.put<TData>(
      `/api/orders/${orderId}/cancel`,
      putApiOrdersOrderIdCancelBody,
      options,
    );
  }

  /**
   * 取消指定的訂單，只有處於待確認狀態的訂單可以被取消
   * @summary 取消訂單 (POST方法)
   */
  postApiOrdersOrderIdCancel<TData = PostApiOrdersOrderIdCancel200>(
    orderId: number,
    postApiOrdersOrderIdCancelBody?: PostApiOrdersOrderIdCancelBody,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  postApiOrdersOrderIdCancel<TData = PostApiOrdersOrderIdCancel200>(
    orderId: number,
    postApiOrdersOrderIdCancelBody?: PostApiOrdersOrderIdCancelBody,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  postApiOrdersOrderIdCancel<TData = PostApiOrdersOrderIdCancel200>(
    orderId: number,
    postApiOrdersOrderIdCancelBody?: PostApiOrdersOrderIdCancelBody,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  postApiOrdersOrderIdCancel<TData = PostApiOrdersOrderIdCancel200>(
    orderId: number,
    postApiOrdersOrderIdCancelBody?: PostApiOrdersOrderIdCancelBody,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.post<TData>(
      `/api/orders/${orderId}/cancel`,
      postApiOrdersOrderIdCancelBody,
      options,
    );
  }

  /**
   * 處理指定訂單的付款流程
   * @summary 處理訂單付款
   */
  postApiOrdersOrderIdPayment<TData = PostApiOrdersOrderIdPayment200>(
    orderId: number,
    postApiOrdersOrderIdPaymentBody: PostApiOrdersOrderIdPaymentBody,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  postApiOrdersOrderIdPayment<TData = PostApiOrdersOrderIdPayment200>(
    orderId: number,
    postApiOrdersOrderIdPaymentBody: PostApiOrdersOrderIdPaymentBody,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  postApiOrdersOrderIdPayment<TData = PostApiOrdersOrderIdPayment200>(
    orderId: number,
    postApiOrdersOrderIdPaymentBody: PostApiOrdersOrderIdPaymentBody,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  postApiOrdersOrderIdPayment<TData = PostApiOrdersOrderIdPayment200>(
    orderId: number,
    postApiOrdersOrderIdPaymentBody: PostApiOrdersOrderIdPaymentBody,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.post<TData>(
      `/api/orders/${orderId}/payment`,
      postApiOrdersOrderIdPaymentBody,
      options,
    );
  }

  /**
   * 取得指定課程的所有啟用價格方案，按價格排序
   * @summary 查詢課程價格方案列表
   */
  getApiCoursesCourseIdPriceOptions<
    TData = GetApiCoursesCourseIdPriceOptions200,
  >(
    courseId: number,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  getApiCoursesCourseIdPriceOptions<
    TData = GetApiCoursesCourseIdPriceOptions200,
  >(
    courseId: number,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  getApiCoursesCourseIdPriceOptions<
    TData = GetApiCoursesCourseIdPriceOptions200,
  >(
    courseId: number,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  getApiCoursesCourseIdPriceOptions<
    TData = GetApiCoursesCourseIdPriceOptions200,
  >(
    courseId: number,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.get<TData>(
      `/api/courses/${courseId}/price-options`,
      options,
    );
  }

  /**
   * 為指定課程建立新的價格方案（每個課程最多3個方案）
   * @summary 建立新價格方案
   */
  postApiCoursesCourseIdPriceOptions<
    TData = PostApiCoursesCourseIdPriceOptions201,
  >(
    courseId: number,
    priceOptionCreateRequest: PriceOptionCreateRequest,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  postApiCoursesCourseIdPriceOptions<
    TData = PostApiCoursesCourseIdPriceOptions201,
  >(
    courseId: number,
    priceOptionCreateRequest: PriceOptionCreateRequest,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  postApiCoursesCourseIdPriceOptions<
    TData = PostApiCoursesCourseIdPriceOptions201,
  >(
    courseId: number,
    priceOptionCreateRequest: PriceOptionCreateRequest,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  postApiCoursesCourseIdPriceOptions<
    TData = PostApiCoursesCourseIdPriceOptions201,
  >(
    courseId: number,
    priceOptionCreateRequest: PriceOptionCreateRequest,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.post<TData>(
      `/api/courses/${courseId}/price-options`,
      priceOptionCreateRequest,
      options,
    );
  }

  /**
   * 更新指定的價格方案資訊
   * @summary 更新價格方案
   */
  putApiCoursesCourseIdPriceOptionsId<
    TData = PutApiCoursesCourseIdPriceOptionsId200,
  >(
    courseId: number,
    id: number,
    priceOptionUpdateRequest: PriceOptionUpdateRequest,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  putApiCoursesCourseIdPriceOptionsId<
    TData = PutApiCoursesCourseIdPriceOptionsId200,
  >(
    courseId: number,
    id: number,
    priceOptionUpdateRequest: PriceOptionUpdateRequest,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  putApiCoursesCourseIdPriceOptionsId<
    TData = PutApiCoursesCourseIdPriceOptionsId200,
  >(
    courseId: number,
    id: number,
    priceOptionUpdateRequest: PriceOptionUpdateRequest,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  putApiCoursesCourseIdPriceOptionsId<
    TData = PutApiCoursesCourseIdPriceOptionsId200,
  >(
    courseId: number,
    id: number,
    priceOptionUpdateRequest: PriceOptionUpdateRequest,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.put<TData>(
      `/api/courses/${courseId}/price-options/${id}`,
      priceOptionUpdateRequest,
      options,
    );
  }

  /**
   * 刪除指定的價格方案（軟刪除，設為非啟用狀態）
   * @summary 刪除價格方案
   */
  deleteApiCoursesCourseIdPriceOptionsId<
    TData = DeleteApiCoursesCourseIdPriceOptionsId200,
  >(
    courseId: number,
    id: number,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  deleteApiCoursesCourseIdPriceOptionsId<
    TData = DeleteApiCoursesCourseIdPriceOptionsId200,
  >(
    courseId: number,
    id: number,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  deleteApiCoursesCourseIdPriceOptionsId<
    TData = DeleteApiCoursesCourseIdPriceOptionsId200,
  >(
    courseId: number,
    id: number,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  deleteApiCoursesCourseIdPriceOptionsId<
    TData = DeleteApiCoursesCourseIdPriceOptionsId200,
  >(
    courseId: number,
    id: number,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.delete<TData>(
      `/api/courses/${courseId}/price-options/${id}`,
      options,
    );
  }

  /**
   * 取得已發布的課程列表，支援關鍵字搜尋、分類篩選、排序和分頁
   * @summary 取得公開課程列表
   */
  getApiCoursesPublic<TData = GetApiCoursesPublic200>(
    params?: DeepNonNullable<GetApiCoursesPublicParams>,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  getApiCoursesPublic<TData = GetApiCoursesPublic200>(
    params?: DeepNonNullable<GetApiCoursesPublicParams>,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  getApiCoursesPublic<TData = GetApiCoursesPublic200>(
    params?: DeepNonNullable<GetApiCoursesPublicParams>,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  getApiCoursesPublic<TData = GetApiCoursesPublic200>(
    params?: DeepNonNullable<GetApiCoursesPublicParams>,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.get<TData>(`/api/courses/public`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  }

  /**
   * 取得指定課程的詳細資訊，包括教師資料、課程內容等
   * @summary 取得公開課程詳情
   */
  getApiCoursesPublicId<TData = GetApiCoursesPublicId200>(
    id: number,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  getApiCoursesPublicId<TData = GetApiCoursesPublicId200>(
    id: number,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  getApiCoursesPublicId<TData = GetApiCoursesPublicId200>(
    id: number,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  getApiCoursesPublicId<TData = GetApiCoursesPublicId200>(
    id: number,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.get<TData>(`/api/courses/public/${id}`, options);
  }

  /**
   * 取得指定課程的評價列表，支援評分篩選、排序和分頁
   * @summary 取得課程評價列表
   */
  getApiReviewsCoursesId<TData = GetApiReviewsCoursesId200>(
    id: number,
    params?: DeepNonNullable<GetApiReviewsCoursesIdParams>,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  getApiReviewsCoursesId<TData = GetApiReviewsCoursesId200>(
    id: number,
    params?: DeepNonNullable<GetApiReviewsCoursesIdParams>,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  getApiReviewsCoursesId<TData = GetApiReviewsCoursesId200>(
    id: number,
    params?: DeepNonNullable<GetApiReviewsCoursesIdParams>,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  getApiReviewsCoursesId<TData = GetApiReviewsCoursesId200>(
    id: number,
    params?: DeepNonNullable<GetApiReviewsCoursesIdParams>,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.get<TData>(`/api/reviews/courses/${id}`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  }

  /**
   * 取得指定教師的公開個人資訊，包括基本資料、統計數據等
   * @summary 取得教師公開資料
   */
  getApiTeachersPublicId<TData = GetApiTeachersPublicId200>(
    id: number,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  getApiTeachersPublicId<TData = GetApiTeachersPublicId200>(
    id: number,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  getApiTeachersPublicId<TData = GetApiTeachersPublicId200>(
    id: number,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  getApiTeachersPublicId<TData = GetApiTeachersPublicId200>(
    id: number,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.get<TData>(`/api/teachers/public/${id}`, options);
  }

  /**
   * 取得指定教師的已發布課程列表，支援分頁功能
   * @summary 取得教師課程列表
   */
  getApiTeachersPublicIdCourses<TData = GetApiTeachersPublicIdCourses200>(
    id: number,
    params?: DeepNonNullable<GetApiTeachersPublicIdCoursesParams>,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  getApiTeachersPublicIdCourses<TData = GetApiTeachersPublicIdCourses200>(
    id: number,
    params?: DeepNonNullable<GetApiTeachersPublicIdCoursesParams>,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  getApiTeachersPublicIdCourses<TData = GetApiTeachersPublicIdCourses200>(
    id: number,
    params?: DeepNonNullable<GetApiTeachersPublicIdCoursesParams>,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  getApiTeachersPublicIdCourses<TData = GetApiTeachersPublicIdCourses200>(
    id: number,
    params?: DeepNonNullable<GetApiTeachersPublicIdCoursesParams>,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.get<TData>(`/api/teachers/public/${id}/courses`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  }

  /**
   * 根據已付款的訂單建立對應的購買記錄，啟用課程存取權限
   * @summary 從訂單建立購買記錄
   */
  postApiPurchasesFromOrder<TData = PostApiPurchasesFromOrder201>(
    createPurchaseFromOrderRequest: CreatePurchaseFromOrderRequest,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  postApiPurchasesFromOrder<TData = PostApiPurchasesFromOrder201>(
    createPurchaseFromOrderRequest: CreatePurchaseFromOrderRequest,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  postApiPurchasesFromOrder<TData = PostApiPurchasesFromOrder201>(
    createPurchaseFromOrderRequest: CreatePurchaseFromOrderRequest,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  postApiPurchasesFromOrder<TData = PostApiPurchasesFromOrder201>(
    createPurchaseFromOrderRequest: CreatePurchaseFromOrderRequest,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.post<TData>(
      `/api/purchases/from-order`,
      createPurchaseFromOrderRequest,
      options,
    );
  }

  /**
   * 取得當前使用者的所有購買記錄，支援分頁和狀態篩選
   * @summary 取得使用者購買記錄列表
   */
  getApiPurchases<TData = GetApiPurchases200>(
    params?: DeepNonNullable<GetApiPurchasesParams>,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  getApiPurchases<TData = GetApiPurchases200>(
    params?: DeepNonNullable<GetApiPurchasesParams>,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  getApiPurchases<TData = GetApiPurchases200>(
    params?: DeepNonNullable<GetApiPurchasesParams>,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  getApiPurchases<TData = GetApiPurchases200>(
    params?: DeepNonNullable<GetApiPurchasesParams>,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.get<TData>(`/api/purchases`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  }

  /**
   * 取得使用者對特定課程的所有購買記錄
   * @summary 取得特定課程的購買記錄
   */
  getApiPurchasesCoursesCourseId<TData = GetApiPurchasesCoursesCourseId200>(
    courseId: number,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  getApiPurchasesCoursesCourseId<TData = GetApiPurchasesCoursesCourseId200>(
    courseId: number,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  getApiPurchasesCoursesCourseId<TData = GetApiPurchasesCoursesCourseId200>(
    courseId: number,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  getApiPurchasesCoursesCourseId<TData = GetApiPurchasesCoursesCourseId200>(
    courseId: number,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.get<TData>(`/api/purchases/courses/${courseId}`, options);
  }

  /**
   * 消耗使用者對特定課程的購買次數，用於記錄課程使用情況
   * @summary 消耗課程使用次數
   */
  postApiPurchasesCoursesCourseIdConsume<
    TData = PostApiPurchasesCoursesCourseIdConsume200,
  >(
    courseId: number,
    consumeCourseUsageRequest?: ConsumeCourseUsageRequest,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  postApiPurchasesCoursesCourseIdConsume<
    TData = PostApiPurchasesCoursesCourseIdConsume200,
  >(
    courseId: number,
    consumeCourseUsageRequest?: ConsumeCourseUsageRequest,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  postApiPurchasesCoursesCourseIdConsume<
    TData = PostApiPurchasesCoursesCourseIdConsume200,
  >(
    courseId: number,
    consumeCourseUsageRequest?: ConsumeCourseUsageRequest,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  postApiPurchasesCoursesCourseIdConsume<
    TData = PostApiPurchasesCoursesCourseIdConsume200,
  >(
    courseId: number,
    consumeCourseUsageRequest?: ConsumeCourseUsageRequest,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.post<TData>(
      `/api/purchases/courses/${courseId}/consume`,
      consumeCourseUsageRequest,
      options,
    );
  }

  /**
   * 檢查使用者對特定課程的購買狀態和存取權限
   * @summary 檢查課程購買狀態
   */
  getApiPurchasesCoursesCourseIdCheck<
    TData = GetApiPurchasesCoursesCourseIdCheck200,
  >(
    courseId: number,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  getApiPurchasesCoursesCourseIdCheck<
    TData = GetApiPurchasesCoursesCourseIdCheck200,
  >(
    courseId: number,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  getApiPurchasesCoursesCourseIdCheck<
    TData = GetApiPurchasesCoursesCourseIdCheck200,
  >(
    courseId: number,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  getApiPurchasesCoursesCourseIdCheck<
    TData = GetApiPurchasesCoursesCourseIdCheck200,
  >(
    courseId: number,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.get<TData>(
      `/api/purchases/courses/${courseId}/check`,
      options,
    );
  }

  /**
   * 消耗指定購買記錄的使用次數
   * @summary 使用購買堂數
   */
  postApiPurchasesIdUse<TData = PostApiPurchasesIdUse200>(
    id: number,
    postApiPurchasesIdUseBody: PostApiPurchasesIdUseBody,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  postApiPurchasesIdUse<TData = PostApiPurchasesIdUse200>(
    id: number,
    postApiPurchasesIdUseBody: PostApiPurchasesIdUseBody,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  postApiPurchasesIdUse<TData = PostApiPurchasesIdUse200>(
    id: number,
    postApiPurchasesIdUseBody: PostApiPurchasesIdUseBody,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  postApiPurchasesIdUse<TData = PostApiPurchasesIdUse200>(
    id: number,
    postApiPurchasesIdUseBody: PostApiPurchasesIdUseBody,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.post<TData>(
      `/api/purchases/${id}/use`,
      postApiPurchasesIdUseBody,
      options,
    );
  }

  /**
   * 取得使用者的購買統計資料和摘要資訊
   * @summary 取得購買統計資料
   */
  getApiPurchasesSummary<TData = GetApiPurchasesSummary200>(
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  getApiPurchasesSummary<TData = GetApiPurchasesSummary200>(
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  getApiPurchasesSummary<TData = GetApiPurchasesSummary200>(
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  getApiPurchasesSummary<TData = GetApiPurchasesSummary200>(
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.get<TData>(`/api/purchases/summary`, options);
  }

  /**
   * 取得指定 ID 的購買記錄詳細資訊
   * @summary 取得單一購買記錄詳情
   */
  getApiPurchasesId<TData = GetApiPurchasesId200>(
    id: number,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  getApiPurchasesId<TData = GetApiPurchasesId200>(
    id: number,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  getApiPurchasesId<TData = GetApiPurchasesId200>(
    id: number,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  getApiPurchasesId<TData = GetApiPurchasesId200>(
    id: number,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.get<TData>(`/api/purchases/${id}`, options);
  }

  /**
   * 學生為購買的課程建立預約時段
   * @summary 建立預約
   */
  postApiReservations<TData = CreateReservationResponse>(
    createReservationRequest: CreateReservationRequest,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  postApiReservations<TData = CreateReservationResponse>(
    createReservationRequest: CreateReservationRequest,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  postApiReservations<TData = CreateReservationResponse>(
    createReservationRequest: CreateReservationRequest,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  postApiReservations<TData = CreateReservationResponse>(
    createReservationRequest: CreateReservationRequest,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.post<TData>(
      `/api/reservations`,
      createReservationRequest,
      options,
    );
  }

  /**
   * 根據使用者角色查詢預約列表，支援篩選和分頁
   * @summary 查詢預約列表
   */
  getApiReservations<TData = ReservationListResponse>(
    params: DeepNonNullable<GetApiReservationsParams>,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  getApiReservations<TData = ReservationListResponse>(
    params: DeepNonNullable<GetApiReservationsParams>,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  getApiReservations<TData = ReservationListResponse>(
    params: DeepNonNullable<GetApiReservationsParams>,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  getApiReservations<TData = ReservationListResponse>(
    params: DeepNonNullable<GetApiReservationsParams>,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.get<TData>(`/api/reservations`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  }

  /**
   * 教師或學生標記課程完成狀態
   * @summary 更新預約狀態
   */
  putApiReservationsIdStatus<TData = PutApiReservationsIdStatus200>(
    id: number,
    updateReservationStatusRequest: UpdateReservationStatusRequest,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  putApiReservationsIdStatus<TData = PutApiReservationsIdStatus200>(
    id: number,
    updateReservationStatusRequest: UpdateReservationStatusRequest,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  putApiReservationsIdStatus<TData = PutApiReservationsIdStatus200>(
    id: number,
    updateReservationStatusRequest: UpdateReservationStatusRequest,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  putApiReservationsIdStatus<TData = PutApiReservationsIdStatus200>(
    id: number,
    updateReservationStatusRequest: UpdateReservationStatusRequest,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.put<TData>(
      `/api/reservations/${id}/status`,
      updateReservationStatusRequest,
      options,
    );
  }

  /**
   * 學生或教師取消預約，需滿足提前24小時要求
   * @summary 取消預約
   */
  deleteApiReservationsId<TData = DeleteApiReservationsId200>(
    id: number,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  deleteApiReservationsId<TData = DeleteApiReservationsId200>(
    id: number,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  deleteApiReservationsId<TData = DeleteApiReservationsId200>(
    id: number,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  deleteApiReservationsId<TData = DeleteApiReservationsId200>(
    id: number,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.delete<TData>(`/api/reservations/${id}`, options);
  }

  /**
   * 以週或月檢視查看預約日曆
   * @summary 取得日曆檢視
   */
  getApiReservationsCalendar<TData = CalendarViewResponse>(
    params: DeepNonNullable<GetApiReservationsCalendarParams>,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  getApiReservationsCalendar<TData = CalendarViewResponse>(
    params: DeepNonNullable<GetApiReservationsCalendarParams>,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  getApiReservationsCalendar<TData = CalendarViewResponse>(
    params: DeepNonNullable<GetApiReservationsCalendarParams>,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  getApiReservationsCalendar<TData = CalendarViewResponse>(
    params: DeepNonNullable<GetApiReservationsCalendarParams>,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.get<TData>(`/api/reservations/calendar`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  }

  /**
   * 學生對已完成的課程預約提交評價
   * @summary 提交評價
   */
  postApiReviews<TData = PostApiReviews201>(
    reviewSubmitRequest: ReviewSubmitRequest,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  postApiReviews<TData = PostApiReviews201>(
    reviewSubmitRequest: ReviewSubmitRequest,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  postApiReviews<TData = PostApiReviews201>(
    reviewSubmitRequest: ReviewSubmitRequest,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  postApiReviews<TData = PostApiReviews201>(
    reviewSubmitRequest: ReviewSubmitRequest,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.post<TData>(`/api/reviews`, reviewSubmitRequest, options);
  }

  /**
   * 取得指定課程的所有評價，支援分頁、篩選和排序
   * @summary 取得課程評價列表
   */
  getApiReviewsCoursesUuid<TData = GetApiReviewsCoursesUuid200>(
    uuid: string,
    params?: DeepNonNullable<GetApiReviewsCoursesUuidParams>,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  getApiReviewsCoursesUuid<TData = GetApiReviewsCoursesUuid200>(
    uuid: string,
    params?: DeepNonNullable<GetApiReviewsCoursesUuidParams>,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  getApiReviewsCoursesUuid<TData = GetApiReviewsCoursesUuid200>(
    uuid: string,
    params?: DeepNonNullable<GetApiReviewsCoursesUuidParams>,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  getApiReviewsCoursesUuid<TData = GetApiReviewsCoursesUuid200>(
    uuid: string,
    params?: DeepNonNullable<GetApiReviewsCoursesUuidParams>,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.get<TData>(`/api/reviews/courses/${uuid}`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  }

  /**
   * 取得當前使用者提交的所有評價
   * @summary 取得我的評價列表
   */
  getApiReviewsMyReviews<TData = GetApiReviewsMyReviews200>(
    params?: DeepNonNullable<GetApiReviewsMyReviewsParams>,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  getApiReviewsMyReviews<TData = GetApiReviewsMyReviews200>(
    params?: DeepNonNullable<GetApiReviewsMyReviewsParams>,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  getApiReviewsMyReviews<TData = GetApiReviewsMyReviews200>(
    params?: DeepNonNullable<GetApiReviewsMyReviewsParams>,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  getApiReviewsMyReviews<TData = GetApiReviewsMyReviews200>(
    params?: DeepNonNullable<GetApiReviewsMyReviewsParams>,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.get<TData>(`/api/reviews/my-reviews`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  }

  /**
   * 教師取得自己收到的所有評價，支援分頁、篩選和排序
   * @summary 取得教師收到的評價列表
   */
  getApiReviewsReceived<TData = GetApiReviewsReceived200>(
    params?: DeepNonNullable<GetApiReviewsReceivedParams>,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  getApiReviewsReceived<TData = GetApiReviewsReceived200>(
    params?: DeepNonNullable<GetApiReviewsReceivedParams>,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  getApiReviewsReceived<TData = GetApiReviewsReceived200>(
    params?: DeepNonNullable<GetApiReviewsReceivedParams>,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  getApiReviewsReceived<TData = GetApiReviewsReceived200>(
    params?: DeepNonNullable<GetApiReviewsReceivedParams>,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.get<TData>(`/api/reviews/received`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  }

  /**
   * 獲取教師後台儀表板的總覽數據，包括學生數、課程數、預約數、收益統計等關鍵指標
   * @summary 取得教師儀表板總覽統計
   */
  getTeacherDashboardTeacherIdOverview<
    TData = GetTeacherDashboardTeacherIdOverview200,
  >(
    teacherId: number,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  getTeacherDashboardTeacherIdOverview<
    TData = GetTeacherDashboardTeacherIdOverview200,
  >(
    teacherId: number,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  getTeacherDashboardTeacherIdOverview<
    TData = GetTeacherDashboardTeacherIdOverview200,
  >(
    teacherId: number,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  getTeacherDashboardTeacherIdOverview<
    TData = GetTeacherDashboardTeacherIdOverview200,
  >(
    teacherId: number,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.get<TData>(
      `/teacher-dashboard/${teacherId}/overview`,
      options,
    );
  }

  /**
   * 獲取教師的詳細統計數據，包括總覽、績效指標、趨勢分析等
   * @summary 取得教師詳細統計資料
   */
  getTeacherDashboardTeacherIdStatistics<
    TData = GetTeacherDashboardTeacherIdStatistics200,
  >(
    teacherId: number,
    params?: DeepNonNullable<GetTeacherDashboardTeacherIdStatisticsParams>,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  getTeacherDashboardTeacherIdStatistics<
    TData = GetTeacherDashboardTeacherIdStatistics200,
  >(
    teacherId: number,
    params?: DeepNonNullable<GetTeacherDashboardTeacherIdStatisticsParams>,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  getTeacherDashboardTeacherIdStatistics<
    TData = GetTeacherDashboardTeacherIdStatistics200,
  >(
    teacherId: number,
    params?: DeepNonNullable<GetTeacherDashboardTeacherIdStatisticsParams>,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  getTeacherDashboardTeacherIdStatistics<
    TData = GetTeacherDashboardTeacherIdStatistics200,
  >(
    teacherId: number,
    params?: DeepNonNullable<GetTeacherDashboardTeacherIdStatisticsParams>,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.get<TData>(`/teacher-dashboard/${teacherId}/statistics`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  }

  /**
   * 獲取教師的學生列表，支援分頁、搜尋和狀態篩選
   * @summary 取得學生列表
   */
  getTeacherDashboardTeacherIdStudents<
    TData = GetTeacherDashboardTeacherIdStudents200,
  >(
    teacherId: number,
    params?: DeepNonNullable<GetTeacherDashboardTeacherIdStudentsParams>,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  getTeacherDashboardTeacherIdStudents<
    TData = GetTeacherDashboardTeacherIdStudents200,
  >(
    teacherId: number,
    params?: DeepNonNullable<GetTeacherDashboardTeacherIdStudentsParams>,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  getTeacherDashboardTeacherIdStudents<
    TData = GetTeacherDashboardTeacherIdStudents200,
  >(
    teacherId: number,
    params?: DeepNonNullable<GetTeacherDashboardTeacherIdStudentsParams>,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  getTeacherDashboardTeacherIdStudents<
    TData = GetTeacherDashboardTeacherIdStudents200,
  >(
    teacherId: number,
    params?: DeepNonNullable<GetTeacherDashboardTeacherIdStudentsParams>,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.get<TData>(`/teacher-dashboard/${teacherId}/students`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  }

  /**
   * 獲取特定學生的詳細資料，包括基本資訊、學習紀錄、預約紀錄等
   * @summary 取得學生詳細資料
   */
  getTeacherDashboardTeacherIdStudentsStudentId<
    TData = GetTeacherDashboardTeacherIdStudentsStudentId200,
  >(
    teacherId: number,
    studentId: number,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  getTeacherDashboardTeacherIdStudentsStudentId<
    TData = GetTeacherDashboardTeacherIdStudentsStudentId200,
  >(
    teacherId: number,
    studentId: number,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  getTeacherDashboardTeacherIdStudentsStudentId<
    TData = GetTeacherDashboardTeacherIdStudentsStudentId200,
  >(
    teacherId: number,
    studentId: number,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  getTeacherDashboardTeacherIdStudentsStudentId<
    TData = GetTeacherDashboardTeacherIdStudentsStudentId200,
  >(
    teacherId: number,
    studentId: number,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.get<TData>(
      `/teacher-dashboard/${teacherId}/students/${studentId}`,
      options,
    );
  }

  /**
   * 獲取教師的預約列表，支援狀態篩選和日期範圍篩選
   * @summary 取得預約列表
   */
  getTeacherDashboardTeacherIdReservations<
    TData = GetTeacherDashboardTeacherIdReservations200,
  >(
    teacherId: number,
    params?: DeepNonNullable<GetTeacherDashboardTeacherIdReservationsParams>,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  getTeacherDashboardTeacherIdReservations<
    TData = GetTeacherDashboardTeacherIdReservations200,
  >(
    teacherId: number,
    params?: DeepNonNullable<GetTeacherDashboardTeacherIdReservationsParams>,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  getTeacherDashboardTeacherIdReservations<
    TData = GetTeacherDashboardTeacherIdReservations200,
  >(
    teacherId: number,
    params?: DeepNonNullable<GetTeacherDashboardTeacherIdReservationsParams>,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  getTeacherDashboardTeacherIdReservations<
    TData = GetTeacherDashboardTeacherIdReservations200,
  >(
    teacherId: number,
    params?: DeepNonNullable<GetTeacherDashboardTeacherIdReservationsParams>,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.get<TData>(
      `/teacher-dashboard/${teacherId}/reservations`,
      {
        ...options,
        params: { ...params, ...options?.params },
      },
    );
  }

  /**
   * 教師更新預約的狀態（確認、取消等）
   * @summary 更新預約狀態
   */
  putTeacherDashboardTeacherIdReservationsReservationIdStatus<
    TData = PutTeacherDashboardTeacherIdReservationsReservationIdStatus200,
  >(
    teacherId: number,
    reservationId: number,
    putTeacherDashboardTeacherIdReservationsReservationIdStatusBody: PutTeacherDashboardTeacherIdReservationsReservationIdStatusBody,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  putTeacherDashboardTeacherIdReservationsReservationIdStatus<
    TData = PutTeacherDashboardTeacherIdReservationsReservationIdStatus200,
  >(
    teacherId: number,
    reservationId: number,
    putTeacherDashboardTeacherIdReservationsReservationIdStatusBody: PutTeacherDashboardTeacherIdReservationsReservationIdStatusBody,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  putTeacherDashboardTeacherIdReservationsReservationIdStatus<
    TData = PutTeacherDashboardTeacherIdReservationsReservationIdStatus200,
  >(
    teacherId: number,
    reservationId: number,
    putTeacherDashboardTeacherIdReservationsReservationIdStatusBody: PutTeacherDashboardTeacherIdReservationsReservationIdStatusBody,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  putTeacherDashboardTeacherIdReservationsReservationIdStatus<
    TData = PutTeacherDashboardTeacherIdReservationsReservationIdStatus200,
  >(
    teacherId: number,
    reservationId: number,
    putTeacherDashboardTeacherIdReservationsReservationIdStatusBody: PutTeacherDashboardTeacherIdReservationsReservationIdStatusBody,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.put<TData>(
      `/teacher-dashboard/${teacherId}/reservations/${reservationId}/status`,
      putTeacherDashboardTeacherIdReservationsReservationIdStatusBody,
      options,
    );
  }

  /**
   * 獲取教師的收益明細記錄，支援狀態篩選
   * @summary 取得收益列表
   */
  getTeacherDashboardTeacherIdEarnings<
    TData = GetTeacherDashboardTeacherIdEarnings200,
  >(
    teacherId: number,
    params?: DeepNonNullable<GetTeacherDashboardTeacherIdEarningsParams>,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  getTeacherDashboardTeacherIdEarnings<
    TData = GetTeacherDashboardTeacherIdEarnings200,
  >(
    teacherId: number,
    params?: DeepNonNullable<GetTeacherDashboardTeacherIdEarningsParams>,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  getTeacherDashboardTeacherIdEarnings<
    TData = GetTeacherDashboardTeacherIdEarnings200,
  >(
    teacherId: number,
    params?: DeepNonNullable<GetTeacherDashboardTeacherIdEarningsParams>,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  getTeacherDashboardTeacherIdEarnings<
    TData = GetTeacherDashboardTeacherIdEarnings200,
  >(
    teacherId: number,
    params?: DeepNonNullable<GetTeacherDashboardTeacherIdEarningsParams>,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.get<TData>(`/teacher-dashboard/${teacherId}/earnings`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  }

  /**
   * 獲取教師的結算記錄列表
   * @summary 取得結算列表
   */
  getTeacherDashboardTeacherIdSettlements<
    TData = GetTeacherDashboardTeacherIdSettlements200,
  >(
    teacherId: number,
    params?: DeepNonNullable<GetTeacherDashboardTeacherIdSettlementsParams>,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  getTeacherDashboardTeacherIdSettlements<
    TData = GetTeacherDashboardTeacherIdSettlements200,
  >(
    teacherId: number,
    params?: DeepNonNullable<GetTeacherDashboardTeacherIdSettlementsParams>,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  getTeacherDashboardTeacherIdSettlements<
    TData = GetTeacherDashboardTeacherIdSettlements200,
  >(
    teacherId: number,
    params?: DeepNonNullable<GetTeacherDashboardTeacherIdSettlementsParams>,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  getTeacherDashboardTeacherIdSettlements<
    TData = GetTeacherDashboardTeacherIdSettlements200,
  >(
    teacherId: number,
    params?: DeepNonNullable<GetTeacherDashboardTeacherIdSettlementsParams>,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.get<TData>(`/teacher-dashboard/${teacherId}/settlements`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  }

  /**
   * 獲取特定結算記錄的詳細資訊
   * @summary 取得結算詳情
   */
  getTeacherDashboardTeacherIdSettlementsSettlementId<
    TData = GetTeacherDashboardTeacherIdSettlementsSettlementId200,
  >(
    teacherId: number,
    settlementId: number,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  getTeacherDashboardTeacherIdSettlementsSettlementId<
    TData = GetTeacherDashboardTeacherIdSettlementsSettlementId200,
  >(
    teacherId: number,
    settlementId: number,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  getTeacherDashboardTeacherIdSettlementsSettlementId<
    TData = GetTeacherDashboardTeacherIdSettlementsSettlementId200,
  >(
    teacherId: number,
    settlementId: number,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  getTeacherDashboardTeacherIdSettlementsSettlementId<
    TData = GetTeacherDashboardTeacherIdSettlementsSettlementId200,
  >(
    teacherId: number,
    settlementId: number,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.get<TData>(
      `/teacher-dashboard/${teacherId}/settlements/${settlementId}`,
      options,
    );
  }

  /**
   * 獲取教師的收益統計總結資料
   * @summary 取得收益統計
   */
  getTeacherDashboardTeacherIdEarningsStats<
    TData = GetTeacherDashboardTeacherIdEarningsStats200,
  >(
    teacherId: number,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  getTeacherDashboardTeacherIdEarningsStats<
    TData = GetTeacherDashboardTeacherIdEarningsStats200,
  >(
    teacherId: number,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  getTeacherDashboardTeacherIdEarningsStats<
    TData = GetTeacherDashboardTeacherIdEarningsStats200,
  >(
    teacherId: number,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  getTeacherDashboardTeacherIdEarningsStats<
    TData = GetTeacherDashboardTeacherIdEarningsStats200,
  >(
    teacherId: number,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.get<TData>(
      `/teacher-dashboard/${teacherId}/earnings-stats`,
      options,
    );
  }

  /**
 * 學生可以透過此端點申請成為教師。需要提供國籍和自我介紹資訊。

**業務規則:**
- 只有學生角色可以申請
- 帳號狀態必須為活躍
- 每個使用者只能有一個申請記錄
- 自我介紹至少需要100字元
- 國籍欄位不可超過50字元

 * @summary 申請成為教師
 */
  postTeachersApply<TData = TeacherApplicationCreateResponse>(
    teacherApplicationRequest: TeacherApplicationRequest,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  postTeachersApply<TData = TeacherApplicationCreateResponse>(
    teacherApplicationRequest: TeacherApplicationRequest,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  postTeachersApply<TData = TeacherApplicationCreateResponse>(
    teacherApplicationRequest: TeacherApplicationRequest,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  postTeachersApply<TData = TeacherApplicationCreateResponse>(
    teacherApplicationRequest: TeacherApplicationRequest,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.post<TData>(
      `/teachers/apply`,
      teacherApplicationRequest,
      options,
    );
  }

  /**
 * 取得當前使用者的教師申請狀態和詳細資訊。

**回應內容包含:**
- 申請基本資訊（國籍、自我介紹）
- 申請狀態（待審核、已通過、已拒絕）
- 申請時間和審核時間
- 審核備註（如有）

 * @summary 查詢申請狀態
 */
  getTeachersApplication<TData = TeacherApplicationStatusResponse>(
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  getTeachersApplication<TData = TeacherApplicationStatusResponse>(
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  getTeachersApplication<TData = TeacherApplicationStatusResponse>(
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  getTeachersApplication<TData = TeacherApplicationStatusResponse>(
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.get<TData>(`/teachers/application`, options);
  }

  /**
 * 更新教師申請的資料內容。只能在「待審核」或「已拒絕」狀態下進行修改。

**業務規則:**
- 只能更新國籍和自我介紹
- 已通過的申請無法修改
- 被拒絕的申請修改後會重新設為待審核狀態
- 自我介紹長度限制：100-1000字元
- 國籍長度限制：1-50字元

 * @summary 更新申請資料
 */
  putTeachersApplication<TData = TeacherApplicationUpdateResponse>(
    teacherApplicationUpdateRequest: TeacherApplicationUpdateRequest,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  putTeachersApplication<TData = TeacherApplicationUpdateResponse>(
    teacherApplicationUpdateRequest: TeacherApplicationUpdateRequest,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  putTeachersApplication<TData = TeacherApplicationUpdateResponse>(
    teacherApplicationUpdateRequest: TeacherApplicationUpdateRequest,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  putTeachersApplication<TData = TeacherApplicationUpdateResponse>(
    teacherApplicationUpdateRequest: TeacherApplicationUpdateRequest,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.put<TData>(
      `/teachers/application`,
      teacherApplicationUpdateRequest,
      options,
    );
  }

  /**
 * 重新提交被拒絕的教師申請。只有被拒絕的申請才能重新提交。

**業務規則:**
- 只有被拒絕狀態的申請才能重新提交
- 重新提交後申請狀態會重置為待審核
- 審核相關欄位會被清空（審核時間、審核員、審核備註）
- 重新設定提交時間為當前時間

 * @summary 重新提交申請
 */
  postTeachersResubmit<TData = PostTeachersResubmit200>(
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  postTeachersResubmit<TData = PostTeachersResubmit200>(
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  postTeachersResubmit<TData = PostTeachersResubmit200>(
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  postTeachersResubmit<TData = PostTeachersResubmit200>(
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.post<TData>(`/teachers/resubmit`, undefined, options);
  }

  /**
 * 提交完整的教師申請，系統會驗證所有必填資料完整性。

**前置驗證條件:**
- 必須有教師基本申請記錄（國籍、自我介紹）
- 至少一筆工作經驗記錄
- 至少一筆學習經歷記錄（含檔案）
- 至少一張證書記錄（含檔案）
- 申請尚未提交過

**業務規則:**
- 提交後申請狀態設為待審核
- 記錄提交時間
- 已提交的申請無法重複提交

 * @summary 最終提交教師申請
 */
  postTeachersSubmit<TData = PostTeachersSubmit200>(
    postTeachersSubmitBody: PostTeachersSubmitBody,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  postTeachersSubmit<TData = PostTeachersSubmit200>(
    postTeachersSubmitBody: PostTeachersSubmitBody,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  postTeachersSubmit<TData = PostTeachersSubmit200>(
    postTeachersSubmitBody: PostTeachersSubmitBody,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  postTeachersSubmit<TData = PostTeachersSubmit200>(
    postTeachersSubmitBody: PostTeachersSubmitBody,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.post<TData>(
      `/teachers/submit`,
      postTeachersSubmitBody,
      options,
    );
  }

  /**
 * 取得已通過審核的教師基本資料，包含統計資訊。

**權限要求:**
- 需要已通過審核的教師身份
- 未通過審核的申請無法存取此端點

**回應內容包含:**
- 基本資料（國籍、自我介紹）
- 申請狀態和審核資訊
- 統計數據（學生數、課程數、評分、收入）

 * @summary 取得教師基本資料
 */
  getTeachersProfile<TData = GetTeachersProfile200>(
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  getTeachersProfile<TData = GetTeachersProfile200>(
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  getTeachersProfile<TData = GetTeachersProfile200>(
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  getTeachersProfile<TData = GetTeachersProfile200>(
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.get<TData>(`/teachers/profile`, options);
  }

  /**
 * 更新已通過審核的教師基本資料。修改重要資料後將觸發重新審核。

**業務規則:**
- 只有已通過審核的教師可以使用此功能
- 修改重要資料後申請狀態會變為待審核
- 審核相關欄位會被清空
- 支援部分更新（可只更新國籍或自我介紹其中之一）

**驗證規則:**
- 國籍：1-50字元
- 自我介紹：100-1000字元

 * @summary 更新教師基本資料
 */
  putTeachersProfile<TData = PutTeachersProfile200>(
    teacherProfileUpdateRequest: TeacherProfileUpdateRequest,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  putTeachersProfile<TData = PutTeachersProfile200>(
    teacherProfileUpdateRequest: TeacherProfileUpdateRequest,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  putTeachersProfile<TData = PutTeachersProfile200>(
    teacherProfileUpdateRequest: TeacherProfileUpdateRequest,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  putTeachersProfile<TData = PutTeachersProfile200>(
    teacherProfileUpdateRequest: TeacherProfileUpdateRequest,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.put<TData>(
      `/teachers/profile`,
      teacherProfileUpdateRequest,
      options,
    );
  }

  /**
 * 取得當前教師的所有工作經驗記錄列表。

**權限要求:**
- 需要教師身份
- 只能查看自己的工作經驗

**回應內容:**
- 按建立時間降序排列
- 包含完整的工作經驗資訊
- 提供總筆數資訊

 * @summary 取得工作經驗列表
 */
  getTeachersWorkExperiences<TData = GetTeachersWorkExperiences200>(
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  getTeachersWorkExperiences<TData = GetTeachersWorkExperiences200>(
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  getTeachersWorkExperiences<TData = GetTeachersWorkExperiences200>(
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  getTeachersWorkExperiences<TData = GetTeachersWorkExperiences200>(
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.get<TData>(`/teachers/work-experiences`, options);
  }

  /**
 * 新增一筆工作經驗記錄。

**業務規則:**
- 需要教師身份
- 在職工作經驗不可填寫結束日期
- 離職工作經驗必須填寫結束日期
- 結束日期不得早於開始日期
- 年份範圍：1900-當前年份+1
- 月份範圍：1-12

 * @summary 新增工作經驗
 */
  postTeachersWorkExperiences<TData = WorkExperienceCreateResponse>(
    workExperienceCreateRequest: WorkExperienceCreateRequest,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  postTeachersWorkExperiences<TData = WorkExperienceCreateResponse>(
    workExperienceCreateRequest: WorkExperienceCreateRequest,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  postTeachersWorkExperiences<TData = WorkExperienceCreateResponse>(
    workExperienceCreateRequest: WorkExperienceCreateRequest,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  postTeachersWorkExperiences<TData = WorkExperienceCreateResponse>(
    workExperienceCreateRequest: WorkExperienceCreateRequest,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.post<TData>(
      `/teachers/work-experiences`,
      workExperienceCreateRequest,
      options,
    );
  }

  /**
 * 更新指定的工作經驗記錄。

**權限要求:**
- 需要教師身份
- 只能更新自己的工作經驗

**業務規則:**
- 支援部分更新（可只更新部分欄位）
- 在職工作經驗不可填寫結束日期
- 離職工作經驗必須填寫結束日期
- 結束日期不得早於開始日期

 * @summary 更新工作經驗
 */
  putTeachersWorkExperiencesId<TData = WorkExperienceUpdateResponse>(
    id: number,
    workExperienceUpdateRequest: WorkExperienceUpdateRequest,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  putTeachersWorkExperiencesId<TData = WorkExperienceUpdateResponse>(
    id: number,
    workExperienceUpdateRequest: WorkExperienceUpdateRequest,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  putTeachersWorkExperiencesId<TData = WorkExperienceUpdateResponse>(
    id: number,
    workExperienceUpdateRequest: WorkExperienceUpdateRequest,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  putTeachersWorkExperiencesId<TData = WorkExperienceUpdateResponse>(
    id: number,
    workExperienceUpdateRequest: WorkExperienceUpdateRequest,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.put<TData>(
      `/teachers/work-experiences/${id}`,
      workExperienceUpdateRequest,
      options,
    );
  }

  /**
 * 刪除指定的工作經驗記錄。

**權限要求:**
- 需要教師身份
- 只能刪除自己的工作經驗

**注意事項:**
- 刪除操作無法復原
- 建議在前端提供確認對話框

 * @summary 刪除工作經驗
 */
  deleteTeachersWorkExperiencesId<TData = DeleteTeachersWorkExperiencesId200>(
    id: number,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  deleteTeachersWorkExperiencesId<TData = DeleteTeachersWorkExperiencesId200>(
    id: number,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  deleteTeachersWorkExperiencesId<TData = DeleteTeachersWorkExperiencesId200>(
    id: number,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  deleteTeachersWorkExperiencesId<TData = DeleteTeachersWorkExperiencesId200>(
    id: number,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.delete<TData>(`/teachers/work-experiences/${id}`, options);
  }

  /**
 * 取得目前教師的所有學習經歷記錄，依開始年份降序排列。

**權限要求:**
- 需要教師權限
- 帳號狀態必須為活躍

 * @summary 取得學習經歷清單
 */
  getTeachersLearningExperiences<TData = GetTeachersLearningExperiences200>(
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  getTeachersLearningExperiences<TData = GetTeachersLearningExperiences200>(
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  getTeachersLearningExperiences<TData = GetTeachersLearningExperiences200>(
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  getTeachersLearningExperiences<TData = GetTeachersLearningExperiences200>(
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.get<TData>(`/teachers/learning-experiences`, options);
  }

  /**
 * 建立新的學習經歷記錄。

**業務規則:**
- 需要教師權限
- 結束年月不能早於開始年月
- 年份範圍必須合理（不超過20年）
- 不能設定未來年份（除了預計畢業年份）

**檔案上傳:**
- TODO: 檔案上傳功能開發中
- 支援格式：PDF, JPG, JPEG, PNG
- 檔案大小限制：5MB

 * @summary 建立學習經歷
 */
  postTeachersLearningExperiences<TData = PostTeachersLearningExperiences201>(
    postTeachersLearningExperiencesBody: PostTeachersLearningExperiencesBody,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  postTeachersLearningExperiences<TData = PostTeachersLearningExperiences201>(
    postTeachersLearningExperiencesBody: PostTeachersLearningExperiencesBody,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  postTeachersLearningExperiences<TData = PostTeachersLearningExperiences201>(
    postTeachersLearningExperiencesBody: PostTeachersLearningExperiencesBody,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  postTeachersLearningExperiences<TData = PostTeachersLearningExperiences201>(
    postTeachersLearningExperiencesBody: PostTeachersLearningExperiencesBody,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.post<TData>(
      `/teachers/learning-experiences`,
      postTeachersLearningExperiencesBody,
      options,
    );
  }

  /**
 * 更新指定的學習經歷記錄。只能更新屬於自己的學習經歷。

**業務規則:**
- 需要教師權限
- 只能更新屬於自己的學習經歷
- 結束年月不能早於開始年月
- 年份範圍必須合理

**檔案上傳:**
- TODO: 檔案上傳功能開發中
- 如果上傳新檔案，會取代原有檔案

 * @summary 更新學習經歷
 */
  putTeachersLearningExperiencesId<TData = PutTeachersLearningExperiencesId200>(
    id: number,
    putTeachersLearningExperiencesIdBody: PutTeachersLearningExperiencesIdBody,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  putTeachersLearningExperiencesId<TData = PutTeachersLearningExperiencesId200>(
    id: number,
    putTeachersLearningExperiencesIdBody: PutTeachersLearningExperiencesIdBody,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  putTeachersLearningExperiencesId<TData = PutTeachersLearningExperiencesId200>(
    id: number,
    putTeachersLearningExperiencesIdBody: PutTeachersLearningExperiencesIdBody,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  putTeachersLearningExperiencesId<TData = PutTeachersLearningExperiencesId200>(
    id: number,
    putTeachersLearningExperiencesIdBody: PutTeachersLearningExperiencesIdBody,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.put<TData>(
      `/teachers/learning-experiences/${id}`,
      putTeachersLearningExperiencesIdBody,
      options,
    );
  }

  /**
 * 刪除指定的學習經歷記錄。只能刪除屬於自己的學習經歷。

**業務規則:**
- 需要教師權限
- 只能刪除屬於自己的學習經歷
- 刪除後相關檔案也會一併刪除（TODO: 檔案系統開發中）

**注意事項:**
- 此操作無法復原
- 相關證書檔案會一併刪除

 * @summary 刪除學習經歷
 */
  deleteTeachersLearningExperiencesId<
    TData = DeleteTeachersLearningExperiencesId200,
  >(
    id: number,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  deleteTeachersLearningExperiencesId<
    TData = DeleteTeachersLearningExperiencesId200,
  >(
    id: number,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  deleteTeachersLearningExperiencesId<
    TData = DeleteTeachersLearningExperiencesId200,
  >(
    id: number,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  deleteTeachersLearningExperiencesId<
    TData = DeleteTeachersLearningExperiencesId200,
  >(
    id: number,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.delete<TData>(
      `/teachers/learning-experiences/${id}`,
      options,
    );
  }

  /**
 * 取得已認證教師的所有證書記錄

**功能特色：**
- 只能查看自己的證書列表
- 依建立時間倒序排列
- 支援完整的證書資訊展示

**權限控制：**
- 需要有效的 JWT Token
- 自動依據 Token 中的教師ID篩選資料

 * @summary 取得教師證書列表
 */
  getTeachersCertificates<TData = TeacherCertificateListResponse>(
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  getTeachersCertificates<TData = TeacherCertificateListResponse>(
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  getTeachersCertificates<TData = TeacherCertificateListResponse>(
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  getTeachersCertificates<TData = TeacherCertificateListResponse>(
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.get<TData>(`/teachers/certificates`, options);
  }

  /**
 * 新增教師的證書記錄，支援多種證書類型

**證書類型支援：**
- teaching_license: 教師證書
- language_certification: 語言認證
- professional_certificate: 專業證照
- academic_degree: 學位證書

**檔案規範：**
- 支援格式：PDF, JPG, JPEG, PNG
- 檔案大小：最大 5MB
- 檔案路徑：需為有效的系統路徑

**驗證規則：**
- 發證機構：1-100字元
- 證書名稱：1-200字元
- 持有人姓名：1-100字元
- 證書編號：1-100字元（需唯一）
- 證書主題：1-200字元
- 類別ID：1-50字元

 * @summary 新增教師證書
 */
  postTeachersCertificates<TData = TeacherCertificateCreateResponse>(
    createTeacherCertificateRequest: CreateTeacherCertificateRequest,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  postTeachersCertificates<TData = TeacherCertificateCreateResponse>(
    createTeacherCertificateRequest: CreateTeacherCertificateRequest,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  postTeachersCertificates<TData = TeacherCertificateCreateResponse>(
    createTeacherCertificateRequest: CreateTeacherCertificateRequest,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  postTeachersCertificates<TData = TeacherCertificateCreateResponse>(
    createTeacherCertificateRequest: CreateTeacherCertificateRequest,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.post<TData>(
      `/teachers/certificates`,
      createTeacherCertificateRequest,
      options,
    );
  }

  /**
 * 更新指定的教師證書記錄，支援部分欄位更新

**更新特色：**
- 支援部分欄位更新（Partial Update）
- 自動驗證證書所有權
- 保持資料一致性和完整性

**可更新欄位：**
- verifying_institution: 發證機構
- license_name: 證書名稱
- holder_name: 持有人姓名
- license_number: 證書編號
- file_path: 檔案路徑
- category_id: 證書類別
- subject: 證書主題

**權限控制：**
- 只能更新自己的證書
- 系統自動驗證證書所有權
- 防止跨用戶資料篡改

 * @summary 更新教師證書
 */
  putTeachersCertificatesId<TData = TeacherCertificateUpdateResponse>(
    id: number,
    updateTeacherCertificateRequest: UpdateTeacherCertificateRequest,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  putTeachersCertificatesId<TData = TeacherCertificateUpdateResponse>(
    id: number,
    updateTeacherCertificateRequest: UpdateTeacherCertificateRequest,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  putTeachersCertificatesId<TData = TeacherCertificateUpdateResponse>(
    id: number,
    updateTeacherCertificateRequest: UpdateTeacherCertificateRequest,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  putTeachersCertificatesId<TData = TeacherCertificateUpdateResponse>(
    id: number,
    updateTeacherCertificateRequest: UpdateTeacherCertificateRequest,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.put<TData>(
      `/teachers/certificates/${id}`,
      updateTeacherCertificateRequest,
      options,
    );
  }

  /**
 * 刪除指定的教師證書記錄，操作不可逆

**刪除特性：**
- 物理刪除（不可恢復）
- 自動驗證證書所有權
- 同時清理相關檔案資源

**安全措施：**
- 只能刪除自己的證書
- 系統自動驗證所有權
- 防止誤刪或惡意刪除

**注意事項：**
- 刪除後無法恢復
- 建議刪除前先確認證書資訊
- 相關的檔案也會一併清理

 * @summary 刪除教師證書
 */
  deleteTeachersCertificatesId<TData = TeacherCertificateDeleteResponse>(
    id: number,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  deleteTeachersCertificatesId<TData = TeacherCertificateDeleteResponse>(
    id: number,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  deleteTeachersCertificatesId<TData = TeacherCertificateDeleteResponse>(
    id: number,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  deleteTeachersCertificatesId<TData = TeacherCertificateDeleteResponse>(
    id: number,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.delete<TData>(`/teachers/certificates/${id}`, options);
  }

  /**
 * 教師可以查詢自己設定的可預約時段。

**業務規則:**
- 需要教師身份認證
- 按照星期和時間排序回傳
- 包含啟用/停用狀態

 * @summary 取得可預約時段設定
 */
  getTeachersSchedule<TData = GetScheduleResponse>(
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  getTeachersSchedule<TData = GetScheduleResponse>(
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  getTeachersSchedule<TData = GetScheduleResponse>(
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  getTeachersSchedule<TData = GetScheduleResponse>(
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.get<TData>(`/teachers/schedule`, options);
  }

  /**
 * 教師可以設定或更新自己的可預約時段。

**業務規則:**
- 需要教師身份認證
- 會完全替換現有時段設定
- 傳空陣列可清空所有時段
- 時間格式需為 HH:MM
- 結束時間必須晚於開始時間
- 星期範圍 0-6 (週日到週六)

 * @summary 更新可預約時段設定
 */
  putTeachersSchedule<TData = UpdateScheduleResponse>(
    updateScheduleRequest: UpdateScheduleRequest,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  putTeachersSchedule<TData = UpdateScheduleResponse>(
    updateScheduleRequest: UpdateScheduleRequest,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  putTeachersSchedule<TData = UpdateScheduleResponse>(
    updateScheduleRequest: UpdateScheduleRequest,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  putTeachersSchedule<TData = UpdateScheduleResponse>(
    updateScheduleRequest: UpdateScheduleRequest,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.put<TData>(
      `/teachers/schedule`,
      updateScheduleRequest,
      options,
    );
  }

  /**
 * 檢查教師的可預約時段與現有預約是否有衝突。

**業務規則:**
- 需要教師身份認證
- 可指定檢查時間範圍和特定時段
- 預設檢查未來30天內的衝突
- 只檢查已確認的預約

 * @summary 檢查時段衝突
 */
  getTeachersScheduleConflicts<TData = CheckConflictsResponse>(
    params?: DeepNonNullable<GetTeachersScheduleConflictsParams>,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  getTeachersScheduleConflicts<TData = CheckConflictsResponse>(
    params?: DeepNonNullable<GetTeachersScheduleConflictsParams>,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  getTeachersScheduleConflicts<TData = CheckConflictsResponse>(
    params?: DeepNonNullable<GetTeachersScheduleConflictsParams>,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  getTeachersScheduleConflicts<TData = CheckConflictsResponse>(
    params?: DeepNonNullable<GetTeachersScheduleConflictsParams>,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.get<TData>(`/teachers/schedule/conflicts`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  }

  /**
 * 教師可以透過此端點上傳影片。支援兩種上傳方式：
1. **檔案上傳**: 上傳本地影片檔案 (video_type: storage)
2. **YouTube 連結**: 提供 YouTube 影片連結 (video_type: youtube)

**業務規則:**
- 需要教師權限
- 影片名稱必填且不能超過 100 字元
- 分類欄位不能超過 50 字元
- 介紹欄位不能超過 1000 字元
- YouTube 連結必須是有效的 YouTube URL
- 支援的檔案格式: mp4, avi, mov, wmv

 * @summary 上傳影片
 */
  postVideos<TData = VideoUploadResponse>(
    videoUploadRequest: VideoUploadRequest,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  postVideos<TData = VideoUploadResponse>(
    videoUploadRequest: VideoUploadRequest,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  postVideos<TData = VideoUploadResponse>(
    videoUploadRequest: VideoUploadRequest,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  postVideos<TData = VideoUploadResponse>(
    videoUploadRequest: VideoUploadRequest,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.post<TData>(`/videos`, videoUploadRequest, options);
  }

  /**
 * 取得當前教師的影片列表，支援分頁、搜尋和篩選功能。

**查詢功能:**
- 依分類篩選影片
- 依關鍵字搜尋影片名稱和介紹
- 分頁查詢結果
- 只顯示該教師上傳的影片

 * @summary 取得影片列表
 */
  getVideos<TData = VideoListResponse>(
    params?: DeepNonNullable<GetVideosParams>,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  getVideos<TData = VideoListResponse>(
    params?: DeepNonNullable<GetVideosParams>,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  getVideos<TData = VideoListResponse>(
    params?: DeepNonNullable<GetVideosParams>,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  getVideos<TData = VideoListResponse>(
    params?: DeepNonNullable<GetVideosParams>,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.get<TData>(`/videos`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  }

  /**
 * 取得指定影片的詳細資訊。只能取得該教師上傳的影片詳情。

**業務規則:**
- 只能查看自己上傳的影片
- 影片ID必須為有效的數字
- 不會顯示已刪除的影片

 * @summary 取得影片詳細資訊
 */
  getVideosId<TData = VideoDetailResponse>(
    id: number,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  getVideosId<TData = VideoDetailResponse>(
    id: number,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  getVideosId<TData = VideoDetailResponse>(
    id: number,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  getVideosId<TData = VideoDetailResponse>(
    id: number,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.get<TData>(`/videos/${id}`, options);
  }

  /**
 * 更新指定影片的資訊。支援部分欄位更新。

**可更新欄位:**
- 影片名稱 (name)
- 分類 (category)
- 介紹 (intro)

**業務規則:**
- 只能更新自己上傳的影片
- 至少需要提供一個要更新的欄位
- 不能修改影片類型 (video_type)
- 不能修改檔案路徑或 YouTube 連結

 * @summary 更新影片資訊
 */
  putVideosId<TData = VideoUpdateResponse>(
    id: number,
    videoUpdateRequest: VideoUpdateRequest,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  putVideosId<TData = VideoUpdateResponse>(
    id: number,
    videoUpdateRequest: VideoUpdateRequest,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  putVideosId<TData = VideoUpdateResponse>(
    id: number,
    videoUpdateRequest: VideoUpdateRequest,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  putVideosId<TData = VideoUpdateResponse>(
    id: number,
    videoUpdateRequest: VideoUpdateRequest,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.put<TData>(`/videos/${id}`, videoUpdateRequest, options);
  }

  /**
 * 刪除指定的影片（軟刪除）。影片不會被實際刪除，只是標記為已刪除狀態。

**業務規則:**
- 只能刪除自己上傳的影片
- 使用軟刪除機制，不會實際刪除資料
- 已刪除的影片無法再次刪除
- 刪除後的影片不會出現在列表中

 * @summary 刪除影片
 */
  deleteVideosId<TData = SuccessResponse>(
    id: number,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  deleteVideosId<TData = SuccessResponse>(
    id: number,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  deleteVideosId<TData = SuccessResponse>(
    id: number,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  deleteVideosId<TData = SuccessResponse>(
    id: number,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.delete<TData>(`/videos/${id}`, options);
  }

  /**
   * 檢查 API 服務是否正常運作
   * @summary 健康檢查
   */
  getHealthcheck(
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<string>;
  getHealthcheck(
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<string>>;
  getHealthcheck(
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<string>>;
  getHealthcheck(
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.get(`/healthcheck`, {
      responseType: 'text',
      ...options,
    });
  }

  /**
   * 測試 API 連接是否正常
   * @summary Ping 測試
   */
  getApiPing<TData = GetApiPing200>(
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  getApiPing<TData = GetApiPing200>(
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  getApiPing<TData = GetApiPing200>(
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  getApiPing<TData = GetApiPing200>(
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.get<TData>(`/api/ping`, options);
  }
}

export type PostApiAdminLoginClientResult = NonNullable<AdminLoginResponse>;
export type PostApiAdminLogoutClientResult = NonNullable<PostApiAdminLogout200>;
export type GetApiAdminProfileClientResult = NonNullable<GetApiAdminProfile200>;
export type PostApiAdminTeachersTeacherIdApproveClientResult =
  NonNullable<TeacherApprovalResponse>;
export type PostApiAdminTeachersTeacherIdRejectClientResult =
  NonNullable<PostApiAdminTeachersTeacherIdReject200>;
export type PostApiAdminCoursesCourseIdApproveClientResult =
  NonNullable<CourseApprovalResponse>;
export type PostApiAdminCoursesCourseIdRejectClientResult =
  NonNullable<CourseApprovalResponse>;
export type PostApiAuthRegisterClientResult = NonNullable<RegisterResponse>;
export type PostApiAuthLoginClientResult = NonNullable<LoginResponse>;
export type PostApiAuthRefreshTokenClientResult =
  NonNullable<RefreshTokenResponse>;
export type PostApiAuthForgotPasswordClientResult =
  NonNullable<ForgotPasswordResponse>;
export type PostApiAuthResetPasswordClientResult =
  NonNullable<ResetPasswordResponse>;
export type GetApiAuthProfileClientResult = NonNullable<GetProfileResponse>;
export type PutApiAuthProfileClientResult = NonNullable<UpdateProfileResponse>;
export type DeleteApiAuthProfileClientResult =
  NonNullable<DeleteProfileResponse>;
export type PostApiCartItemsClientResult = NonNullable<PostApiCartItems201>;
export type GetApiCartClientResult = NonNullable<GetApiCart200>;
export type DeleteApiCartClientResult = NonNullable<DeleteApiCart200>;
export type PutApiCartItemsItemIdClientResult =
  NonNullable<PutApiCartItemsItemId200>;
export type DeleteApiCartItemsItemIdClientResult =
  NonNullable<DeleteApiCartItemsItemId200>;
export type PostApiCoursesClientResult = NonNullable<PostApiCourses201>;
export type GetApiCoursesClientResult = NonNullable<GetApiCourses200>;
export type PutApiCoursesIdClientResult = NonNullable<PutApiCoursesId200>;
export type GetApiCoursesIdClientResult = NonNullable<GetApiCoursesId200>;
export type DeleteApiCoursesIdClientResult = NonNullable<DeleteApiCoursesId200>;
export type PostApiCoursesIdSubmitClientResult =
  NonNullable<PostApiCoursesIdSubmit200>;
export type PostApiCoursesIdResubmitClientResult =
  NonNullable<PostApiCoursesIdResubmit200>;
export type PostApiCoursesIdPublishClientResult =
  NonNullable<PostApiCoursesIdPublish200>;
export type PostApiCoursesIdArchiveClientResult =
  NonNullable<PostApiCoursesIdArchive200>;
export type PostApiCoursesIdVideosClientResult =
  NonNullable<PostApiCoursesIdVideos201>;
export type GetApiCoursesIdVideosClientResult =
  NonNullable<GetApiCoursesIdVideos200>;
export type PutApiCoursesCourseIdVideosOrderClientResult =
  NonNullable<PutApiCoursesCourseIdVideosOrder200>;
export type DeleteApiCoursesCourseIdVideosVideoIdClientResult =
  NonNullable<DeleteApiCoursesCourseIdVideosVideoId200>;
export type GetApiCoursesIdFilesClientResult =
  NonNullable<GetApiCoursesIdFiles200>;
export type PostApiCoursesIdFilesClientResult =
  NonNullable<PostApiCoursesIdFiles201>;
export type DeleteApiCoursesCourseIdFilesFileIdClientResult =
  NonNullable<DeleteApiCoursesCourseIdFilesFileId200>;
export type GetApiCoursesUuidReviewsClientResult =
  NonNullable<CourseReviewsResponse>;
export type PostApiFavoritesClientResult = NonNullable<PostApiFavorites201>;
export type GetApiFavoritesClientResult = NonNullable<GetApiFavorites200>;
export type DeleteApiFavoritesCourseIdClientResult =
  NonNullable<DeleteApiFavoritesCourseId200>;
export type GetApiFavoritesStatusCourseIdClientResult =
  NonNullable<GetApiFavoritesStatusCourseId200>;
export type PostApiOrdersClientResult = NonNullable<PostApiOrders201>;
export type GetApiOrdersClientResult = NonNullable<GetApiOrders200>;
export type GetApiOrdersOrderIdClientResult =
  NonNullable<GetApiOrdersOrderId200>;
export type PutApiOrdersOrderIdCancelClientResult =
  NonNullable<PutApiOrdersOrderIdCancel200>;
export type PostApiOrdersOrderIdCancelClientResult =
  NonNullable<PostApiOrdersOrderIdCancel200>;
export type PostApiOrdersOrderIdPaymentClientResult =
  NonNullable<PostApiOrdersOrderIdPayment200>;
export type GetApiCoursesCourseIdPriceOptionsClientResult =
  NonNullable<GetApiCoursesCourseIdPriceOptions200>;
export type PostApiCoursesCourseIdPriceOptionsClientResult =
  NonNullable<PostApiCoursesCourseIdPriceOptions201>;
export type PutApiCoursesCourseIdPriceOptionsIdClientResult =
  NonNullable<PutApiCoursesCourseIdPriceOptionsId200>;
export type DeleteApiCoursesCourseIdPriceOptionsIdClientResult =
  NonNullable<DeleteApiCoursesCourseIdPriceOptionsId200>;
export type GetApiCoursesPublicClientResult =
  NonNullable<GetApiCoursesPublic200>;
export type GetApiCoursesPublicIdClientResult =
  NonNullable<GetApiCoursesPublicId200>;
export type GetApiReviewsCoursesIdClientResult =
  NonNullable<GetApiReviewsCoursesId200>;
export type GetApiTeachersPublicIdClientResult =
  NonNullable<GetApiTeachersPublicId200>;
export type GetApiTeachersPublicIdCoursesClientResult =
  NonNullable<GetApiTeachersPublicIdCourses200>;
export type PostApiPurchasesFromOrderClientResult =
  NonNullable<PostApiPurchasesFromOrder201>;
export type GetApiPurchasesClientResult = NonNullable<GetApiPurchases200>;
export type GetApiPurchasesCoursesCourseIdClientResult =
  NonNullable<GetApiPurchasesCoursesCourseId200>;
export type PostApiPurchasesCoursesCourseIdConsumeClientResult =
  NonNullable<PostApiPurchasesCoursesCourseIdConsume200>;
export type GetApiPurchasesCoursesCourseIdCheckClientResult =
  NonNullable<GetApiPurchasesCoursesCourseIdCheck200>;
export type PostApiPurchasesIdUseClientResult =
  NonNullable<PostApiPurchasesIdUse200>;
export type GetApiPurchasesSummaryClientResult =
  NonNullable<GetApiPurchasesSummary200>;
export type GetApiPurchasesIdClientResult = NonNullable<GetApiPurchasesId200>;
export type PostApiReservationsClientResult =
  NonNullable<CreateReservationResponse>;
export type GetApiReservationsClientResult =
  NonNullable<ReservationListResponse>;
export type PutApiReservationsIdStatusClientResult =
  NonNullable<PutApiReservationsIdStatus200>;
export type DeleteApiReservationsIdClientResult =
  NonNullable<DeleteApiReservationsId200>;
export type GetApiReservationsCalendarClientResult =
  NonNullable<CalendarViewResponse>;
export type PostApiReviewsClientResult = NonNullable<PostApiReviews201>;
export type GetApiReviewsCoursesUuidClientResult =
  NonNullable<GetApiReviewsCoursesUuid200>;
export type GetApiReviewsMyReviewsClientResult =
  NonNullable<GetApiReviewsMyReviews200>;
export type GetApiReviewsReceivedClientResult =
  NonNullable<GetApiReviewsReceived200>;
export type GetTeacherDashboardTeacherIdOverviewClientResult =
  NonNullable<GetTeacherDashboardTeacherIdOverview200>;
export type GetTeacherDashboardTeacherIdStatisticsClientResult =
  NonNullable<GetTeacherDashboardTeacherIdStatistics200>;
export type GetTeacherDashboardTeacherIdStudentsClientResult =
  NonNullable<GetTeacherDashboardTeacherIdStudents200>;
export type GetTeacherDashboardTeacherIdStudentsStudentIdClientResult =
  NonNullable<GetTeacherDashboardTeacherIdStudentsStudentId200>;
export type GetTeacherDashboardTeacherIdReservationsClientResult =
  NonNullable<GetTeacherDashboardTeacherIdReservations200>;
export type PutTeacherDashboardTeacherIdReservationsReservationIdStatusClientResult =
  NonNullable<PutTeacherDashboardTeacherIdReservationsReservationIdStatus200>;
export type GetTeacherDashboardTeacherIdEarningsClientResult =
  NonNullable<GetTeacherDashboardTeacherIdEarnings200>;
export type GetTeacherDashboardTeacherIdSettlementsClientResult =
  NonNullable<GetTeacherDashboardTeacherIdSettlements200>;
export type GetTeacherDashboardTeacherIdSettlementsSettlementIdClientResult =
  NonNullable<GetTeacherDashboardTeacherIdSettlementsSettlementId200>;
export type GetTeacherDashboardTeacherIdEarningsStatsClientResult =
  NonNullable<GetTeacherDashboardTeacherIdEarningsStats200>;
export type PostTeachersApplyClientResult =
  NonNullable<TeacherApplicationCreateResponse>;
export type GetTeachersApplicationClientResult =
  NonNullable<TeacherApplicationStatusResponse>;
export type PutTeachersApplicationClientResult =
  NonNullable<TeacherApplicationUpdateResponse>;
export type PostTeachersResubmitClientResult =
  NonNullable<PostTeachersResubmit200>;
export type PostTeachersSubmitClientResult = NonNullable<PostTeachersSubmit200>;
export type GetTeachersProfileClientResult = NonNullable<GetTeachersProfile200>;
export type PutTeachersProfileClientResult = NonNullable<PutTeachersProfile200>;
export type GetTeachersWorkExperiencesClientResult =
  NonNullable<GetTeachersWorkExperiences200>;
export type PostTeachersWorkExperiencesClientResult =
  NonNullable<WorkExperienceCreateResponse>;
export type PutTeachersWorkExperiencesIdClientResult =
  NonNullable<WorkExperienceUpdateResponse>;
export type DeleteTeachersWorkExperiencesIdClientResult =
  NonNullable<DeleteTeachersWorkExperiencesId200>;
export type GetTeachersLearningExperiencesClientResult =
  NonNullable<GetTeachersLearningExperiences200>;
export type PostTeachersLearningExperiencesClientResult =
  NonNullable<PostTeachersLearningExperiences201>;
export type PutTeachersLearningExperiencesIdClientResult =
  NonNullable<PutTeachersLearningExperiencesId200>;
export type DeleteTeachersLearningExperiencesIdClientResult =
  NonNullable<DeleteTeachersLearningExperiencesId200>;
export type GetTeachersCertificatesClientResult =
  NonNullable<TeacherCertificateListResponse>;
export type PostTeachersCertificatesClientResult =
  NonNullable<TeacherCertificateCreateResponse>;
export type PutTeachersCertificatesIdClientResult =
  NonNullable<TeacherCertificateUpdateResponse>;
export type DeleteTeachersCertificatesIdClientResult =
  NonNullable<TeacherCertificateDeleteResponse>;
export type GetTeachersScheduleClientResult = NonNullable<GetScheduleResponse>;
export type PutTeachersScheduleClientResult =
  NonNullable<UpdateScheduleResponse>;
export type GetTeachersScheduleConflictsClientResult =
  NonNullable<CheckConflictsResponse>;
export type PostVideosClientResult = NonNullable<VideoUploadResponse>;
export type GetVideosClientResult = NonNullable<VideoListResponse>;
export type GetVideosIdClientResult = NonNullable<VideoDetailResponse>;
export type PutVideosIdClientResult = NonNullable<VideoUpdateResponse>;
export type DeleteVideosIdClientResult = NonNullable<SuccessResponse>;
export type GetHealthcheckClientResult = NonNullable<string>;
export type GetApiPingClientResult = NonNullable<GetApiPing200>;
