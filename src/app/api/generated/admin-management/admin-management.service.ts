/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * Talent Match API
 * 全面重構後的 Talent Match 後端 API 文件

🆕 v2.1 新功能：整合式課程建立 API，支援同時上傳圖片和設定價格方案
 * OpenAPI spec version: 2.1.0
 */
import { HttpClient } from '@angular/common/http';
import type {
  HttpContext,
  HttpEvent,
  HttpHeaders,
  HttpParams,
  HttpResponse as AngularHttpResponse,
} from '@angular/common/http';

import { Injectable, inject } from '@angular/core';

// import type { DeepNonNullable } from '@orval/core/src/utils/deep-non-nullable';

// 使用 TypeScript 內建的 NonNullable 型別
type DeepNonNullable<T> = T extends (...args: any[]) => any
  ? T
  : T extends any[]
  ? _DeepNonNullableArray<T[number]>
  : T extends object
  ? _DeepNonNullableObject<T>
  : NonNullable<T>;

type _DeepNonNullableArray<T> = Array<DeepNonNullable<NonNullable<T>>>;

type _DeepNonNullableObject<T> = {
  [P in keyof T]-?: DeepNonNullable<NonNullable<T[P]>>;
};

import { Observable } from 'rxjs';

import type {
  GetApiAdminCourseApplications200,
  GetApiAdminCourseApplicationsParams,
  GetApiAdminProfile200,
  GetApiAdminTeacherApplications200,
  GetApiAdminTeacherApplicationsParams,
  PostApiAdminCoursesCourseIdRejectBody,
  PostApiAdminCreate201,
  PostApiAdminCreateBody,
  PostApiAdminLogin200,
  PostApiAdminLoginBody,
  PostApiAdminTeachersTeacherIdRejectBody,
  SuccessResponse,
} from '../talentMatchAPI.schemas';

interface HttpClientOptions {
  headers?: HttpHeaders | Record<string, string | string[]>;
  context?: HttpContext;
  params?:
    | HttpParams
    | Record<
        string,
        string | number | boolean | ReadonlyArray<string | number | boolean>
      >;
  reportProgress?: boolean;
  withCredentials?: boolean;
  credentials?: RequestCredentials;
  keepalive?: boolean;
  priority?: RequestPriority;
  cache?: RequestCache;
  mode?: RequestMode;
  redirect?: RequestRedirect;
  referrer?: string;
  integrity?: string;
  transferCache?: { includeHeaders?: string[] } | boolean;
  timeout?: number;
}

@Injectable({ providedIn: 'root' })
export class AdminManagementService {
  private readonly http = inject(HttpClient);
  /**
 * 管理員使用帳號密碼登入系統，取得管理員權限的 JWT Token。
管理員登入使用 username/password 組合，與一般使用者的 email/password 不同。

**登入流程：**
1. 驗證帳號密碼
2. 檢查管理員權限
3. 生成 JWT Token
4. 記錄登入日誌

**安全機制：**
- 密碼加密驗證
- 登入失敗次數限制
- IP 白名單檢查（如有設定）

 * @summary 管理員登入
 */
  postApiAdminLogin<TData = PostApiAdminLogin200>(
    postApiAdminLoginBody: PostApiAdminLoginBody,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  postApiAdminLogin<TData = PostApiAdminLogin200>(
    postApiAdminLoginBody: PostApiAdminLoginBody,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  postApiAdminLogin<TData = PostApiAdminLogin200>(
    postApiAdminLoginBody: PostApiAdminLoginBody,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  postApiAdminLogin<TData = PostApiAdminLogin200>(
    postApiAdminLoginBody: PostApiAdminLoginBody,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.post<TData>(
      `/api/admin/login`,
      postApiAdminLoginBody,
      options,
    );
  }
  /**
 * 建立新的管理員帳號，用於平台管理和審核操作。
此功能通常由超級管理員或系統初始化時使用。

**建立流程：**
1. 驗證帳號和電子郵件唯一性
2. 加密密碼並儲存
3. 設定管理員角色和權限
4. 記錄建立日誌

**安全機制：**
- 密碼加密儲存
- 帳號唯一性檢查
- 強密碼要求
- 建立日誌記錄

 * @summary 建立管理員帳號
 */
  postApiAdminCreate<TData = PostApiAdminCreate201>(
    postApiAdminCreateBody: PostApiAdminCreateBody,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  postApiAdminCreate<TData = PostApiAdminCreate201>(
    postApiAdminCreateBody: PostApiAdminCreateBody,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  postApiAdminCreate<TData = PostApiAdminCreate201>(
    postApiAdminCreateBody: PostApiAdminCreateBody,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  postApiAdminCreate<TData = PostApiAdminCreate201>(
    postApiAdminCreateBody: PostApiAdminCreateBody,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.post<TData>(
      `/api/admin/create`,
      postApiAdminCreateBody,
      options,
    );
  }
  /**
 * 管理員登出系統，使當前 JWT Token 失效。
登出後該 Token 將無法再用於存取管理員功能。

**登出流程：**
1. 驗證當前 Token 有效性
2. 將 Token 加入黑名單
3. 清除相關會話資料
4. 記錄登出日誌

 * @summary 管理員登出
 */
  postApiAdminLogout<TData = SuccessResponse>(
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  postApiAdminLogout<TData = SuccessResponse>(
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  postApiAdminLogout<TData = SuccessResponse>(
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  postApiAdminLogout<TData = SuccessResponse>(
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.post<TData>(`/api/admin/logout`, undefined, options);
  }
  /**
 * 取得當前登入管理員的個人資料和權限資訊。
包含基本資料、權限列表、最後登入時間等資訊。

**返回資訊：**
- 基本個人資料（帳號、姓名、聯絡資訊）
- 權限列表和角色資訊
- 最後登入和活動記錄
- 系統設定偏好

 * @summary 取得管理員個人資料
 */
  getApiAdminProfile<TData = GetApiAdminProfile200>(
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  getApiAdminProfile<TData = GetApiAdminProfile200>(
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  getApiAdminProfile<TData = GetApiAdminProfile200>(
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  getApiAdminProfile<TData = GetApiAdminProfile200>(
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.get<TData>(`/api/admin/profile`, options);
  }
  /**
 * 取得所有教師申請的列表，包含待審核、已通過、已拒絕等各種狀態的申請。
管理員可以透過此 API 查看和管理所有教師申請案。

**功能特色：**
- 支援申請狀態篩選
- 支援申請時間排序
- 顯示申請者基本資訊
- 支援分頁瀏覽

**權限要求：**
- 需要管理員身份認證
- 需要教師管理權限

 * @summary 取得教師申請列表
 */
  getApiAdminTeacherApplications<TData = GetApiAdminTeacherApplications200>(
    params?: DeepNonNullable<GetApiAdminTeacherApplicationsParams>,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  getApiAdminTeacherApplications<TData = GetApiAdminTeacherApplications200>(
    params?: DeepNonNullable<GetApiAdminTeacherApplicationsParams>,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  getApiAdminTeacherApplications<TData = GetApiAdminTeacherApplications200>(
    params?: DeepNonNullable<GetApiAdminTeacherApplicationsParams>,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  getApiAdminTeacherApplications<TData = GetApiAdminTeacherApplications200>(
    params?: DeepNonNullable<GetApiAdminTeacherApplicationsParams>,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.get<TData>(`/api/admin/teacher-applications`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  }
  /**
 * 取得所有課程申請的列表，包含待審核、已通過、已拒絕等各種狀態的課程。
管理員可以透過此 API 查看和管理所有課程申請案。

**功能特色：**
- 支援課程狀態篩選
- 支援申請時間排序
- 顯示課程和教師基本資訊
- 支援分頁瀏覽

**權限要求：**
- 需要管理員身份認證
- 需要課程管理權限

 * @summary 取得課程申請列表
 */
  getApiAdminCourseApplications<TData = GetApiAdminCourseApplications200>(
    params?: DeepNonNullable<GetApiAdminCourseApplicationsParams>,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  getApiAdminCourseApplications<TData = GetApiAdminCourseApplications200>(
    params?: DeepNonNullable<GetApiAdminCourseApplicationsParams>,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  getApiAdminCourseApplications<TData = GetApiAdminCourseApplications200>(
    params?: DeepNonNullable<GetApiAdminCourseApplicationsParams>,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  getApiAdminCourseApplications<TData = GetApiAdminCourseApplications200>(
    params?: DeepNonNullable<GetApiAdminCourseApplicationsParams>,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.get<TData>(`/api/admin/course-applications`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  }
  /**
 * 核准指定的教師申請，將申請者的身份從 TEACHER_PENDING 升級為 TEACHER。
核准後申請者將獲得教師權限，可以建立和管理課程。

**核准流程：**
1. 驗證申請狀態（必須是待審核狀態）
2. 更新使用者角色為教師
3. 記錄審核結果和時間
4. 發送核准通知給申請者

**權限要求：**
- 需要管理員身份認證
- 需要教師管理權限

 * @summary 核准教師申請
 */
  postApiAdminTeachersTeacherIdApprove<TData = SuccessResponse>(
    teacherId: number,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  postApiAdminTeachersTeacherIdApprove<TData = SuccessResponse>(
    teacherId: number,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  postApiAdminTeachersTeacherIdApprove<TData = SuccessResponse>(
    teacherId: number,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  postApiAdminTeachersTeacherIdApprove<TData = SuccessResponse>(
    teacherId: number,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.post<TData>(
      `/api/admin/teachers/${teacherId}/approve`,
      undefined,
      options,
    );
  }
  /**
 * 拒絕指定的教師申請，並記錄拒絕原因。
拒絕後申請者可以查看拒絕原因，並可選擇重新提交申請。

**拒絕流程：**
1. 驗證申請狀態（必須是待審核狀態）
2. 記錄拒絕原因和時間
3. 更新申請狀態為已拒絕
4. 發送拒絕通知給申請者

**權限要求：**
- 需要管理員身份認證
- 需要教師管理權限

 * @summary 拒絕教師申請
 */
  postApiAdminTeachersTeacherIdReject<TData = SuccessResponse>(
    teacherId: number,
    postApiAdminTeachersTeacherIdRejectBody: PostApiAdminTeachersTeacherIdRejectBody,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  postApiAdminTeachersTeacherIdReject<TData = SuccessResponse>(
    teacherId: number,
    postApiAdminTeachersTeacherIdRejectBody: PostApiAdminTeachersTeacherIdRejectBody,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  postApiAdminTeachersTeacherIdReject<TData = SuccessResponse>(
    teacherId: number,
    postApiAdminTeachersTeacherIdRejectBody: PostApiAdminTeachersTeacherIdRejectBody,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  postApiAdminTeachersTeacherIdReject<TData = SuccessResponse>(
    teacherId: number,
    postApiAdminTeachersTeacherIdRejectBody: PostApiAdminTeachersTeacherIdRejectBody,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.post<TData>(
      `/api/admin/teachers/${teacherId}/reject`,
      postApiAdminTeachersTeacherIdRejectBody,
      options,
    );
  }
  /**
 * 核准指定的課程申請，將課程狀態從審核中改為審核通過。
核准後教師可以選擇發布課程，讓學生可以瀏覽和報名。

**核准流程：**
1. 驗證課程狀態（必須是審核中狀態）
2. 更新課程狀態為審核通過
3. 記錄審核結果和時間
4. 發送核准通知給教師

**權限要求：**
- 需要管理員身份認證
- 需要課程管理權限

 * @summary 核准課程申請
 */
  postApiAdminCoursesCourseIdApprove<TData = SuccessResponse>(
    courseId: number,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  postApiAdminCoursesCourseIdApprove<TData = SuccessResponse>(
    courseId: number,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  postApiAdminCoursesCourseIdApprove<TData = SuccessResponse>(
    courseId: number,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  postApiAdminCoursesCourseIdApprove<TData = SuccessResponse>(
    courseId: number,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.post<TData>(
      `/api/admin/courses/${courseId}/approve`,
      undefined,
      options,
    );
  }
  /**
 * 拒絕指定的課程申請，並記錄拒絕原因。
拒絕後教師可以查看拒絕原因，修正課程內容後重新提交審核。

**拒絕流程：**
1. 驗證課程狀態（必須是審核中狀態）
2. 記錄拒絕原因和時間
3. 更新課程狀態為審核拒絕
4. 發送拒絕通知給教師

**權限要求：**
- 需要管理員身份認證
- 需要課程管理權限

 * @summary 拒絕課程申請
 */
  postApiAdminCoursesCourseIdReject<TData = SuccessResponse>(
    courseId: number,
    postApiAdminCoursesCourseIdRejectBody: PostApiAdminCoursesCourseIdRejectBody,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  postApiAdminCoursesCourseIdReject<TData = SuccessResponse>(
    courseId: number,
    postApiAdminCoursesCourseIdRejectBody: PostApiAdminCoursesCourseIdRejectBody,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  postApiAdminCoursesCourseIdReject<TData = SuccessResponse>(
    courseId: number,
    postApiAdminCoursesCourseIdRejectBody: PostApiAdminCoursesCourseIdRejectBody,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  postApiAdminCoursesCourseIdReject<TData = SuccessResponse>(
    courseId: number,
    postApiAdminCoursesCourseIdRejectBody: PostApiAdminCoursesCourseIdRejectBody,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.post<TData>(
      `/api/admin/courses/${courseId}/reject`,
      postApiAdminCoursesCourseIdRejectBody,
      options,
    );
  }
}

export type PostApiAdminLoginClientResult = NonNullable<PostApiAdminLogin200>;
export type PostApiAdminCreateClientResult = NonNullable<PostApiAdminCreate201>;
export type PostApiAdminLogoutClientResult = NonNullable<SuccessResponse>;
export type GetApiAdminProfileClientResult = NonNullable<GetApiAdminProfile200>;
export type GetApiAdminTeacherApplicationsClientResult =
  NonNullable<GetApiAdminTeacherApplications200>;
export type GetApiAdminCourseApplicationsClientResult =
  NonNullable<GetApiAdminCourseApplications200>;
export type PostApiAdminTeachersTeacherIdApproveClientResult =
  NonNullable<SuccessResponse>;
export type PostApiAdminTeachersTeacherIdRejectClientResult =
  NonNullable<SuccessResponse>;
export type PostApiAdminCoursesCourseIdApproveClientResult =
  NonNullable<SuccessResponse>;
export type PostApiAdminCoursesCourseIdRejectClientResult =
  NonNullable<SuccessResponse>;
