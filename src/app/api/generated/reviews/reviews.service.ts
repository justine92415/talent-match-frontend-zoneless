/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * Talent Match API
 * 全面重構後的 Talent Match 後端 API 文件

🆕 v2.1 新功能：整合式課程建立 API，支援同時上傳圖片和設定價格方案
 * OpenAPI spec version: 2.1.0
 */
import { HttpClient } from '@angular/common/http';
import type {
  HttpContext,
  HttpEvent,
  HttpHeaders,
  HttpParams,
  HttpResponse as AngularHttpResponse,
} from '@angular/common/http';

import { Injectable, inject } from '@angular/core';

// import type { DeepNonNullable } from '@orval/core/src/utils/deep-non-nullable';

// 使用 TypeScript 內建的 NonNullable 型別
type DeepNonNullable<T> = T extends (...args: any[]) => any
  ? T
  : T extends any[]
  ? _DeepNonNullableArray<T[number]>
  : T extends object
  ? _DeepNonNullableObject<T>
  : NonNullable<T>;

type _DeepNonNullableArray<T> = Array<DeepNonNullable<NonNullable<T>>>;

type _DeepNonNullableObject<T> = {
  [P in keyof T]-?: DeepNonNullable<NonNullable<T[P]>>;
};

import { Observable } from 'rxjs';

import type {
  CourseReviewsSuccessResponse,
  GetApiReviewsCoursesUuidParams,
  ReviewSubmitRequest,
  ReviewSubmitSuccessResponse,
} from '../talentMatchAPI.schemas';

interface HttpClientOptions {
  headers?: HttpHeaders | Record<string, string | string[]>;
  context?: HttpContext;
  params?:
    | HttpParams
    | Record<
        string,
        string | number | boolean | ReadonlyArray<string | number | boolean>
      >;
  reportProgress?: boolean;
  withCredentials?: boolean;
  credentials?: RequestCredentials;
  keepalive?: boolean;
  priority?: RequestPriority;
  cache?: RequestCache;
  mode?: RequestMode;
  redirect?: RequestRedirect;
  referrer?: string;
  integrity?: string;
  transferCache?: { includeHeaders?: string[] } | boolean;
  timeout?: number;
}

@Injectable({ providedIn: 'root' })
export class ReviewsService {
  private readonly http = inject(HttpClient);
  /**
 * 學生在完成預約課程後提交評價。

**業務邏輯**：
- 驗證請求參數（預約 UUID、評分、評語）
- 確認預約屬於當前學生且狀態為已完成 (COMPLETED) 或課程已結束 (OVERDUE)
- OVERDUE 狀態表示課程已結束但尚未手動確認完成，此時學生可以評價
- 評價後若學生狀態為 OVERDUE，系統會自動將其更新為 COMPLETED
- 防止重複評價同一預約
- 建立評價並更新課程與教師的評分統計

 * @summary 提交課程評價
 */
  postApiReviews<TData = ReviewSubmitSuccessResponse>(
    reviewSubmitRequest: ReviewSubmitRequest,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  postApiReviews<TData = ReviewSubmitSuccessResponse>(
    reviewSubmitRequest: ReviewSubmitRequest,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  postApiReviews<TData = ReviewSubmitSuccessResponse>(
    reviewSubmitRequest: ReviewSubmitRequest,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  postApiReviews<TData = ReviewSubmitSuccessResponse>(
    reviewSubmitRequest: ReviewSubmitRequest,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.post<TData>(`/api/reviews`, reviewSubmitRequest, options);
  }
  /**
 * 取得指定課程的所有評價記錄，包含評價內容、學生資訊和評分統計。

**業務邏輯**：
- 驗證課程 UUID 格式是否正確
- 確認課程存在且狀態為已發佈 (published)
- 支援依評分篩選評價
- 支援依建立時間或評分排序
- 使用分頁機制提升效能
- 並行查詢評價列表、總數與統計資訊
- 回傳課程基本資訊、評價列表、分頁資訊和評分統計

**查詢優化**：
- 使用 LEFT JOIN 一次查詢取得學生資訊
- 並行執行評價列表、總數和統計查詢
- 使用資料庫索引加速排序和篩選

 * @summary 取得課程評價列表
 */
  getApiReviewsCoursesUuid<TData = CourseReviewsSuccessResponse>(
    uuid: string,
    params?: DeepNonNullable<GetApiReviewsCoursesUuidParams>,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  getApiReviewsCoursesUuid<TData = CourseReviewsSuccessResponse>(
    uuid: string,
    params?: DeepNonNullable<GetApiReviewsCoursesUuidParams>,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  getApiReviewsCoursesUuid<TData = CourseReviewsSuccessResponse>(
    uuid: string,
    params?: DeepNonNullable<GetApiReviewsCoursesUuidParams>,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  getApiReviewsCoursesUuid<TData = CourseReviewsSuccessResponse>(
    uuid: string,
    params?: DeepNonNullable<GetApiReviewsCoursesUuidParams>,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.get<TData>(`/api/reviews/courses/${uuid}`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  }
}

export type PostApiReviewsClientResult =
  NonNullable<ReviewSubmitSuccessResponse>;
export type GetApiReviewsCoursesUuidClientResult =
  NonNullable<CourseReviewsSuccessResponse>;
