/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * Talent Match API
 * 全面重構後的 Talent Match 後端 API 文件
 * OpenAPI spec version: 2.0.0
 */
import { HttpClient } from '@angular/common/http';
import type {
  HttpContext,
  HttpEvent,
  HttpHeaders,
  HttpParams,
  HttpResponse as AngularHttpResponse,
} from '@angular/common/http';

import { Injectable, inject } from '@angular/core';

import { Observable } from 'rxjs';

import type {
  DeleteApiFilesDelete200,
  DeleteApiFilesDeleteBody,
  GetApiFilesMetadataFileUrl200,
  GetApiFilesTestConnection200,
  PostApiFilesDownloadUrl200,
  PostApiFilesDownloadUrlBody,
  PostApiFilesUpload201,
  PostApiFilesUploadBody,
} from '../talentMatchAPI.schemas';

interface HttpClientOptions {
  headers?: HttpHeaders | Record<string, string | string[]>;
  context?: HttpContext;
  params?:
    | HttpParams
    | Record<
        string,
        string | number | boolean | ReadonlyArray<string | number | boolean>
      >;
  reportProgress?: boolean;
  withCredentials?: boolean;
  credentials?: RequestCredentials;
  keepalive?: boolean;
  priority?: RequestPriority;
  cache?: RequestCache;
  mode?: RequestMode;
  redirect?: RequestRedirect;
  referrer?: string;
  integrity?: string;
  transferCache?: { includeHeaders?: string[] } | boolean;
  timeout?: number;
}

@Injectable({ providedIn: 'root' })
export class FileUploadService {
  private readonly http = inject(HttpClient);
  /**
 * 上傳一個或多個檔案到 Firebase Storage

**支援格式**：
- 圖片: JPEG, JPG, PNG, GIF, WebP
- 文件: PDF, DOC, DOCX, TXT

**限制**：
- 最大檔案大小: 10MB
- 最大檔案數量: 5個

 * @summary 上傳多個檔案
 */
  postApiFilesUpload<TData = PostApiFilesUpload201>(
    postApiFilesUploadBody: PostApiFilesUploadBody,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  postApiFilesUpload<TData = PostApiFilesUpload201>(
    postApiFilesUploadBody: PostApiFilesUploadBody,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  postApiFilesUpload<TData = PostApiFilesUpload201>(
    postApiFilesUploadBody: PostApiFilesUploadBody,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  postApiFilesUpload<TData = PostApiFilesUpload201>(
    postApiFilesUploadBody: PostApiFilesUploadBody,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    const formData = new FormData();
    postApiFilesUploadBody.files.forEach((value) =>
      formData.append(`files`, value),
    );
    if (postApiFilesUploadBody.category !== undefined) {
      formData.append(`category`, postApiFilesUploadBody.category);
    }

    return this.http.post<TData>(`/api/files/upload`, formData, options);
  }
  /**
   * 從 Firebase Storage 刪除指定檔案
   * @summary 刪除檔案
   */
  deleteApiFilesDelete<TData = DeleteApiFilesDelete200>(
    deleteApiFilesDeleteBody: DeleteApiFilesDeleteBody,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  deleteApiFilesDelete<TData = DeleteApiFilesDelete200>(
    deleteApiFilesDeleteBody: DeleteApiFilesDeleteBody,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  deleteApiFilesDelete<TData = DeleteApiFilesDelete200>(
    deleteApiFilesDeleteBody: DeleteApiFilesDeleteBody,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  deleteApiFilesDelete<TData = DeleteApiFilesDelete200>(
    deleteApiFilesDeleteBody: DeleteApiFilesDeleteBody,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.delete<TData>(`/api/files/delete`, {
      body: deleteApiFilesDeleteBody,
      ...options,
    });
  }
  /**
   * 取得指定檔案的詳細資訊
   * @summary 取得檔案資訊
   */
  getApiFilesMetadataFileUrl<TData = GetApiFilesMetadataFileUrl200>(
    fileUrl: string,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  getApiFilesMetadataFileUrl<TData = GetApiFilesMetadataFileUrl200>(
    fileUrl: string,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  getApiFilesMetadataFileUrl<TData = GetApiFilesMetadataFileUrl200>(
    fileUrl: string,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  getApiFilesMetadataFileUrl<TData = GetApiFilesMetadataFileUrl200>(
    fileUrl: string,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.get<TData>(`/api/files/metadata/${fileUrl}`, options);
  }
  /**
   * 為私有檔案生成帶有過期時間的下載連結
   * @summary 生成下載連結
   */
  postApiFilesDownloadUrl<TData = PostApiFilesDownloadUrl200>(
    postApiFilesDownloadUrlBody: PostApiFilesDownloadUrlBody,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  postApiFilesDownloadUrl<TData = PostApiFilesDownloadUrl200>(
    postApiFilesDownloadUrlBody: PostApiFilesDownloadUrlBody,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  postApiFilesDownloadUrl<TData = PostApiFilesDownloadUrl200>(
    postApiFilesDownloadUrlBody: PostApiFilesDownloadUrlBody,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  postApiFilesDownloadUrl<TData = PostApiFilesDownloadUrl200>(
    postApiFilesDownloadUrlBody: PostApiFilesDownloadUrlBody,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.post<TData>(
      `/api/files/download-url`,
      postApiFilesDownloadUrlBody,
      options,
    );
  }
  /**
   * 檢查 Firebase Storage 配置和連接狀態，幫助診斷上傳問題
   * @summary 診斷 Firebase Storage 連接
   */
  getApiFilesTestConnection<TData = GetApiFilesTestConnection200>(
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  getApiFilesTestConnection<TData = GetApiFilesTestConnection200>(
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  getApiFilesTestConnection<TData = GetApiFilesTestConnection200>(
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  getApiFilesTestConnection<TData = GetApiFilesTestConnection200>(
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.get<TData>(`/api/files/test-connection`, options);
  }
}

export type PostApiFilesUploadClientResult = NonNullable<PostApiFilesUpload201>;
export type DeleteApiFilesDeleteClientResult =
  NonNullable<DeleteApiFilesDelete200>;
export type GetApiFilesMetadataFileUrlClientResult =
  NonNullable<GetApiFilesMetadataFileUrl200>;
export type PostApiFilesDownloadUrlClientResult =
  NonNullable<PostApiFilesDownloadUrl200>;
export type GetApiFilesTestConnectionClientResult =
  NonNullable<GetApiFilesTestConnection200>;
