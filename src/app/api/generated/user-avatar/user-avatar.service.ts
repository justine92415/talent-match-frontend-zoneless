/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * Talent Match API
 * 全面重構後的 Talent Match 後端 API 文件

🆕 v2.1 新功能：整合式課程建立 API，支援同時上傳圖片和設定價格方案
 * OpenAPI spec version: 2.1.0
 */
import { HttpClient } from '@angular/common/http';
import type {
  HttpContext,
  HttpEvent,
  HttpHeaders,
  HttpParams,
  HttpResponse as AngularHttpResponse,
} from '@angular/common/http';

import { Injectable, inject } from '@angular/core';

import { Observable } from 'rxjs';

import type {
  AvatarDeleteSuccessResponse,
  AvatarUploadSuccessResponse,
  PostApiUploadAvatarBody,
} from '../talentMatchAPI.schemas';

interface HttpClientOptions {
  headers?: HttpHeaders | Record<string, string | string[]>;
  context?: HttpContext;
  params?:
    | HttpParams
    | Record<
        string,
        string | number | boolean | ReadonlyArray<string | number | boolean>
      >;
  reportProgress?: boolean;
  withCredentials?: boolean;
  credentials?: RequestCredentials;
  keepalive?: boolean;
  priority?: RequestPriority;
  cache?: RequestCache;
  mode?: RequestMode;
  redirect?: RequestRedirect;
  referrer?: string;
  integrity?: string;
  transferCache?: { includeHeaders?: string[] } | boolean;
  timeout?: number;
}

@Injectable({ providedIn: 'root' })
export class UserAvatarService {
  private readonly http = inject(HttpClient);
  /**
 * 上傳使用者個人頭像到 Firebase Storage。

**業務邏輯**：
- 驗證使用者已登入（JWT Token）
- 驗證 Firebase Storage 配置
- 解析上傳的頭像檔案（使用 formidable）
- 驗證檔案格式（僅支援 JPEG, JPG, PNG, WebP）
- 驗證檔案大小（最大 5MB）
- 刪除使用者之前的頭像（如果存在）
- 上傳新頭像到 Firebase Storage
- 更新使用者的頭像 URL
- 清理暫存檔案

 * @summary 上傳使用者頭像
 */
  postApiUploadAvatar<TData = AvatarUploadSuccessResponse>(
    postApiUploadAvatarBody: PostApiUploadAvatarBody,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  postApiUploadAvatar<TData = AvatarUploadSuccessResponse>(
    postApiUploadAvatarBody: PostApiUploadAvatarBody,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  postApiUploadAvatar<TData = AvatarUploadSuccessResponse>(
    postApiUploadAvatarBody: PostApiUploadAvatarBody,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  postApiUploadAvatar<TData = AvatarUploadSuccessResponse>(
    postApiUploadAvatarBody: PostApiUploadAvatarBody,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    const formData = new FormData();
    formData.append(`avatar`, postApiUploadAvatarBody.avatar);

    return this.http.post<TData>(`/api/upload/avatar`, formData, options);
  }
  /**
 * 從 Firebase Storage 刪除使用者頭像並清除資料庫記錄。

**業務邏輯**：
- 驗證使用者已登入（JWT Token）
- 驗證 Firebase Storage 配置
- 查找使用者目前的頭像資訊
- 從 Firebase Storage 刪除頭像檔案
- 清除使用者的頭像 URL

 * @summary 刪除使用者頭像
 */
  deleteApiUploadAvatar<TData = AvatarDeleteSuccessResponse>(
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  deleteApiUploadAvatar<TData = AvatarDeleteSuccessResponse>(
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  deleteApiUploadAvatar<TData = AvatarDeleteSuccessResponse>(
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  deleteApiUploadAvatar<TData = AvatarDeleteSuccessResponse>(
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.delete<TData>(`/api/upload/avatar`, options);
  }
}

export type PostApiUploadAvatarClientResult =
  NonNullable<AvatarUploadSuccessResponse>;
export type DeleteApiUploadAvatarClientResult =
  NonNullable<AvatarDeleteSuccessResponse>;
