/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * Talent Match API
 * 全面重構後的 Talent Match 後端 API 文件
 * OpenAPI spec version: 2.0.0
 */
import { HttpClient } from '@angular/common/http';
import type {
  HttpContext,
  HttpEvent,
  HttpHeaders,
  HttpParams,
  HttpResponse as AngularHttpResponse,
} from '@angular/common/http';

import { Injectable, inject } from '@angular/core';

import { Observable } from 'rxjs';

import type {
  DeleteProfileResponse,
  ForgotPasswordResponse,
  GetProfileResponse,
  LoginResponse,
  PostApiAuthForgotPasswordBody,
  PostApiAuthLoginBody,
  PostApiAuthRefreshTokenBody,
  PutApiAuthProfileBody,
  RefreshTokenResponse,
  RegisterRequest,
  RegisterResponse,
  ResetPasswordRequest,
  ResetPasswordResponse,
  UpdateProfileResponse,
} from '../talentMatchAPI.schemas';

interface HttpClientOptions {
  headers?: HttpHeaders | Record<string, string | string[]>;
  context?: HttpContext;
  params?:
    | HttpParams
    | Record<
        string,
        string | number | boolean | ReadonlyArray<string | number | boolean>
      >;
  reportProgress?: boolean;
  withCredentials?: boolean;
  credentials?: RequestCredentials;
  keepalive?: boolean;
  priority?: RequestPriority;
  cache?: RequestCache;
  mode?: RequestMode;
  redirect?: RequestRedirect;
  referrer?: string;
  integrity?: string;
  transferCache?: { includeHeaders?: string[] } | boolean;
  timeout?: number;
}

@Injectable({ providedIn: 'root' })
export class AuthenticationService {
  private readonly http = inject(HttpClient);
  /**
   * 註冊新的使用者帳戶，成功後自動登入並回傳 JWT Token
   * @summary 使用者註冊
   */
  postApiAuthRegister<TData = RegisterResponse>(
    registerRequest: RegisterRequest,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  postApiAuthRegister<TData = RegisterResponse>(
    registerRequest: RegisterRequest,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  postApiAuthRegister<TData = RegisterResponse>(
    registerRequest: RegisterRequest,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  postApiAuthRegister<TData = RegisterResponse>(
    registerRequest: RegisterRequest,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.post<TData>(
      `/api/auth/register`,
      registerRequest,
      options,
    );
  }
  /**
   * 透過 email 和密碼進行使用者登入驗證
   * @summary 使用者登入
   */
  postApiAuthLogin<TData = LoginResponse>(
    postApiAuthLoginBody: PostApiAuthLoginBody,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  postApiAuthLogin<TData = LoginResponse>(
    postApiAuthLoginBody: PostApiAuthLoginBody,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  postApiAuthLogin<TData = LoginResponse>(
    postApiAuthLoginBody: PostApiAuthLoginBody,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  postApiAuthLogin<TData = LoginResponse>(
    postApiAuthLoginBody: PostApiAuthLoginBody,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.post<TData>(
      `/api/auth/login`,
      postApiAuthLoginBody,
      options,
    );
  }
  /**
   * 使用有效的 refresh token 來取得新的 access token 和 refresh token
   * @summary 刷新 Access Token
   */
  postApiAuthRefreshToken<TData = RefreshTokenResponse>(
    postApiAuthRefreshTokenBody: PostApiAuthRefreshTokenBody,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  postApiAuthRefreshToken<TData = RefreshTokenResponse>(
    postApiAuthRefreshTokenBody: PostApiAuthRefreshTokenBody,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  postApiAuthRefreshToken<TData = RefreshTokenResponse>(
    postApiAuthRefreshTokenBody: PostApiAuthRefreshTokenBody,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  postApiAuthRefreshToken<TData = RefreshTokenResponse>(
    postApiAuthRefreshTokenBody: PostApiAuthRefreshTokenBody,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.post<TData>(
      `/api/auth/refresh-token`,
      postApiAuthRefreshTokenBody,
      options,
    );
  }
  /**
 * 發送重設密碼郵件給使用者。
基於安全考量，無論電子郵件是否存在於系統中，都會回傳相同的成功訊息。
這可以防止惡意使用者探測系統中存在的電子郵件地址。

**業務邏輯**：
- 驗證電子郵件格式
- 若使用者存在且帳號啟用，生成重設令牌並發送郵件
- 若使用者不存在或帳號被停用，不進行任何操作但回傳相同訊息

**安全特性**：
- 防止電子郵件枚舉攻擊
- 重設令牌具有時效性（1小時）
- 重設令牌為加密隨機字串，難以猜測

 * @summary 忘記密碼
 */
  postApiAuthForgotPassword<TData = ForgotPasswordResponse>(
    postApiAuthForgotPasswordBody: PostApiAuthForgotPasswordBody,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  postApiAuthForgotPassword<TData = ForgotPasswordResponse>(
    postApiAuthForgotPasswordBody: PostApiAuthForgotPasswordBody,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  postApiAuthForgotPassword<TData = ForgotPasswordResponse>(
    postApiAuthForgotPasswordBody: PostApiAuthForgotPasswordBody,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  postApiAuthForgotPassword<TData = ForgotPasswordResponse>(
    postApiAuthForgotPasswordBody: PostApiAuthForgotPasswordBody,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.post<TData>(
      `/api/auth/forgot-password`,
      postApiAuthForgotPasswordBody,
      options,
    );
  }
  /**
 * 使用有效的重設令牌來重設使用者密碼

**重要安全特性：**
- 驗證重設令牌的有效性和過期時間
- 檢查帳號狀態（停用帳號無法重設密碼）
- 密碼加密儲存
- 成功重設後清除重設令牌
- 一次性令牌（使用後失效）

**業務規則：**
- 令牌有效期為 1 小時
- 令牌只能使用一次
- 新密碼須符合安全要求
- 已停用帳號無法重設密碼

 * @summary 重設密碼
 */
  postApiAuthResetPassword<TData = ResetPasswordResponse>(
    resetPasswordRequest: ResetPasswordRequest,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  postApiAuthResetPassword<TData = ResetPasswordResponse>(
    resetPasswordRequest: ResetPasswordRequest,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  postApiAuthResetPassword<TData = ResetPasswordResponse>(
    resetPasswordRequest: ResetPasswordRequest,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  postApiAuthResetPassword<TData = ResetPasswordResponse>(
    resetPasswordRequest: ResetPasswordRequest,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.post<TData>(
      `/api/auth/reset-password`,
      resetPasswordRequest,
      options,
    );
  }
  /**
   * @summary 取得個人資料
   */
  getApiAuthProfile<TData = GetProfileResponse>(
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  getApiAuthProfile<TData = GetProfileResponse>(
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  getApiAuthProfile<TData = GetProfileResponse>(
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  getApiAuthProfile<TData = GetProfileResponse>(
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.get<TData>(`/api/auth/profile`, options);
  }
  /**
   * @summary 更新個人資料
   */
  putApiAuthProfile<TData = UpdateProfileResponse>(
    putApiAuthProfileBody: PutApiAuthProfileBody,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  putApiAuthProfile<TData = UpdateProfileResponse>(
    putApiAuthProfileBody: PutApiAuthProfileBody,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  putApiAuthProfile<TData = UpdateProfileResponse>(
    putApiAuthProfileBody: PutApiAuthProfileBody,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  putApiAuthProfile<TData = UpdateProfileResponse>(
    putApiAuthProfileBody: PutApiAuthProfileBody,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.put<TData>(
      `/api/auth/profile`,
      putApiAuthProfileBody,
      options,
    );
  }
  /**
 * 執行軟刪除使用者帳號，保留資料完整性以供稽核。

**功能特性**：
- 使用 TypeORM 軟刪除機制
- 設定 deleted_at 時間戳記
- 刪除後使用者無法登入
- 暱稱和email釋放供新用戶使用
- 保持歷史資料完整性

 * @summary 刪除個人帳號
 */
  deleteApiAuthProfile<TData = DeleteProfileResponse>(
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  deleteApiAuthProfile<TData = DeleteProfileResponse>(
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  deleteApiAuthProfile<TData = DeleteProfileResponse>(
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  deleteApiAuthProfile<TData = DeleteProfileResponse>(
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.delete<TData>(`/api/auth/profile`, options);
  }
}

export type PostApiAuthRegisterClientResult = NonNullable<RegisterResponse>;
export type PostApiAuthLoginClientResult = NonNullable<LoginResponse>;
export type PostApiAuthRefreshTokenClientResult =
  NonNullable<RefreshTokenResponse>;
export type PostApiAuthForgotPasswordClientResult =
  NonNullable<ForgotPasswordResponse>;
export type PostApiAuthResetPasswordClientResult =
  NonNullable<ResetPasswordResponse>;
export type GetApiAuthProfileClientResult = NonNullable<GetProfileResponse>;
export type PutApiAuthProfileClientResult = NonNullable<UpdateProfileResponse>;
export type DeleteApiAuthProfileClientResult =
  NonNullable<DeleteProfileResponse>;
