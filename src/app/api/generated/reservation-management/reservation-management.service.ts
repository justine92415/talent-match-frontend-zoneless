/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * Talent Match API
 * 全面重構後的 Talent Match 後端 API 文件

🆕 v2.1 新功能：整合式課程建立 API，支援同時上傳圖片和設定價格方案
 * OpenAPI spec version: 2.1.0
 */
import { HttpClient } from '@angular/common/http';
import type {
  HttpContext,
  HttpEvent,
  HttpHeaders,
  HttpParams,
  HttpResponse as AngularHttpResponse,
} from '@angular/common/http';

import { Injectable, inject } from '@angular/core';

// import type { DeepNonNullable } from '@orval/core/src/utils/deep-non-nullable';

// 使用 TypeScript 內建的 NonNullable 型別
type DeepNonNullable<T> = T extends (...args: any[]) => any
  ? T
  : T extends any[]
  ? _DeepNonNullableArray<T[number]>
  : T extends object
  ? _DeepNonNullableObject<T>
  : NonNullable<T>;

type _DeepNonNullableArray<T> = Array<DeepNonNullable<NonNullable<T>>>;

type _DeepNonNullableObject<T> = {
  [P in keyof T]-?: DeepNonNullable<NonNullable<T[P]>>;
};

import { Observable } from 'rxjs';

import type {
  CancelReservationSuccessResponse,
  ConfirmReservationSuccessResponse,
  CreateReservationRequest,
  CreateReservationSuccessResponse,
  GetApiReservationsParams,
  RejectReservationRequest,
  RejectReservationSuccessResponse,
  ReservationListSuccessResponse,
} from '../talentMatchAPI.schemas';

interface HttpClientOptions {
  headers?: HttpHeaders | Record<string, string | string[]>;
  context?: HttpContext;
  params?:
    | HttpParams
    | Record<
        string,
        string | number | boolean | ReadonlyArray<string | number | boolean>
      >;
  reportProgress?: boolean;
  withCredentials?: boolean;
  credentials?: RequestCredentials;
  keepalive?: boolean;
  priority?: RequestPriority;
  cache?: RequestCache;
  mode?: RequestMode;
  redirect?: RequestRedirect;
  referrer?: string;
  integrity?: string;
  transferCache?: { includeHeaders?: string[] } | boolean;
  timeout?: number;
}

@Injectable({ providedIn: 'root' })
export class ReservationManagementService {
  private readonly http = inject(HttpClient);
  /**
 * 學生建立課程預約，系統會驗證學生購買記錄、教師可預約時段、時間衝突等條件。

**業務邏輯**：
- 驗證學生身份認證
- 驗證學生是否有該課程的購買記錄和剩餘堂數
- 驗證教師在指定日期時間是否有可預約時段
- 檢查時間衝突（教師該時段是否已被預約）
- 建立預約記錄並扣除一堂課
- 同時設定教師和學生狀態為 "reserved"
- 回傳預約詳情和剩餘堂數資訊

 * @summary 建立預約
 */
  postApiReservations<TData = CreateReservationSuccessResponse>(
    createReservationRequest: CreateReservationRequest,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  postApiReservations<TData = CreateReservationSuccessResponse>(
    createReservationRequest: CreateReservationRequest,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  postApiReservations<TData = CreateReservationSuccessResponse>(
    createReservationRequest: CreateReservationRequest,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  postApiReservations<TData = CreateReservationSuccessResponse>(
    createReservationRequest: CreateReservationRequest,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.post<TData>(
      `/api/reservations`,
      createReservationRequest,
      options,
    );
  }
  /**
 * 根據使用者角色查詢預約記錄，支援多種篩選條件。

**業務邏輯**：
- 學生（role=student）：查詢自己的預約記錄
- 教師（role=teacher）：查詢自己收到的預約記錄
- 支援依課程 ID 篩選（course_id）
- 支援分頁查詢（page, per_page）
- 支援狀態篩選（status）
- 支援日期範圍篩選（date_from, date_to）
- 回傳預約列表和分頁資訊

 * @summary 查詢預約列表
 */
  getApiReservations<TData = ReservationListSuccessResponse>(
    params: DeepNonNullable<GetApiReservationsParams>,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  getApiReservations<TData = ReservationListSuccessResponse>(
    params: DeepNonNullable<GetApiReservationsParams>,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  getApiReservations<TData = ReservationListSuccessResponse>(
    params: DeepNonNullable<GetApiReservationsParams>,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  getApiReservations<TData = ReservationListSuccessResponse>(
    params: DeepNonNullable<GetApiReservationsParams>,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.get<TData>(`/api/reservations`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  }
  /**
 * 學生或教師取消預約，系統會自動退還課程堂數並更新預約狀態。

**業務邏輯**：
- 驗證使用者身份認證和權限
- 檢查預約是否存在且屬於該使用者
- 驗證取消條件（時間限制等）
- 將教師和學生狀態都更新為 "cancelled"
- 退還一堂課程堂數給學生
- 回傳取消後的預約資訊和退還堂數

 * @summary 取消預約
 */
  deleteApiReservationsId<TData = CancelReservationSuccessResponse>(
    id: number,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  deleteApiReservationsId<TData = CancelReservationSuccessResponse>(
    id: number,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  deleteApiReservationsId<TData = CancelReservationSuccessResponse>(
    id: number,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  deleteApiReservationsId<TData = CancelReservationSuccessResponse>(
    id: number,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.delete<TData>(`/api/reservations/${id}`, options);
  }
  /**
 * 教師確認學生的預約請求，將預約狀態從等待確認改為已確認。

**業務邏輯**：
- 驗證教師身份認證和權限（只有預約的教師可以確認）
- 檢查預約狀態是否為 PENDING（等待確認）
- 檢查是否超過教師回應期限
- 更新預約狀態為 RESERVED（已確認）
- 扣除學生的課程堂數
- 清除回應期限

 * @summary 教師確認預約
 */
  postApiReservationsIdConfirm<TData = ConfirmReservationSuccessResponse>(
    id: number,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  postApiReservationsIdConfirm<TData = ConfirmReservationSuccessResponse>(
    id: number,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  postApiReservationsIdConfirm<TData = ConfirmReservationSuccessResponse>(
    id: number,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  postApiReservationsIdConfirm<TData = ConfirmReservationSuccessResponse>(
    id: number,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.post<TData>(
      `/api/reservations/${id}/confirm`,
      undefined,
      options,
    );
  }
  /**
 * 教師拒絕學生的預約請求，將預約狀態改為已取消。

**業務邏輯**：
- 驗證教師身份認證和權限（只有預約的教師可以拒絕）
- 檢查預約狀態是否為 PENDING（等待確認）
- 更新預約雙方狀態為 CANCELLED（已取消）
- 不扣除學生課程堂數（因為確認時才會扣除）
- 清除回應期限
- 可選擇性提供拒絕原因

 * @summary 教師拒絕預約
 */
  postApiReservationsIdReject<TData = RejectReservationSuccessResponse>(
    id: number,
    rejectReservationRequest?: RejectReservationRequest,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  postApiReservationsIdReject<TData = RejectReservationSuccessResponse>(
    id: number,
    rejectReservationRequest?: RejectReservationRequest,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  postApiReservationsIdReject<TData = RejectReservationSuccessResponse>(
    id: number,
    rejectReservationRequest?: RejectReservationRequest,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  postApiReservationsIdReject<TData = RejectReservationSuccessResponse>(
    id: number,
    rejectReservationRequest?: RejectReservationRequest,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.post<TData>(
      `/api/reservations/${id}/reject`,
      rejectReservationRequest,
      options,
    );
  }
}

export type PostApiReservationsClientResult =
  NonNullable<CreateReservationSuccessResponse>;
export type GetApiReservationsClientResult =
  NonNullable<ReservationListSuccessResponse>;
export type DeleteApiReservationsIdClientResult =
  NonNullable<CancelReservationSuccessResponse>;
export type PostApiReservationsIdConfirmClientResult =
  NonNullable<ConfirmReservationSuccessResponse>;
export type PostApiReservationsIdRejectClientResult =
  NonNullable<RejectReservationSuccessResponse>;
