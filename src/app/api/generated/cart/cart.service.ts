/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * Talent Match API
 * 全面重構後的 Talent Match 後端 API 文件

🆕 v2.1 新功能：整合式課程建立 API，支援同時上傳圖片和設定價格方案
 * OpenAPI spec version: 2.1.0
 */
import { HttpClient } from '@angular/common/http';
import type {
  HttpContext,
  HttpEvent,
  HttpHeaders,
  HttpParams,
  HttpResponse as AngularHttpResponse,
} from '@angular/common/http';

import { Injectable, inject } from '@angular/core';

import { Observable } from 'rxjs';

import type {
  AddCartItemRequest,
  AddCartItemSuccessResponse,
  ClearCartSuccessResponse,
  GetCartSuccessResponse,
  RemoveCartItemSuccessResponse,
  UpdateCartItemRequest,
  UpdateCartItemSuccessResponse,
} from '../talentMatchAPI.schemas';

interface HttpClientOptions {
  headers?: HttpHeaders | Record<string, string | string[]>;
  context?: HttpContext;
  params?:
    | HttpParams
    | Record<
        string,
        string | number | boolean | ReadonlyArray<string | number | boolean>
      >;
  reportProgress?: boolean;
  withCredentials?: boolean;
  credentials?: RequestCredentials;
  keepalive?: boolean;
  priority?: RequestPriority;
  cache?: RequestCache;
  mode?: RequestMode;
  redirect?: RequestRedirect;
  referrer?: string;
  integrity?: string;
  transferCache?: { includeHeaders?: string[] } | boolean;
  timeout?: number;
}

@Injectable({ providedIn: 'root' })
export class CartService {
  private readonly http = inject(HttpClient);
  /**
 * 將課程及其價格方案加入購物車。

**業務邏輯**：
- 驗證課程存在且已發布
- 驗證價格方案存在且屬於該課程
- 檢查使用者不是該課程的教師
- 如果購物車中已有相同的課程+價格方案組合，則增加數量
- 否則新增購物車項目

 * @summary 加入商品到購物車
 */
  postApiCartItems<
    TData = UpdateCartItemSuccessResponse | AddCartItemSuccessResponse,
  >(
    addCartItemRequest: AddCartItemRequest,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  postApiCartItems<
    TData = UpdateCartItemSuccessResponse | AddCartItemSuccessResponse,
  >(
    addCartItemRequest: AddCartItemRequest,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  postApiCartItems<
    TData = UpdateCartItemSuccessResponse | AddCartItemSuccessResponse,
  >(
    addCartItemRequest: AddCartItemRequest,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  postApiCartItems<
    TData = UpdateCartItemSuccessResponse | AddCartItemSuccessResponse,
  >(
    addCartItemRequest: AddCartItemRequest,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.post<TData>(
      `/api/cart/items`,
      addCartItemRequest,
      options,
    );
  }
  /**
 * 取得目前使用者的購物車內容，包含所有項目詳細資料和摘要統計。

**業務邏輯**：
- 查詢使用者的所有購物車項目
- 載入每個項目的課程和價格方案詳細資料
- 檢查項目有效性（課程是否存在且已發布、價格方案是否存在）
- 計算購物車摘要統計（總數量、總金額、有效/無效項目數）
- 僅有效項目計入總金額

 * @summary 取得購物車內容
 */
  getApiCart<TData = GetCartSuccessResponse>(
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  getApiCart<TData = GetCartSuccessResponse>(
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  getApiCart<TData = GetCartSuccessResponse>(
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  getApiCart<TData = GetCartSuccessResponse>(
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.get<TData>(`/api/cart`, options);
  }
  /**
 * 清空目前使用者的整個購物車，移除所有項目。

**業務邏輯**：
- 刪除使用者購物車中的所有項目
- 此操作無法復原

 * @summary 清空購物車
 */
  deleteApiCart<TData = ClearCartSuccessResponse>(
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  deleteApiCart<TData = ClearCartSuccessResponse>(
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  deleteApiCart<TData = ClearCartSuccessResponse>(
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  deleteApiCart<TData = ClearCartSuccessResponse>(
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.delete<TData>(`/api/cart`, options);
  }
  /**
 * 更新購物車中指定項目的數量。

**業務邏輯**：
- 驗證購物車項目存在且屬於該使用者
- 更新項目數量
- 回傳更新後的項目詳細資料

 * @summary 更新購物車項目
 */
  putApiCartItemsItemId<TData = UpdateCartItemSuccessResponse>(
    itemId: number,
    updateCartItemRequest: UpdateCartItemRequest,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  putApiCartItemsItemId<TData = UpdateCartItemSuccessResponse>(
    itemId: number,
    updateCartItemRequest: UpdateCartItemRequest,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  putApiCartItemsItemId<TData = UpdateCartItemSuccessResponse>(
    itemId: number,
    updateCartItemRequest: UpdateCartItemRequest,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  putApiCartItemsItemId<TData = UpdateCartItemSuccessResponse>(
    itemId: number,
    updateCartItemRequest: UpdateCartItemRequest,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.put<TData>(
      `/api/cart/items/${itemId}`,
      updateCartItemRequest,
      options,
    );
  }
  /**
 * 從購物車中移除指定項目。

**業務邏輯**：
- 驗證購物車項目存在且屬於該使用者
- 從購物車中刪除該項目

 * @summary 移除購物車項目
 */
  deleteApiCartItemsItemId<TData = RemoveCartItemSuccessResponse>(
    itemId: number,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  deleteApiCartItemsItemId<TData = RemoveCartItemSuccessResponse>(
    itemId: number,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  deleteApiCartItemsItemId<TData = RemoveCartItemSuccessResponse>(
    itemId: number,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  deleteApiCartItemsItemId<TData = RemoveCartItemSuccessResponse>(
    itemId: number,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.delete<TData>(`/api/cart/items/${itemId}`, options);
  }
}

export type PostApiCartItemsClientResult = NonNullable<
  UpdateCartItemSuccessResponse | AddCartItemSuccessResponse
>;
export type GetApiCartClientResult = NonNullable<GetCartSuccessResponse>;
export type DeleteApiCartClientResult = NonNullable<ClearCartSuccessResponse>;
export type PutApiCartItemsItemIdClientResult =
  NonNullable<UpdateCartItemSuccessResponse>;
export type DeleteApiCartItemsItemIdClientResult =
  NonNullable<RemoveCartItemSuccessResponse>;
