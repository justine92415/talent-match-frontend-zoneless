/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * Talent Match API
 * 全面重構後的 Talent Match 後端 API 文件
 * OpenAPI spec version: 2.0.0
 */
import { HttpClient } from '@angular/common/http';
import type {
  HttpContext,
  HttpEvent,
  HttpHeaders,
  HttpParams,
  HttpResponse as AngularHttpResponse,
} from '@angular/common/http';

import { Injectable, inject } from '@angular/core';

// import type { DeepNonNullable } from '@orval/core/src/utils/deep-non-nullable';

// 使用 TypeScript 內建的 NonNullable 型別
type DeepNonNullable<T> = T extends (...args: any[]) => any
  ? T
  : T extends any[]
  ? _DeepNonNullableArray<T[number]>
  : T extends object
  ? _DeepNonNullableObject<T>
  : NonNullable<T>;

type _DeepNonNullableArray<T> = Array<DeepNonNullable<NonNullable<T>>>;

type _DeepNonNullableObject<T> = {
  [P in keyof T]-?: DeepNonNullable<NonNullable<T[P]>>;
};

import { Observable } from 'rxjs';

import type {
  CreateCourseRequest,
  DeleteApiCoursesCourseIdFilesFileId200,
  DeleteApiCoursesCourseIdVideosVideoId200,
  DeleteApiCoursesId200,
  GetApiCourses200,
  GetApiCoursesId200,
  GetApiCoursesIdFiles200,
  GetApiCoursesIdFilesParams,
  GetApiCoursesIdVideos200,
  GetApiCoursesParams,
  PostApiCourses201,
  PostApiCoursesIdArchive200,
  PostApiCoursesIdArchiveBody,
  PostApiCoursesIdFiles201,
  PostApiCoursesIdFilesBody,
  PostApiCoursesIdPublish200,
  PostApiCoursesIdResubmit200,
  PostApiCoursesIdResubmitBody,
  PostApiCoursesIdSubmit200,
  PostApiCoursesIdSubmitBody,
  PostApiCoursesIdVideos201,
  PostApiCoursesIdVideosBody,
  PutApiCoursesCourseIdVideosOrder200,
  PutApiCoursesCourseIdVideosOrderBody,
  PutApiCoursesId200,
  UpdateCourseRequest,
} from '../talentMatchAPI.schemas';

interface HttpClientOptions {
  headers?: HttpHeaders | Record<string, string | string[]>;
  context?: HttpContext;
  params?:
    | HttpParams
    | Record<
        string,
        string | number | boolean | ReadonlyArray<string | number | boolean>
      >;
  reportProgress?: boolean;
  withCredentials?: boolean;
  credentials?: RequestCredentials;
  keepalive?: boolean;
  priority?: RequestPriority;
  cache?: RequestCache;
  mode?: RequestMode;
  redirect?: RequestRedirect;
  referrer?: string;
  integrity?: string;
  transferCache?: { includeHeaders?: string[] } | boolean;
  timeout?: number;
}

@Injectable({ providedIn: 'root' })
export class CoursesService {
  private readonly http = inject(HttpClient);
  /**
   * 教師建立新的課程，需要提供課程基本資訊
   * @summary 建立新課程
   */
  postApiCourses<TData = PostApiCourses201>(
    createCourseRequest: CreateCourseRequest,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  postApiCourses<TData = PostApiCourses201>(
    createCourseRequest: CreateCourseRequest,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  postApiCourses<TData = PostApiCourses201>(
    createCourseRequest: CreateCourseRequest,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  postApiCourses<TData = PostApiCourses201>(
    createCourseRequest: CreateCourseRequest,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.post<TData>(`/api/courses`, createCourseRequest, options);
  }
  /**
   * 取得當前教師的所有課程列表，支援分頁和排序
   * @summary 取得教師課程列表
   */
  getApiCourses<TData = GetApiCourses200>(
    params?: DeepNonNullable<GetApiCoursesParams>,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  getApiCourses<TData = GetApiCourses200>(
    params?: DeepNonNullable<GetApiCoursesParams>,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  getApiCourses<TData = GetApiCourses200>(
    params?: DeepNonNullable<GetApiCoursesParams>,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  getApiCourses<TData = GetApiCourses200>(
    params?: DeepNonNullable<GetApiCoursesParams>,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.get<TData>(`/api/courses`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  }
  /**
   * 教師更新自己的課程資訊
   * @summary 更新課程資訊
   */
  putApiCoursesId<TData = PutApiCoursesId200>(
    id: number,
    updateCourseRequest: UpdateCourseRequest,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  putApiCoursesId<TData = PutApiCoursesId200>(
    id: number,
    updateCourseRequest: UpdateCourseRequest,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  putApiCoursesId<TData = PutApiCoursesId200>(
    id: number,
    updateCourseRequest: UpdateCourseRequest,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  putApiCoursesId<TData = PutApiCoursesId200>(
    id: number,
    updateCourseRequest: UpdateCourseRequest,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.put<TData>(
      `/api/courses/${id}`,
      updateCourseRequest,
      options,
    );
  }
  /**
   * 取得指定課程的詳細資訊，包含完整的課程內容
   * @summary 取得課程詳情
   */
  getApiCoursesId<TData = GetApiCoursesId200>(
    id: number,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  getApiCoursesId<TData = GetApiCoursesId200>(
    id: number,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  getApiCoursesId<TData = GetApiCoursesId200>(
    id: number,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  getApiCoursesId<TData = GetApiCoursesId200>(
    id: number,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.get<TData>(`/api/courses/${id}`, options);
  }
  /**
   * 教師刪除自己的課程，只能刪除尚未有學生報名的課程
   * @summary 刪除課程
   */
  deleteApiCoursesId<TData = DeleteApiCoursesId200>(
    id: number,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  deleteApiCoursesId<TData = DeleteApiCoursesId200>(
    id: number,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  deleteApiCoursesId<TData = DeleteApiCoursesId200>(
    id: number,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  deleteApiCoursesId<TData = DeleteApiCoursesId200>(
    id: number,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.delete<TData>(`/api/courses/${id}`, options);
  }
  /**
   * 教師將草稿狀態的課程提交審核，課程狀態會從 draft 變更為 under_review
   * @summary 提交課程審核
   */
  postApiCoursesIdSubmit<TData = PostApiCoursesIdSubmit200>(
    id: number,
    postApiCoursesIdSubmitBody?: PostApiCoursesIdSubmitBody,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  postApiCoursesIdSubmit<TData = PostApiCoursesIdSubmit200>(
    id: number,
    postApiCoursesIdSubmitBody?: PostApiCoursesIdSubmitBody,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  postApiCoursesIdSubmit<TData = PostApiCoursesIdSubmit200>(
    id: number,
    postApiCoursesIdSubmitBody?: PostApiCoursesIdSubmitBody,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  postApiCoursesIdSubmit<TData = PostApiCoursesIdSubmit200>(
    id: number,
    postApiCoursesIdSubmitBody?: PostApiCoursesIdSubmitBody,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.post<TData>(
      `/api/courses/${id}/submit`,
      postApiCoursesIdSubmitBody,
      options,
    );
  }
  /**
   * 教師重新提交被退回的課程，課程狀態會從 draft 變更為 under_review
   * @summary 重新提交課程審核
   */
  postApiCoursesIdResubmit<TData = PostApiCoursesIdResubmit200>(
    id: number,
    postApiCoursesIdResubmitBody?: PostApiCoursesIdResubmitBody,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  postApiCoursesIdResubmit<TData = PostApiCoursesIdResubmit200>(
    id: number,
    postApiCoursesIdResubmitBody?: PostApiCoursesIdResubmitBody,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  postApiCoursesIdResubmit<TData = PostApiCoursesIdResubmit200>(
    id: number,
    postApiCoursesIdResubmitBody?: PostApiCoursesIdResubmitBody,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  postApiCoursesIdResubmit<TData = PostApiCoursesIdResubmit200>(
    id: number,
    postApiCoursesIdResubmitBody?: PostApiCoursesIdResubmitBody,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.post<TData>(
      `/api/courses/${id}/resubmit`,
      postApiCoursesIdResubmitBody,
      options,
    );
  }
  /**
   * 管理員或系統將已審核通過的課程發布上線，課程狀態會從 under_review 變更為 published
   * @summary 發布課程
   */
  postApiCoursesIdPublish<TData = PostApiCoursesIdPublish200>(
    id: number,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  postApiCoursesIdPublish<TData = PostApiCoursesIdPublish200>(
    id: number,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  postApiCoursesIdPublish<TData = PostApiCoursesIdPublish200>(
    id: number,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  postApiCoursesIdPublish<TData = PostApiCoursesIdPublish200>(
    id: number,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.post<TData>(
      `/api/courses/${id}/publish`,
      undefined,
      options,
    );
  }
  /**
   * 教師將已發布的課程封存下架，課程狀態會從 published 變更為 archived
   * @summary 封存課程
   */
  postApiCoursesIdArchive<TData = PostApiCoursesIdArchive200>(
    id: number,
    postApiCoursesIdArchiveBody?: PostApiCoursesIdArchiveBody,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  postApiCoursesIdArchive<TData = PostApiCoursesIdArchive200>(
    id: number,
    postApiCoursesIdArchiveBody?: PostApiCoursesIdArchiveBody,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  postApiCoursesIdArchive<TData = PostApiCoursesIdArchive200>(
    id: number,
    postApiCoursesIdArchiveBody?: PostApiCoursesIdArchiveBody,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  postApiCoursesIdArchive<TData = PostApiCoursesIdArchive200>(
    id: number,
    postApiCoursesIdArchiveBody?: PostApiCoursesIdArchiveBody,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.post<TData>(
      `/api/courses/${id}/archive`,
      postApiCoursesIdArchiveBody,
      options,
    );
  }
  /**
   * 教師將多個影片連結到課程，設定顯示順序和預覽標示
   * @summary 連結影片到課程
   */
  postApiCoursesIdVideos<TData = PostApiCoursesIdVideos201>(
    id: number,
    postApiCoursesIdVideosBody: PostApiCoursesIdVideosBody,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  postApiCoursesIdVideos<TData = PostApiCoursesIdVideos201>(
    id: number,
    postApiCoursesIdVideosBody: PostApiCoursesIdVideosBody,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  postApiCoursesIdVideos<TData = PostApiCoursesIdVideos201>(
    id: number,
    postApiCoursesIdVideosBody: PostApiCoursesIdVideosBody,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  postApiCoursesIdVideos<TData = PostApiCoursesIdVideos201>(
    id: number,
    postApiCoursesIdVideosBody: PostApiCoursesIdVideosBody,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.post<TData>(
      `/api/courses/${id}/videos`,
      postApiCoursesIdVideosBody,
      options,
    );
  }
  /**
   * 取得指定課程的所有影片，按照顯示順序排列
   * @summary 取得課程影片列表
   */
  getApiCoursesIdVideos<TData = GetApiCoursesIdVideos200>(
    id: number,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  getApiCoursesIdVideos<TData = GetApiCoursesIdVideos200>(
    id: number,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  getApiCoursesIdVideos<TData = GetApiCoursesIdVideos200>(
    id: number,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  getApiCoursesIdVideos<TData = GetApiCoursesIdVideos200>(
    id: number,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.get<TData>(`/api/courses/${id}/videos`, options);
  }
  /**
   * 教師更新課程中影片的顯示順序
   * @summary 更新課程影片順序
   */
  putApiCoursesCourseIdVideosOrder<TData = PutApiCoursesCourseIdVideosOrder200>(
    courseId: number,
    putApiCoursesCourseIdVideosOrderBody: PutApiCoursesCourseIdVideosOrderBody,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  putApiCoursesCourseIdVideosOrder<TData = PutApiCoursesCourseIdVideosOrder200>(
    courseId: number,
    putApiCoursesCourseIdVideosOrderBody: PutApiCoursesCourseIdVideosOrderBody,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  putApiCoursesCourseIdVideosOrder<TData = PutApiCoursesCourseIdVideosOrder200>(
    courseId: number,
    putApiCoursesCourseIdVideosOrderBody: PutApiCoursesCourseIdVideosOrderBody,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  putApiCoursesCourseIdVideosOrder<TData = PutApiCoursesCourseIdVideosOrder200>(
    courseId: number,
    putApiCoursesCourseIdVideosOrderBody: PutApiCoursesCourseIdVideosOrderBody,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.put<TData>(
      `/api/courses/${courseId}/videos/order`,
      putApiCoursesCourseIdVideosOrderBody,
      options,
    );
  }
  /**
   * 教師移除課程中的特定影片
   * @summary 移除課程影片關聯
   */
  deleteApiCoursesCourseIdVideosVideoId<
    TData = DeleteApiCoursesCourseIdVideosVideoId200,
  >(
    courseId: number,
    videoId: number,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  deleteApiCoursesCourseIdVideosVideoId<
    TData = DeleteApiCoursesCourseIdVideosVideoId200,
  >(
    courseId: number,
    videoId: number,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  deleteApiCoursesCourseIdVideosVideoId<
    TData = DeleteApiCoursesCourseIdVideosVideoId200,
  >(
    courseId: number,
    videoId: number,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  deleteApiCoursesCourseIdVideosVideoId<
    TData = DeleteApiCoursesCourseIdVideosVideoId200,
  >(
    courseId: number,
    videoId: number,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.delete<TData>(
      `/api/courses/${courseId}/videos/${videoId}`,
      options,
    );
  }
  /**
   * 取得指定課程的檔案列表，支援分頁查詢。只能查看自己課程的檔案。
   * @summary 取得課程檔案列表
   */
  getApiCoursesIdFiles<TData = GetApiCoursesIdFiles200>(
    id: number,
    params?: DeepNonNullable<GetApiCoursesIdFilesParams>,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  getApiCoursesIdFiles<TData = GetApiCoursesIdFiles200>(
    id: number,
    params?: DeepNonNullable<GetApiCoursesIdFilesParams>,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  getApiCoursesIdFiles<TData = GetApiCoursesIdFiles200>(
    id: number,
    params?: DeepNonNullable<GetApiCoursesIdFilesParams>,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  getApiCoursesIdFiles<TData = GetApiCoursesIdFiles200>(
    id: number,
    params?: DeepNonNullable<GetApiCoursesIdFilesParams>,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.get<TData>(`/api/courses/${id}/files`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  }
  /**
   * 上傳檔案到指定課程。支援多檔案上傳，檔案格式和大小限制請參考文件。
   * @summary 上傳課程檔案
   */
  postApiCoursesIdFiles<TData = PostApiCoursesIdFiles201>(
    id: number,
    postApiCoursesIdFilesBody: PostApiCoursesIdFilesBody,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  postApiCoursesIdFiles<TData = PostApiCoursesIdFiles201>(
    id: number,
    postApiCoursesIdFilesBody: PostApiCoursesIdFilesBody,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  postApiCoursesIdFiles<TData = PostApiCoursesIdFiles201>(
    id: number,
    postApiCoursesIdFilesBody: PostApiCoursesIdFilesBody,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  postApiCoursesIdFiles<TData = PostApiCoursesIdFiles201>(
    id: number,
    postApiCoursesIdFilesBody: PostApiCoursesIdFilesBody,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    const formData = new FormData();
    if (postApiCoursesIdFilesBody.files !== undefined) {
      postApiCoursesIdFilesBody.files.forEach((value) =>
        formData.append(`files`, value),
      );
    }
    if (postApiCoursesIdFilesBody.descriptions !== undefined) {
      postApiCoursesIdFilesBody.descriptions.forEach((value) =>
        formData.append(`descriptions`, value),
      );
    }

    return this.http.post<TData>(`/api/courses/${id}/files`, formData, options);
  }
  /**
   * 刪除指定課程的指定檔案。只能刪除自己課程的檔案。
   * @summary 刪除課程檔案
   */
  deleteApiCoursesCourseIdFilesFileId<
    TData = DeleteApiCoursesCourseIdFilesFileId200,
  >(
    courseId: number,
    fileId: number,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  deleteApiCoursesCourseIdFilesFileId<
    TData = DeleteApiCoursesCourseIdFilesFileId200,
  >(
    courseId: number,
    fileId: number,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  deleteApiCoursesCourseIdFilesFileId<
    TData = DeleteApiCoursesCourseIdFilesFileId200,
  >(
    courseId: number,
    fileId: number,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  deleteApiCoursesCourseIdFilesFileId<
    TData = DeleteApiCoursesCourseIdFilesFileId200,
  >(
    courseId: number,
    fileId: number,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.delete<TData>(
      `/api/courses/${courseId}/files/${fileId}`,
      options,
    );
  }
}

export type PostApiCoursesClientResult = NonNullable<PostApiCourses201>;
export type GetApiCoursesClientResult = NonNullable<GetApiCourses200>;
export type PutApiCoursesIdClientResult = NonNullable<PutApiCoursesId200>;
export type GetApiCoursesIdClientResult = NonNullable<GetApiCoursesId200>;
export type DeleteApiCoursesIdClientResult = NonNullable<DeleteApiCoursesId200>;
export type PostApiCoursesIdSubmitClientResult =
  NonNullable<PostApiCoursesIdSubmit200>;
export type PostApiCoursesIdResubmitClientResult =
  NonNullable<PostApiCoursesIdResubmit200>;
export type PostApiCoursesIdPublishClientResult =
  NonNullable<PostApiCoursesIdPublish200>;
export type PostApiCoursesIdArchiveClientResult =
  NonNullable<PostApiCoursesIdArchive200>;
export type PostApiCoursesIdVideosClientResult =
  NonNullable<PostApiCoursesIdVideos201>;
export type GetApiCoursesIdVideosClientResult =
  NonNullable<GetApiCoursesIdVideos200>;
export type PutApiCoursesCourseIdVideosOrderClientResult =
  NonNullable<PutApiCoursesCourseIdVideosOrder200>;
export type DeleteApiCoursesCourseIdVideosVideoIdClientResult =
  NonNullable<DeleteApiCoursesCourseIdVideosVideoId200>;
export type GetApiCoursesIdFilesClientResult =
  NonNullable<GetApiCoursesIdFiles200>;
export type PostApiCoursesIdFilesClientResult =
  NonNullable<PostApiCoursesIdFiles201>;
export type DeleteApiCoursesCourseIdFilesFileIdClientResult =
  NonNullable<DeleteApiCoursesCourseIdFilesFileId200>;
