/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * Talent Match API
 * 全面重構後的 Talent Match 後端 API 文件

🆕 v2.1 新功能：整合式課程建立 API，支援同時上傳圖片和設定價格方案
 * OpenAPI spec version: 2.1.0
 */
import { HttpClient } from '@angular/common/http';
import type {
  HttpContext,
  HttpEvent,
  HttpHeaders,
  HttpParams,
  HttpResponse as AngularHttpResponse,
} from '@angular/common/http';

import { Injectable, inject } from '@angular/core';

// import type { DeepNonNullable } from '@orval/core/src/utils/deep-non-nullable';

// 使用 TypeScript 內建的 NonNullable 型別
type DeepNonNullable<T> = T extends (...args: any[]) => any
  ? T
  : T extends any[]
  ? _DeepNonNullableArray<T[number]>
  : T extends object
  ? _DeepNonNullableObject<T>
  : NonNullable<T>;

type _DeepNonNullableArray<T> = Array<DeepNonNullable<NonNullable<T>>>;

type _DeepNonNullableObject<T> = {
  [P in keyof T]-?: DeepNonNullable<NonNullable<T[P]>>;
};

import { Observable } from 'rxjs';

import type {
  CreateCourseSuccessResponse,
  DeleteCourseSuccessResponse,
  GetApiCoursesParams,
  GetCourseForEditSuccessResponse,
  GetCourseListSuccessResponse,
  GetCourseSuccessResponse,
  PostApiCoursesBody,
  UpdateCourseRequest,
  UpdateCourseSuccessResponse,
} from '../talentMatchAPI.schemas';

interface HttpClientOptions {
  headers?: HttpHeaders | Record<string, string | string[]>;
  context?: HttpContext;
  params?:
    | HttpParams
    | Record<
        string,
        string | number | boolean | ReadonlyArray<string | number | boolean>
      >;
  reportProgress?: boolean;
  withCredentials?: boolean;
  credentials?: RequestCredentials;
  keepalive?: boolean;
  priority?: RequestPriority;
  cache?: RequestCache;
  mode?: RequestMode;
  redirect?: RequestRedirect;
  referrer?: string;
  integrity?: string;
  transferCache?: { includeHeaders?: string[] } | boolean;
  timeout?: number;
}

@Injectable({ providedIn: 'root' })
export class CourseManagementService {
  private readonly http = inject(HttpClient);
  /**
 * 建立新的課程，需要教師身份認證。支援同時上傳課程圖片、設定課程資訊和價格方案。

**業務邏輯**：
- 驗證使用者具有教師權限且審核通過
- 處理 multipart/form-data 格式請求 (courseData JSON + priceOptions JSON + courseImage 檔案)
- 驗證課程資料、價格方案和圖片檔案 (可選)
- 上傳課程圖片到 Firebase Storage (如有提供)
- 在資料庫交易中建立課程和所有價格方案
- 自動生成課程 UUID 和設定預設值
- 建立課程記錄，狀態為草稿 (draft)
- 回傳建立的課程完整資訊

**表單欄位**：
- courseData: JSON 字串，包含課程基本資訊
- priceOptions: JSON 陣列字串，包含價格方案列表
- courseImage: 圖片檔案 (可選，支援 JPEG/PNG/WebP，最大 10MB)

 * @summary 建立新課程 (支援圖片上傳)
 */
  postApiCourses<TData = CreateCourseSuccessResponse>(
    postApiCoursesBody: PostApiCoursesBody,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  postApiCourses<TData = CreateCourseSuccessResponse>(
    postApiCoursesBody: PostApiCoursesBody,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  postApiCourses<TData = CreateCourseSuccessResponse>(
    postApiCoursesBody: PostApiCoursesBody,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  postApiCourses<TData = CreateCourseSuccessResponse>(
    postApiCoursesBody: PostApiCoursesBody,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    const formData = new FormData();
    formData.append(`courseData`, postApiCoursesBody.courseData);
    formData.append(`priceOptions`, postApiCoursesBody.priceOptions);
    if (postApiCoursesBody.courseImage !== undefined) {
      formData.append(`courseImage`, postApiCoursesBody.courseImage);
    }

    return this.http.post<TData>(`/api/courses`, formData, options);
  }
  /**
 * 取得目前登入教師的所有課程列表，支援分頁查詢。需要教師身份認證。

**業務邏輯**：
- 驗證使用者具有教師權限
- 查詢該教師的所有課程 (所有狀態：草稿、審核中、已發布、已封存)
- 依建立時間降序排列 (最新的在前)
- 支援分頁查詢，預設每頁 20 筆
- 回傳課程列表和分頁資訊

 * @summary 取得教師課程列表
 */
  getApiCourses<TData = GetCourseListSuccessResponse>(
    params?: DeepNonNullable<GetApiCoursesParams>,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  getApiCourses<TData = GetCourseListSuccessResponse>(
    params?: DeepNonNullable<GetApiCoursesParams>,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  getApiCourses<TData = GetCourseListSuccessResponse>(
    params?: DeepNonNullable<GetApiCoursesParams>,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  getApiCourses<TData = GetCourseListSuccessResponse>(
    params?: DeepNonNullable<GetApiCoursesParams>,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.get<TData>(`/api/courses`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  }
  /**
 * 更新指定的課程資訊，需要教師身份認證。只能更新自己的課程。

**業務邏輯**：
- 驗證使用者具有教師權限
- 驗證課程存在且為使用者所擁有
- 驗證請求參數 (所有參數皆為選填)
- 更新課程資料並回傳完整課程資訊
- 自動更新 updated_at 時間戳

 * @summary 更新課程資訊
 */
  putApiCoursesId<TData = UpdateCourseSuccessResponse>(
    id: number,
    updateCourseRequest: UpdateCourseRequest,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  putApiCoursesId<TData = UpdateCourseSuccessResponse>(
    id: number,
    updateCourseRequest: UpdateCourseRequest,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  putApiCoursesId<TData = UpdateCourseSuccessResponse>(
    id: number,
    updateCourseRequest: UpdateCourseRequest,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  putApiCoursesId<TData = UpdateCourseSuccessResponse>(
    id: number,
    updateCourseRequest: UpdateCourseRequest,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.put<TData>(
      `/api/courses/${id}`,
      updateCourseRequest,
      options,
    );
  }
  /**
 * 取得指定課程的詳細資訊。根據使用者身份和課程狀態決定存取權限。

**存取權限規則**：
- 未登入：只能查看已發布 (published) 的課程
- 課程擁有者：可以查看自己的所有課程 (包含草稿、審核中等)
- 其他教師：只能查看已發布的課程
- 一般使用者：只能查看已發布的課程

**業務邏輯**：
- 查詢指定 ID 的課程
- 檢查課程是否存在
- 根據使用者身份驗證存取權限
- 回傳完整的課程資訊

 * @summary 取得課程詳細資訊
 */
  getApiCoursesId<TData = GetCourseSuccessResponse>(
    id: number,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  getApiCoursesId<TData = GetCourseSuccessResponse>(
    id: number,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  getApiCoursesId<TData = GetCourseSuccessResponse>(
    id: number,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  getApiCoursesId<TData = GetCourseSuccessResponse>(
    id: number,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.get<TData>(`/api/courses/${id}`, options);
  }
  /**
 * 刪除指定的課程，需要教師身份認證。只能刪除自己的課程且有狀態限制。

**業務邏輯**：
- 驗證使用者具有教師權限
- 驗證課程存在且為使用者所擁有
- 檢查課程狀態：已發布的課程不能直接刪除
- 只能刪除草稿、審核中、已拒絕或已封存的課程
- 執行硬刪除操作 (從資料庫移除)

**注意事項**：
- 已發布的課程請先封存後再刪除
- 刪除操作無法復原，請謹慎使用

 * @summary 刪除課程
 */
  deleteApiCoursesId<TData = DeleteCourseSuccessResponse>(
    id: number,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  deleteApiCoursesId<TData = DeleteCourseSuccessResponse>(
    id: number,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  deleteApiCoursesId<TData = DeleteCourseSuccessResponse>(
    id: number,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  deleteApiCoursesId<TData = DeleteCourseSuccessResponse>(
    id: number,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.delete<TData>(`/api/courses/${id}`, options);
  }
  /**
 * 取得課程的完整編輯資料，包含基本資訊和價格方案。專門供編輯頁面使用。

**權限限制**：
- 只有課程擁有者可以存取
- 需要教師身份認證
- 不限課程狀態（可編輯任何狀態的自有課程）

**回應資料**：
- 完整的課程基本資訊
- 所有價格方案列表（按價格排序）
- 供前端編輯表單初始化使用

**業務邏輯**：
- 驗證使用者具有教師權限
- 驗證課程所有權
- 查詢完整課程資料
- 查詢關聯的價格方案
- 回傳整合資料

 * @summary 取得課程編輯資料
 */
  getApiCoursesIdEdit<TData = GetCourseForEditSuccessResponse>(
    id: number,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  getApiCoursesIdEdit<TData = GetCourseForEditSuccessResponse>(
    id: number,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  getApiCoursesIdEdit<TData = GetCourseForEditSuccessResponse>(
    id: number,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  getApiCoursesIdEdit<TData = GetCourseForEditSuccessResponse>(
    id: number,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.get<TData>(`/api/courses/${id}/edit`, options);
  }
}

export type PostApiCoursesClientResult =
  NonNullable<CreateCourseSuccessResponse>;
export type GetApiCoursesClientResult =
  NonNullable<GetCourseListSuccessResponse>;
export type PutApiCoursesIdClientResult =
  NonNullable<UpdateCourseSuccessResponse>;
export type GetApiCoursesIdClientResult = NonNullable<GetCourseSuccessResponse>;
export type DeleteApiCoursesIdClientResult =
  NonNullable<DeleteCourseSuccessResponse>;
export type GetApiCoursesIdEditClientResult =
  NonNullable<GetCourseForEditSuccessResponse>;
