/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * Talent Match API
 * 全面重構後的 Talent Match 後端 API 文件
 * OpenAPI spec version: 2.0.0
 */
import { HttpClient } from '@angular/common/http';
import type {
  HttpContext,
  HttpEvent,
  HttpHeaders,
  HttpParams,
  HttpResponse as AngularHttpResponse,
} from '@angular/common/http';

import { Injectable, inject } from '@angular/core';

// import type { DeepNonNullable } from '@orval/core/src/utils/deep-non-nullable';

// 使用 TypeScript 內建的 NonNullable 型別
type DeepNonNullable<T> = T extends (...args: any[]) => any
  ? T
  : T extends any[]
  ? _DeepNonNullableArray<T[number]>
  : T extends object
  ? _DeepNonNullableObject<T>
  : NonNullable<T>;

type _DeepNonNullableArray<T> = Array<DeepNonNullable<NonNullable<T>>>;

type _DeepNonNullableObject<T> = {
  [P in keyof T]-?: DeepNonNullable<NonNullable<T[P]>>;
};

import { Observable } from 'rxjs';

import type {
  CalendarViewResponse,
  CreateReservationRequest,
  CreateReservationResponse,
  DeleteApiReservationsId200,
  GetApiReservationsCalendarParams,
  GetApiReservationsParams,
  PutApiReservationsIdStatus200,
  ReservationListResponse,
  UpdateReservationStatusRequest,
} from '../talentMatchAPI.schemas';

interface HttpClientOptions {
  headers?: HttpHeaders | Record<string, string | string[]>;
  context?: HttpContext;
  params?:
    | HttpParams
    | Record<
        string,
        string | number | boolean | ReadonlyArray<string | number | boolean>
      >;
  reportProgress?: boolean;
  withCredentials?: boolean;
  credentials?: RequestCredentials;
  keepalive?: boolean;
  priority?: RequestPriority;
  cache?: RequestCache;
  mode?: RequestMode;
  redirect?: RequestRedirect;
  referrer?: string;
  integrity?: string;
  transferCache?: { includeHeaders?: string[] } | boolean;
  timeout?: number;
}

@Injectable({ providedIn: 'root' })
export class ReservationManagementService {
  private readonly http = inject(HttpClient);
  /**
   * 學生為購買的課程建立預約時段
   * @summary 建立預約
   */
  postApiReservations<TData = CreateReservationResponse>(
    createReservationRequest: CreateReservationRequest,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  postApiReservations<TData = CreateReservationResponse>(
    createReservationRequest: CreateReservationRequest,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  postApiReservations<TData = CreateReservationResponse>(
    createReservationRequest: CreateReservationRequest,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  postApiReservations<TData = CreateReservationResponse>(
    createReservationRequest: CreateReservationRequest,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.post<TData>(
      `/api/reservations`,
      createReservationRequest,
      options,
    );
  }
  /**
   * 根據使用者角色查詢預約列表，支援篩選和分頁
   * @summary 查詢預約列表
   */
  getApiReservations<TData = ReservationListResponse>(
    params: DeepNonNullable<GetApiReservationsParams>,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  getApiReservations<TData = ReservationListResponse>(
    params: DeepNonNullable<GetApiReservationsParams>,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  getApiReservations<TData = ReservationListResponse>(
    params: DeepNonNullable<GetApiReservationsParams>,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  getApiReservations<TData = ReservationListResponse>(
    params: DeepNonNullable<GetApiReservationsParams>,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.get<TData>(`/api/reservations`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  }
  /**
   * 教師或學生標記課程完成狀態
   * @summary 更新預約狀態
   */
  putApiReservationsIdStatus<TData = PutApiReservationsIdStatus200>(
    id: number,
    updateReservationStatusRequest: UpdateReservationStatusRequest,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  putApiReservationsIdStatus<TData = PutApiReservationsIdStatus200>(
    id: number,
    updateReservationStatusRequest: UpdateReservationStatusRequest,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  putApiReservationsIdStatus<TData = PutApiReservationsIdStatus200>(
    id: number,
    updateReservationStatusRequest: UpdateReservationStatusRequest,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  putApiReservationsIdStatus<TData = PutApiReservationsIdStatus200>(
    id: number,
    updateReservationStatusRequest: UpdateReservationStatusRequest,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.put<TData>(
      `/api/reservations/${id}/status`,
      updateReservationStatusRequest,
      options,
    );
  }
  /**
   * 學生或教師取消預約，需滿足提前24小時要求
   * @summary 取消預約
   */
  deleteApiReservationsId<TData = DeleteApiReservationsId200>(
    id: number,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  deleteApiReservationsId<TData = DeleteApiReservationsId200>(
    id: number,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  deleteApiReservationsId<TData = DeleteApiReservationsId200>(
    id: number,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  deleteApiReservationsId<TData = DeleteApiReservationsId200>(
    id: number,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.delete<TData>(`/api/reservations/${id}`, options);
  }
  /**
   * 以週或月檢視查看預約日曆
   * @summary 取得日曆檢視
   */
  getApiReservationsCalendar<TData = CalendarViewResponse>(
    params: DeepNonNullable<GetApiReservationsCalendarParams>,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  getApiReservationsCalendar<TData = CalendarViewResponse>(
    params: DeepNonNullable<GetApiReservationsCalendarParams>,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  getApiReservationsCalendar<TData = CalendarViewResponse>(
    params: DeepNonNullable<GetApiReservationsCalendarParams>,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  getApiReservationsCalendar<TData = CalendarViewResponse>(
    params: DeepNonNullable<GetApiReservationsCalendarParams>,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.get<TData>(`/api/reservations/calendar`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  }
}

export type PostApiReservationsClientResult =
  NonNullable<CreateReservationResponse>;
export type GetApiReservationsClientResult =
  NonNullable<ReservationListResponse>;
export type PutApiReservationsIdStatusClientResult =
  NonNullable<PutApiReservationsIdStatus200>;
export type DeleteApiReservationsIdClientResult =
  NonNullable<DeleteApiReservationsId200>;
export type GetApiReservationsCalendarClientResult =
  NonNullable<CalendarViewResponse>;
