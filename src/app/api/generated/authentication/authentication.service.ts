/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * Talent Match API
 * 全面重構後的 Talent Match 後端 API 文件
 * OpenAPI spec version: 2.0.0
 */
import { HttpClient } from '@angular/common/http';
import type {
  HttpContext,
  HttpEvent,
  HttpHeaders,
  HttpParams,
  HttpResponse as AngularHttpResponse,
} from '@angular/common/http';

import { Injectable, inject } from '@angular/core';

import { Observable } from 'rxjs';

import type {
  DeleteProfileResponse,
  ForgotPasswordRequest,
  ForgotPasswordSuccessResponse,
  GetProfileResponse,
  LoginRequest,
  LoginSuccessResponse,
  RefreshTokenRequest,
  RefreshTokenSuccessResponse,
  RegisterRequest,
  RegisterSuccessResponse,
  ResetPasswordRequest,
  ResetPasswordSuccessResponse,
  UpdateProfileRequest,
  UpdateProfileResponse,
} from '../talentMatchAPI.schemas';

interface HttpClientOptions {
  headers?: HttpHeaders | Record<string, string | string[]>;
  context?: HttpContext;
  params?:
    | HttpParams
    | Record<
        string,
        string | number | boolean | ReadonlyArray<string | number | boolean>
      >;
  reportProgress?: boolean;
  withCredentials?: boolean;
  credentials?: RequestCredentials;
  keepalive?: boolean;
  priority?: RequestPriority;
  cache?: RequestCache;
  mode?: RequestMode;
  redirect?: RequestRedirect;
  referrer?: string;
  integrity?: string;
  transferCache?: { includeHeaders?: string[] } | boolean;
  timeout?: number;
}

@Injectable({ providedIn: 'root' })
export class AuthenticationService {
  private readonly http = inject(HttpClient);
  /**
 * 註冊新的使用者帳戶，成功後自動登入並回傳 JWT Token。

**業務邏輯**：
- 驗證請求參數
- 檢查 email 是否已存在
- 檢查暱稱是否已存在  
- 建立新使用者（預設為學生角色）
- 自動生成並回傳 JWT Token

 * @summary 使用者註冊
 */
  postApiAuthRegister<TData = RegisterSuccessResponse>(
    registerRequest: RegisterRequest,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  postApiAuthRegister<TData = RegisterSuccessResponse>(
    registerRequest: RegisterRequest,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  postApiAuthRegister<TData = RegisterSuccessResponse>(
    registerRequest: RegisterRequest,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  postApiAuthRegister<TData = RegisterSuccessResponse>(
    registerRequest: RegisterRequest,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.post<TData>(
      `/api/auth/register`,
      registerRequest,
      options,
    );
  }
  /**
 * 使用電子郵件和密碼登入系統，成功後回傳 JWT Token。

**業務邏輯**：
- 驗證請求參數
- 檢查使用者是否存在
- 檢查帳號狀態是否為啟用
- 驗證密碼正確性
- 更新最後登入時間
- 生成並回傳 JWT Token

 * @summary 使用者登入
 */
  postApiAuthLogin<TData = LoginSuccessResponse>(
    loginRequest: LoginRequest,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  postApiAuthLogin<TData = LoginSuccessResponse>(
    loginRequest: LoginRequest,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  postApiAuthLogin<TData = LoginSuccessResponse>(
    loginRequest: LoginRequest,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  postApiAuthLogin<TData = LoginSuccessResponse>(
    loginRequest: LoginRequest,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.post<TData>(`/api/auth/login`, loginRequest, options);
  }
  /**
 * 使用 Refresh Token 獲取新的 Access Token，延長使用者登入狀態。

**業務邏輯**：
- 驗證請求參數
- 驗證 Refresh Token 有效性和類型
- 檢查使用者是否存在且帳號狀態為啟用
- 生成新的 Access Token 和 Refresh Token
- 回傳新的 Token 和使用者資料

 * @summary 刷新 JWT Token
 */
  postApiAuthRefresh<TData = RefreshTokenSuccessResponse>(
    refreshTokenRequest: RefreshTokenRequest,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  postApiAuthRefresh<TData = RefreshTokenSuccessResponse>(
    refreshTokenRequest: RefreshTokenRequest,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  postApiAuthRefresh<TData = RefreshTokenSuccessResponse>(
    refreshTokenRequest: RefreshTokenRequest,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  postApiAuthRefresh<TData = RefreshTokenSuccessResponse>(
    refreshTokenRequest: RefreshTokenRequest,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.post<TData>(
      `/api/auth/refresh`,
      refreshTokenRequest,
      options,
    );
  }
  /**
 * 發送重設密碼郵件到使用者的電子郵件地址。

**業務邏輯**：
- 驗證請求參數
- 查詢使用者是否存在
- 檢查帳號狀態是否為啟用
- 生成重設密碼 Token
- 發送重設密碼郵件

**安全考量**：無論使用者是否存在，都回傳相同的成功訊息，避免洩露系統中的電子郵件地址。

 * @summary 忘記密碼
 */
  postApiAuthForgotPassword<TData = ForgotPasswordSuccessResponse>(
    forgotPasswordRequest: ForgotPasswordRequest,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  postApiAuthForgotPassword<TData = ForgotPasswordSuccessResponse>(
    forgotPasswordRequest: ForgotPasswordRequest,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  postApiAuthForgotPassword<TData = ForgotPasswordSuccessResponse>(
    forgotPasswordRequest: ForgotPasswordRequest,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  postApiAuthForgotPassword<TData = ForgotPasswordSuccessResponse>(
    forgotPasswordRequest: ForgotPasswordRequest,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.post<TData>(
      `/api/auth/forgot-password`,
      forgotPasswordRequest,
      options,
    );
  }
  /**
 * 使用重設密碼 Token 更新使用者密碼。

**業務邏輯**：
- 驗證請求參數
- 查詢擁有此重設 Token 的使用者
- 檢查 Token 是否已過期
- 檢查帳號狀態是否為啟用
- 加密並更新新密碼
- 清除重設 Token 和過期時間

 * @summary 重設密碼
 */
  postApiAuthResetPassword<TData = ResetPasswordSuccessResponse>(
    resetPasswordRequest: ResetPasswordRequest,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  postApiAuthResetPassword<TData = ResetPasswordSuccessResponse>(
    resetPasswordRequest: ResetPasswordRequest,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  postApiAuthResetPassword<TData = ResetPasswordSuccessResponse>(
    resetPasswordRequest: ResetPasswordRequest,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  postApiAuthResetPassword<TData = ResetPasswordSuccessResponse>(
    resetPasswordRequest: ResetPasswordRequest,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.post<TData>(
      `/api/auth/reset-password`,
      resetPasswordRequest,
      options,
    );
  }
  /**
 * 取得當前已認證使用者的完整個人資料。

**業務邏輯:**
- 需要有效的 JWT Access Token
- 僅返回當前認證使用者的資料
- 不包含敏感資訊（密碼、重設令牌等）
- 包含使用者角色資訊和帳號狀態

**資料完整性:**
- 返回最新的使用者資料
- 包含所有關聯的角色資訊
- 顯示帳號狀態和最後登入時間

 * @summary 取得使用者個人資料
 */
  getApiAuthProfile<TData = GetProfileResponse>(
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  getApiAuthProfile<TData = GetProfileResponse>(
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  getApiAuthProfile<TData = GetProfileResponse>(
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  getApiAuthProfile<TData = GetProfileResponse>(
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.get<TData>(`/api/auth/profile`, options);
  }
  /**
 * 更新當前已認證使用者的個人資料，支援部分更新。

**業務邏輯:**
- 需要有效的 JWT Access Token
- 支援部分更新，所有欄位皆為選填
- 暱稱更新時會檢查唯一性
- 自動驗證資料格式和長度限制

**支援更新欄位:**
- `nick_name`: 暱稱 (1-50字元，需唯一)
- `name`: 真實姓名 (最大100字元)
- `birthday`: 生日 (YYYY-MM-DD格式，可傳入空字串清空)
- `contact_phone`: 聯絡電話 (最大20字元)
- `avatar_image`: 大頭貼網址 (需為有效URL)

**驗證規則:**
- 暱稱不能為空且需唯一
- 生日可為有效日期、空字串(清空)或null
- 電話號碼僅支援數字、+、-、空格、括號
- 大頭貼需為有效的URL格式

 * @summary 更新使用者個人資料
 */
  putApiAuthProfile<TData = UpdateProfileResponse>(
    updateProfileRequest: UpdateProfileRequest,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  putApiAuthProfile<TData = UpdateProfileResponse>(
    updateProfileRequest: UpdateProfileRequest,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  putApiAuthProfile<TData = UpdateProfileResponse>(
    updateProfileRequest: UpdateProfileRequest,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  putApiAuthProfile<TData = UpdateProfileResponse>(
    updateProfileRequest: UpdateProfileRequest,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.put<TData>(
      `/api/auth/profile`,
      updateProfileRequest,
      options,
    );
  }
  /**
 * 軟刪除當前已認證使用者的帳號，保留資料以供稽核和復原。

**軟刪除機制:**
- 使用 TypeORM 的軟刪除功能
- 設定 `deleted_at` 時間戳記而非實際刪除資料
- 保留歷史資料完整性
- 支援未來的資料復原需求

**刪除後效果:**
- 使用者無法再登入系統
- 暱稱和email可供新使用者註冊使用
- 歷史記錄和關聯資料保持完整
- 相關的教師/學生記錄狀態會相應調整

**安全考量:**
- 需要有效的 JWT Access Token
- 僅能刪除當前認證使用者的帳號
- 操作不可逆，請謹慎使用
- 建議在前端實作二次確認機制

 * @summary 刪除使用者帳號
 */
  deleteApiAuthProfile<TData = DeleteProfileResponse>(
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  deleteApiAuthProfile<TData = DeleteProfileResponse>(
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  deleteApiAuthProfile<TData = DeleteProfileResponse>(
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  deleteApiAuthProfile<TData = DeleteProfileResponse>(
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.delete<TData>(`/api/auth/profile`, options);
  }
}

export type PostApiAuthRegisterClientResult =
  NonNullable<RegisterSuccessResponse>;
export type PostApiAuthLoginClientResult = NonNullable<LoginSuccessResponse>;
export type PostApiAuthRefreshClientResult =
  NonNullable<RefreshTokenSuccessResponse>;
export type PostApiAuthForgotPasswordClientResult =
  NonNullable<ForgotPasswordSuccessResponse>;
export type PostApiAuthResetPasswordClientResult =
  NonNullable<ResetPasswordSuccessResponse>;
export type GetApiAuthProfileClientResult = NonNullable<GetProfileResponse>;
export type PutApiAuthProfileClientResult = NonNullable<UpdateProfileResponse>;
export type DeleteApiAuthProfileClientResult =
  NonNullable<DeleteProfileResponse>;
