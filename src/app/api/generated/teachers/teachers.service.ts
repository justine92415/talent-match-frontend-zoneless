/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * Talent Match API
 * 全面重構後的 Talent Match 後端 API 文件

🆕 v2.1 新功能：整合式課程建立 API，支援同時上傳圖片和設定價格方案
 * OpenAPI spec version: 2.1.0
 */
import { HttpClient } from '@angular/common/http';
import type {
  HttpContext,
  HttpEvent,
  HttpHeaders,
  HttpParams,
  HttpResponse as AngularHttpResponse,
} from '@angular/common/http';

import { Injectable, inject } from '@angular/core';

// import type { DeepNonNullable } from '@orval/core/src/utils/deep-non-nullable';

// 使用 TypeScript 內建的 NonNullable 型別
type DeepNonNullable<T> = T extends (...args: any[]) => any
  ? T
  : T extends any[]
  ? _DeepNonNullableArray<T[number]>
  : T extends object
  ? _DeepNonNullableObject<T>
  : NonNullable<T>;

type _DeepNonNullableArray<T> = Array<DeepNonNullable<NonNullable<T>>>;

type _DeepNonNullableObject<T> = {
  [P in keyof T]-?: DeepNonNullable<NonNullable<T[P]>>;
};

import { Observable } from 'rxjs';

import type {
  CertificateBatchCreateRequest,
  CertificateBatchCreateSuccessResponse,
  CertificateCreateRequest,
  CertificateDeleteSuccessResponse,
  CertificateListSuccessResponse,
  CertificateUpdateSuccessResponse,
  CertificateUpsertRequest,
  CertificateUpsertResponse,
  GetApiTeachersScheduleConflictsParams,
  LearningExperienceBatchCreateRequest,
  LearningExperienceBatchCreateSuccessResponse,
  LearningExperienceCreateRequest,
  LearningExperienceDeleteSuccessResponse,
  LearningExperienceListSuccessResponse,
  LearningExperienceUpdateSuccessResponse,
  LearningExperienceUpsertRequest,
  LearningExperienceUpsertResponse,
  ScheduleConflictCheckSuccessResponse,
  TeacherApplicationRequest,
  TeacherApplicationSuccessResponse,
  TeacherApplyStatusSuccessResponse,
  TeacherBasicInfoSuccessResponse,
  TeacherBasicInfoUpdateRequest,
  TeacherBasicInfoUpdateSuccessResponse,
  TeacherProfileSuccessResponse,
  TeacherProfileUpdateRequest,
  TeacherProfileUpdateSuccessResponse,
  TeacherResubmitSuccessResponse,
  TeacherSubmitSuccessResponse,
  WeeklyScheduleRequest,
  WeeklyScheduleResponse,
  WorkExperienceBatchCreateRequest,
  WorkExperienceBatchCreateSuccessResponse,
  WorkExperienceCreateRequest,
  WorkExperienceDeleteSuccessResponse,
  WorkExperienceListSuccessResponse,
  WorkExperienceUpdateSuccessResponse,
  WorkExperienceUpsertRequest,
  WorkExperienceUpsertResponse,
} from '../talentMatchAPI.schemas';

interface HttpClientOptions {
  headers?: HttpHeaders | Record<string, string | string[]>;
  context?: HttpContext;
  params?:
    | HttpParams
    | Record<
        string,
        string | number | boolean | ReadonlyArray<string | number | boolean>
      >;
  reportProgress?: boolean;
  withCredentials?: boolean;
  credentials?: RequestCredentials;
  keepalive?: boolean;
  priority?: RequestPriority;
  cache?: RequestCache;
  mode?: RequestMode;
  redirect?: RequestRedirect;
  referrer?: string;
  integrity?: string;
  transferCache?: { includeHeaders?: string[] } | boolean;
  timeout?: number;
}

@Injectable({ providedIn: 'root' })
export class TeachersService {
  private readonly http = inject(HttpClient);
  /**
 * 建立新的教師申請，提交地址資訊、教授科目、專長和自我介紹資料。

**業務邏輯**：
- 驗證使用者是否具有學生角色且帳號為活躍狀態
- 檢查是否已有教師申請記錄（一個使用者只能有一個申請）
- 驗證教授科目（主分類）是否存在且有效
- 驗證專長（子分類）是否屬於所選的教授科目且有效
- 建立新的教師申請記錄，狀態設為 pending（待審核）
- 回傳建立的教師申請資料

 * @summary 申請成為教師
 */
  postApiTeachersApply<TData = TeacherApplicationSuccessResponse>(
    teacherApplicationRequest: TeacherApplicationRequest,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  postApiTeachersApply<TData = TeacherApplicationSuccessResponse>(
    teacherApplicationRequest: TeacherApplicationRequest,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  postApiTeachersApply<TData = TeacherApplicationSuccessResponse>(
    teacherApplicationRequest: TeacherApplicationRequest,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  postApiTeachersApply<TData = TeacherApplicationSuccessResponse>(
    teacherApplicationRequest: TeacherApplicationRequest,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.post<TData>(
      `/api/teachers/apply`,
      teacherApplicationRequest,
      options,
    );
  }
  /**
 * 取得使用者的教師申請狀態和所有步驟的表單資料，用於前端判斷申請進度和預填表單。

**多步驟表單結構**：
1. 基本資訊：地址、教授科目、專長、自我介紹
2. 工作經驗：工作經歷列表
3. 學歷背景：學習經歷列表  
4. 教學證照：證照列表

**前端判斷邏輯**：
```javascript
// 判斷申請狀態
if (!data) return 'FIRST_TIME'           // 第一次申請
if (!data.application_submitted_at) {
  // 判斷進行到哪一步
  if (!data.basic_info.city) return 'STEP_1'           // 基本資訊未填
  if (data.work_experiences.length === 0) return 'STEP_2'     // 工作經驗未填
  if (data.learning_experiences.length === 0) return 'STEP_3' // 學歷未填
  if (data.certificates.length === 0) return 'STEP_4'         // 證照未填
  return 'READY_TO_SUBMIT'              // 可提交
} else {
  return 'SUBMITTED'                    // 已提交
}
```

**業務邏輯**：
- 如果使用者從未申請過，回傳 404
- 如果有申請記錄，回傳完整的申請狀態和所有步驟資料
- 前端可根據資料完整性判斷目前進度和預填表單

 * @summary 查詢教師申請狀態與完整表單資料
 */
  getApiTeachersApplyStatus<TData = TeacherApplyStatusSuccessResponse>(
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  getApiTeachersApplyStatus<TData = TeacherApplyStatusSuccessResponse>(
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  getApiTeachersApplyStatus<TData = TeacherApplyStatusSuccessResponse>(
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  getApiTeachersApplyStatus<TData = TeacherApplyStatusSuccessResponse>(
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.get<TData>(`/api/teachers/apply-status`, options);
  }
  /**
 * 取得已通過申請的教師基本資訊，主要用於教師個人資料管理。
與 /apply-status 的差異：
- 此路由專門用於已通過申請的教師基本資料 CRUD
- /apply-status 用於申請流程中的狀態判斷與表單預填

**業務邏輯**：
- 僅提供基本資訊欄位，不包含申請狀態相關欄位
- 主要給已獲得教師身份的使用者管理個人基本資料使用

 * @summary 取得教師基本資訊
 */
  getApiTeachersBasicInfo<TData = TeacherBasicInfoSuccessResponse>(
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  getApiTeachersBasicInfo<TData = TeacherBasicInfoSuccessResponse>(
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  getApiTeachersBasicInfo<TData = TeacherBasicInfoSuccessResponse>(
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  getApiTeachersBasicInfo<TData = TeacherBasicInfoSuccessResponse>(
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.get<TData>(`/api/teachers/basic-info`, options);
  }
  /**
 * 更新已通過申請的教師基本資訊，專門用於個人資料管理。

**業務邏輯**：
- 僅允許更新基本資訊欄位
- 不影響申請狀態相關欄位
- 主要給已獲得教師身份的使用者更新個人基本資料

 * @summary 更新教師基本資訊
 */
  putApiTeachersBasicInfo<TData = TeacherBasicInfoUpdateSuccessResponse>(
    teacherBasicInfoUpdateRequest: TeacherBasicInfoUpdateRequest,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  putApiTeachersBasicInfo<TData = TeacherBasicInfoUpdateSuccessResponse>(
    teacherBasicInfoUpdateRequest: TeacherBasicInfoUpdateRequest,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  putApiTeachersBasicInfo<TData = TeacherBasicInfoUpdateSuccessResponse>(
    teacherBasicInfoUpdateRequest: TeacherBasicInfoUpdateRequest,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  putApiTeachersBasicInfo<TData = TeacherBasicInfoUpdateSuccessResponse>(
    teacherBasicInfoUpdateRequest: TeacherBasicInfoUpdateRequest,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.put<TData>(
      `/api/teachers/basic-info`,
      teacherBasicInfoUpdateRequest,
      options,
    );
  }
  /**
 * 重新提交被拒絕的教師申請，重設申請狀態為待審核。

**業務邏輯**：
- 驗證申請是否存在且為被拒絕狀態
- 重設申請狀態為 pending（待審核）
- 更新申請提交時間
- 清除之前的審核資訊（審核時間、審核者、審核備註）
- 回傳更新後的申請狀態資訊

 * @summary 重新提交教師申請
 */
  postApiTeachersResubmit<TData = TeacherResubmitSuccessResponse>(
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  postApiTeachersResubmit<TData = TeacherResubmitSuccessResponse>(
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  postApiTeachersResubmit<TData = TeacherResubmitSuccessResponse>(
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  postApiTeachersResubmit<TData = TeacherResubmitSuccessResponse>(
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.post<TData>(`/api/teachers/resubmit`, undefined, options);
  }
  /**
 * 最終提交教師申請，將申請狀態設為已提交待審核。

**業務邏輯**：
- 驗證申請是否存在且為草稿狀態
- 檢查是否已完成所有必要步驟（基本資料、工作經驗、學歷、證照）
- 設定申請提交時間
- 將申請狀態設為 pending（待審核）
- 回傳提交後的申請狀態資訊

 * @summary 提交教師申請
 */
  postApiTeachersSubmit<TData = TeacherSubmitSuccessResponse>(
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  postApiTeachersSubmit<TData = TeacherSubmitSuccessResponse>(
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  postApiTeachersSubmit<TData = TeacherSubmitSuccessResponse>(
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  postApiTeachersSubmit<TData = TeacherSubmitSuccessResponse>(
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.post<TData>(`/api/teachers/submit`, undefined, options);
  }
  /**
 * 取得教師完整個人檔案，包含基本資訊、統計數據等。
與 /basic-info 的差異：此路由提供完整的教師檔案資訊，包含統計數據。

**業務邏輯**：
- 驗證使用者為有效的教師
- 回傳完整教師檔案資訊，包含統計數據
- 包含總學生數、總課程數、平均評分、總收入等資訊

 * @summary 取得教師個人檔案
 */
  getApiTeachersProfile<TData = TeacherProfileSuccessResponse>(
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  getApiTeachersProfile<TData = TeacherProfileSuccessResponse>(
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  getApiTeachersProfile<TData = TeacherProfileSuccessResponse>(
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  getApiTeachersProfile<TData = TeacherProfileSuccessResponse>(
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.get<TData>(`/api/teachers/profile`, options);
  }
  /**
 * 更新教師個人檔案基本資訊。

**業務邏輯**：
- 驗證使用者為有效的教師
- 驗證教授科目和專長的有效性
- 更新教師基本資訊
- 回傳更新後的資訊和提醒訊息

 * @summary 更新教師個人檔案
 */
  putApiTeachersProfile<TData = TeacherProfileUpdateSuccessResponse>(
    teacherProfileUpdateRequest: TeacherProfileUpdateRequest,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  putApiTeachersProfile<TData = TeacherProfileUpdateSuccessResponse>(
    teacherProfileUpdateRequest: TeacherProfileUpdateRequest,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  putApiTeachersProfile<TData = TeacherProfileUpdateSuccessResponse>(
    teacherProfileUpdateRequest: TeacherProfileUpdateRequest,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  putApiTeachersProfile<TData = TeacherProfileUpdateSuccessResponse>(
    teacherProfileUpdateRequest: TeacherProfileUpdateRequest,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.put<TData>(
      `/api/teachers/profile`,
      teacherProfileUpdateRequest,
      options,
    );
  }
  /**
 * 取得教師的工作經驗列表。

**業務邏輯**：
- 驗證使用者為有效的教師
- 回傳該教師的所有工作經驗記錄
- 按時間順序排列（最新的優先）

 * @summary 取得工作經驗列表
 */
  getApiTeachersWorkExperiences<TData = WorkExperienceListSuccessResponse>(
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  getApiTeachersWorkExperiences<TData = WorkExperienceListSuccessResponse>(
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  getApiTeachersWorkExperiences<TData = WorkExperienceListSuccessResponse>(
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  getApiTeachersWorkExperiences<TData = WorkExperienceListSuccessResponse>(
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.get<TData>(`/api/teachers/work-experiences`, options);
  }
  /**
 * 新增教師工作經驗記錄，統一使用陣列格式。

**請求格式**：
- 統一使用 `{ work_experiences: [工作經驗陣列] }` 格式
- 即使只有一筆資料，也需要包裝在陣列中

**業務邏輯**：
- 驗證使用者為有效的教師
- 驗證工作經驗資料的完整性和邏輯性
- 檢查開始和結束時間的合理性
- 一次最多支援 20 筆工作經驗
- 建立新的工作經驗記錄
- 回傳建立的工作經驗資料和統計資訊

 * @summary 新增工作經驗
 */
  postApiTeachersWorkExperiences<
    TData = WorkExperienceBatchCreateSuccessResponse,
  >(
    workExperienceBatchCreateRequest: WorkExperienceBatchCreateRequest,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  postApiTeachersWorkExperiences<
    TData = WorkExperienceBatchCreateSuccessResponse,
  >(
    workExperienceBatchCreateRequest: WorkExperienceBatchCreateRequest,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  postApiTeachersWorkExperiences<
    TData = WorkExperienceBatchCreateSuccessResponse,
  >(
    workExperienceBatchCreateRequest: WorkExperienceBatchCreateRequest,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  postApiTeachersWorkExperiences<
    TData = WorkExperienceBatchCreateSuccessResponse,
  >(
    workExperienceBatchCreateRequest: WorkExperienceBatchCreateRequest,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.post<TData>(
      `/api/teachers/work-experiences`,
      workExperienceBatchCreateRequest,
      options,
    );
  }
  /**
 * 批次處理工作經驗記錄，支援同時新增和更新操作。

**UPSERT 邏輯**：
- 有 `id` 的記錄：執行更新操作
- 沒有 `id` 的記錄：執行新增操作
- 支援在同一個請求中混合處理新增和更新
- 所有操作在單一交易中執行，確保資料一致性

**使用場景**：
- 使用者中途離開申請頁面後重新填寫
- 需要同時修改現有資料並新增新的工作經驗
- 前端不需要複雜的邏輯判斷應該呼叫 POST 還是 PUT

**請求格式**：
- 統一使用 `{ work_experiences: [工作經驗陣列] }` 格式
- 每個工作經驗物件可選擇性包含 `id` 欄位

**業務邏輯**：
- 驗證使用者為有效的教師或教師申請者
- 對於有 `id` 的記錄，驗證使用者擁有權
- 驗證所有工作經驗資料的完整性和邏輯性
- 檢查開始和結束時間的合理性
- 一次最多支援 20 筆工作經驗
- 在資料庫交易中執行所有操作
- 回傳處理結果統計和更新後的資料

 * @summary 批次新增或更新工作經驗
 */
  putApiTeachersWorkExperiences<TData = WorkExperienceUpsertResponse>(
    workExperienceUpsertRequest: WorkExperienceUpsertRequest,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  putApiTeachersWorkExperiences<TData = WorkExperienceUpsertResponse>(
    workExperienceUpsertRequest: WorkExperienceUpsertRequest,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  putApiTeachersWorkExperiences<TData = WorkExperienceUpsertResponse>(
    workExperienceUpsertRequest: WorkExperienceUpsertRequest,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  putApiTeachersWorkExperiences<TData = WorkExperienceUpsertResponse>(
    workExperienceUpsertRequest: WorkExperienceUpsertRequest,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.put<TData>(
      `/api/teachers/work-experiences`,
      workExperienceUpsertRequest,
      options,
    );
  }
  /**
 * 更新指定的工作經驗記錄。

**業務邏輯**：
- 驗證使用者為該工作經驗的擁有者
- 驗證工作經驗資料的完整性和邏輯性
- 檢查開始和結束時間的合理性
- 更新工作經驗記錄
- 回傳更新後的工作經驗資料

 * @summary 更新工作經驗
 */
  putApiTeachersWorkExperiencesId<TData = WorkExperienceUpdateSuccessResponse>(
    id: number,
    workExperienceCreateRequest: WorkExperienceCreateRequest,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  putApiTeachersWorkExperiencesId<TData = WorkExperienceUpdateSuccessResponse>(
    id: number,
    workExperienceCreateRequest: WorkExperienceCreateRequest,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  putApiTeachersWorkExperiencesId<TData = WorkExperienceUpdateSuccessResponse>(
    id: number,
    workExperienceCreateRequest: WorkExperienceCreateRequest,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  putApiTeachersWorkExperiencesId<TData = WorkExperienceUpdateSuccessResponse>(
    id: number,
    workExperienceCreateRequest: WorkExperienceCreateRequest,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.put<TData>(
      `/api/teachers/work-experiences/${id}`,
      workExperienceCreateRequest,
      options,
    );
  }
  /**
 * 刪除指定的工作經驗記錄。

**業務邏輯**：
- 驗證使用者為該工作經驗的擁有者
- 檢查工作經驗記錄是否存在
- 執行軟刪除或硬刪除
- 回傳刪除成功確認

 * @summary 刪除工作經驗
 */
  deleteApiTeachersWorkExperiencesId<
    TData = WorkExperienceDeleteSuccessResponse,
  >(
    id: number,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  deleteApiTeachersWorkExperiencesId<
    TData = WorkExperienceDeleteSuccessResponse,
  >(
    id: number,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  deleteApiTeachersWorkExperiencesId<
    TData = WorkExperienceDeleteSuccessResponse,
  >(
    id: number,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  deleteApiTeachersWorkExperiencesId<
    TData = WorkExperienceDeleteSuccessResponse,
  >(
    id: number,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.delete<TData>(
      `/api/teachers/work-experiences/${id}`,
      options,
    );
  }
  /**
 * 取得教師的學習經歷（學歷背景）列表。

**業務邏輯**：
- 驗證使用者為有效的教師
- 回傳該教師的所有學習經歷記錄
- 按開始時間排序（最新的優先）

 * @summary 取得學習經歷列表
 */
  getApiTeachersLearningExperiences<
    TData = LearningExperienceListSuccessResponse,
  >(options?: HttpClientOptions & { observe?: 'body' }): Observable<TData>;
  getApiTeachersLearningExperiences<
    TData = LearningExperienceListSuccessResponse,
  >(
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  getApiTeachersLearningExperiences<
    TData = LearningExperienceListSuccessResponse,
  >(
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  getApiTeachersLearningExperiences<
    TData = LearningExperienceListSuccessResponse,
  >(options?: HttpClientOptions & { observe?: any }): Observable<any> {
    return this.http.get<TData>(`/api/teachers/learning-experiences`, options);
  }
  /**
 * 新增教師學習經歷（學歷背景）記錄。

**業務邏輯**：
- 驗證使用者為有效的教師
- 驗證學習經歷資料的完整性和邏輯性
- 檢查開始和結束時間的合理性
- 驗證學位、學校、科系等資訊
- 建立新的學習經歷記錄
- 回傳建立的學習經歷資料

 * @summary 新增學習經歷
 */
  postApiTeachersLearningExperiences<
    TData = LearningExperienceBatchCreateSuccessResponse,
  >(
    learningExperienceBatchCreateRequest: LearningExperienceBatchCreateRequest,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  postApiTeachersLearningExperiences<
    TData = LearningExperienceBatchCreateSuccessResponse,
  >(
    learningExperienceBatchCreateRequest: LearningExperienceBatchCreateRequest,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  postApiTeachersLearningExperiences<
    TData = LearningExperienceBatchCreateSuccessResponse,
  >(
    learningExperienceBatchCreateRequest: LearningExperienceBatchCreateRequest,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  postApiTeachersLearningExperiences<
    TData = LearningExperienceBatchCreateSuccessResponse,
  >(
    learningExperienceBatchCreateRequest: LearningExperienceBatchCreateRequest,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.post<TData>(
      `/api/teachers/learning-experiences`,
      learningExperienceBatchCreateRequest,
      options,
    );
  }
  /**
 * 批次處理學習經驗記錄，支援同時新增和更新操作。

**UPSERT 邏輯**：
- 有 `id` 的記錄：執行更新操作
- 沒有 `id` 的記錄：執行新增操作
- 支援在同一個請求中混合處理新增和更新
- 所有操作在單一交易中執行，確保資料一致性

**使用場景**：
- 使用者中途離開申請頁面後重新填寫
- 需要同時修改現有資料並新增新的學習經驗
- 前端不需要複雜的邏輯判斷應該呼叫 POST 還是 PUT

**請求格式**：
- 統一使用 `{ learning_experiences: [學習經驗陣列] }` 格式
- 每個學習經驗物件可選擇性包含 `id` 欄位

**業務邏輯**：
- 驗證使用者為有效的教師或教師申請者
- 對於有 `id` 的記錄，驗證使用者擁有權
- 驗證所有學習經驗資料的完整性和邏輯性
- 檢查開始和結束時間的合理性
- 一次最多支援 20 筆學習經驗
- 在資料庫交易中執行所有操作

 * @summary 批次新增或更新學習經驗
 */
  putApiTeachersLearningExperiences<TData = LearningExperienceUpsertResponse>(
    learningExperienceUpsertRequest: LearningExperienceUpsertRequest,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  putApiTeachersLearningExperiences<TData = LearningExperienceUpsertResponse>(
    learningExperienceUpsertRequest: LearningExperienceUpsertRequest,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  putApiTeachersLearningExperiences<TData = LearningExperienceUpsertResponse>(
    learningExperienceUpsertRequest: LearningExperienceUpsertRequest,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  putApiTeachersLearningExperiences<TData = LearningExperienceUpsertResponse>(
    learningExperienceUpsertRequest: LearningExperienceUpsertRequest,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.put<TData>(
      `/api/teachers/learning-experiences`,
      learningExperienceUpsertRequest,
      options,
    );
  }
  /**
 * 更新指定的學習經歷記錄。

**業務邏輯**：
- 驗證使用者為該學習經歷的擁有者
- 驗證學習經歷資料的完整性和邏輯性
- 檢查開始和結束時間的合理性
- 驗證學位、學校、科系等資訊
- 更新學習經歷記錄
- 回傳更新後的學習經歷資料

 * @summary 更新學習經歷
 */
  putApiTeachersLearningExperiencesId<
    TData = LearningExperienceUpdateSuccessResponse,
  >(
    id: number,
    learningExperienceCreateRequest: LearningExperienceCreateRequest,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  putApiTeachersLearningExperiencesId<
    TData = LearningExperienceUpdateSuccessResponse,
  >(
    id: number,
    learningExperienceCreateRequest: LearningExperienceCreateRequest,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  putApiTeachersLearningExperiencesId<
    TData = LearningExperienceUpdateSuccessResponse,
  >(
    id: number,
    learningExperienceCreateRequest: LearningExperienceCreateRequest,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  putApiTeachersLearningExperiencesId<
    TData = LearningExperienceUpdateSuccessResponse,
  >(
    id: number,
    learningExperienceCreateRequest: LearningExperienceCreateRequest,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.put<TData>(
      `/api/teachers/learning-experiences/${id}`,
      learningExperienceCreateRequest,
      options,
    );
  }
  /**
 * 刪除指定的學習經歷記錄。

**業務邏輯**：
- 驗證使用者為該學習經歷的擁有者
- 檢查學習經歷記錄是否存在
- 執行刪除操作
- 回傳刪除成功確認

 * @summary 刪除學習經歷
 */
  deleteApiTeachersLearningExperiencesId<
    TData = LearningExperienceDeleteSuccessResponse,
  >(
    id: number,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  deleteApiTeachersLearningExperiencesId<
    TData = LearningExperienceDeleteSuccessResponse,
  >(
    id: number,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  deleteApiTeachersLearningExperiencesId<
    TData = LearningExperienceDeleteSuccessResponse,
  >(
    id: number,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  deleteApiTeachersLearningExperiencesId<
    TData = LearningExperienceDeleteSuccessResponse,
  >(
    id: number,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.delete<TData>(
      `/api/teachers/learning-experiences/${id}`,
      options,
    );
  }
  /**
 * 取得教師的證書列表。

**業務邏輯**：
- 驗證使用者為有效的教師
- 回傳該教師的所有證書記錄
- 按建立時間排序（最新的優先）

 * @summary 取得證書列表
 */
  getApiTeachersCertificates<TData = CertificateListSuccessResponse>(
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  getApiTeachersCertificates<TData = CertificateListSuccessResponse>(
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  getApiTeachersCertificates<TData = CertificateListSuccessResponse>(
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  getApiTeachersCertificates<TData = CertificateListSuccessResponse>(
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.get<TData>(`/api/teachers/certificates`, options);
  }
  /**
 * 新增教師證書記錄。

**業務邏輯**：
- 驗證使用者為有效的教師
- 驗證證書資料的完整性
- 檢查證書編號的唯一性
- 驗證檔案路徑和檔案類型
- 建立新的證書記錄
- 回傳建立的證書資料

 * @summary 新增證書
 */
  postApiTeachersCertificates<TData = CertificateBatchCreateSuccessResponse>(
    certificateBatchCreateRequest: CertificateBatchCreateRequest,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  postApiTeachersCertificates<TData = CertificateBatchCreateSuccessResponse>(
    certificateBatchCreateRequest: CertificateBatchCreateRequest,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  postApiTeachersCertificates<TData = CertificateBatchCreateSuccessResponse>(
    certificateBatchCreateRequest: CertificateBatchCreateRequest,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  postApiTeachersCertificates<TData = CertificateBatchCreateSuccessResponse>(
    certificateBatchCreateRequest: CertificateBatchCreateRequest,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.post<TData>(
      `/api/teachers/certificates`,
      certificateBatchCreateRequest,
      options,
    );
  }
  /**
 * 批次處理證書記錄，支援同時新增和更新操作。

**UPSERT 邏輯**：
- 有 `id` 的記錄：執行更新操作
- 沒有 `id` 的記錄：執行新增操作
- 支援在同一個請求中混合處理新增和更新
- 所有操作在單一交易中執行，確保資料一致性

**使用場景**：
- 使用者中途離開申請頁面後重新填寫
- 需要同時修改現有資料並新增新的證書
- 前端不需要複雜的邏輯判斷應該呼叫 POST 還是 PUT

**請求格式**：
- 統一使用 `{ certificates: [證書陣列] }` 格式
- 每個證書物件可選擇性包含 `id` 欄位

**業務邏輯**：
- 驗證使用者為有效的教師或教師申請者
- 對於有 `id` 的記錄，驗證使用者擁有權
- 驗證所有證書資料的完整性和邏輯性
- 檢查證書名稱和發證機構的合理性
- 一次最多支援 20 筆證書
- 在資料庫交易中執行所有操作

 * @summary 批次新增或更新證書
 */
  putApiTeachersCertificates<TData = CertificateUpsertResponse>(
    certificateUpsertRequest: CertificateUpsertRequest,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  putApiTeachersCertificates<TData = CertificateUpsertResponse>(
    certificateUpsertRequest: CertificateUpsertRequest,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  putApiTeachersCertificates<TData = CertificateUpsertResponse>(
    certificateUpsertRequest: CertificateUpsertRequest,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  putApiTeachersCertificates<TData = CertificateUpsertResponse>(
    certificateUpsertRequest: CertificateUpsertRequest,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.put<TData>(
      `/api/teachers/certificates`,
      certificateUpsertRequest,
      options,
    );
  }
  /**
 * 更新指定的證書記錄。

**業務邏輯**：
- 驗證使用者為該證書的擁有者
- 驗證證書資料的完整性
- 檢查證書編號的唯一性（排除自己）
- 驗證檔案路徑和檔案類型
- 更新證書記錄
- 回傳更新後的證書資料

 * @summary 更新證書
 */
  putApiTeachersCertificatesId<TData = CertificateUpdateSuccessResponse>(
    id: number,
    certificateCreateRequest: CertificateCreateRequest,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  putApiTeachersCertificatesId<TData = CertificateUpdateSuccessResponse>(
    id: number,
    certificateCreateRequest: CertificateCreateRequest,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  putApiTeachersCertificatesId<TData = CertificateUpdateSuccessResponse>(
    id: number,
    certificateCreateRequest: CertificateCreateRequest,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  putApiTeachersCertificatesId<TData = CertificateUpdateSuccessResponse>(
    id: number,
    certificateCreateRequest: CertificateCreateRequest,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.put<TData>(
      `/api/teachers/certificates/${id}`,
      certificateCreateRequest,
      options,
    );
  }
  /**
 * 刪除指定的證書記錄。

**業務邏輯**：
- 驗證使用者為該證書的擁有者
- 檢查證書記錄是否存在
- 執行刪除操作
- 清理相關檔案（如需要）
- 回傳刪除成功確認

 * @summary 刪除證書
 */
  deleteApiTeachersCertificatesId<TData = CertificateDeleteSuccessResponse>(
    id: number,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  deleteApiTeachersCertificatesId<TData = CertificateDeleteSuccessResponse>(
    id: number,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  deleteApiTeachersCertificatesId<TData = CertificateDeleteSuccessResponse>(
    id: number,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  deleteApiTeachersCertificatesId<TData = CertificateDeleteSuccessResponse>(
    id: number,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.delete<TData>(`/api/teachers/certificates/${id}`, options);
  }
  /**
 * 取得教師的可用時間表設定。

**業務邏輯**：
- 驗證使用者為有效的教師
- 回傳教師設定的可用時間表
- 包含每日的可用時段資訊

 * @summary 取得教師時間表
 */
  getApiTeachersSchedule<TData = WeeklyScheduleResponse>(
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  getApiTeachersSchedule<TData = WeeklyScheduleResponse>(
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  getApiTeachersSchedule<TData = WeeklyScheduleResponse>(
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  getApiTeachersSchedule<TData = WeeklyScheduleResponse>(
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.get<TData>(`/api/teachers/schedule`, options);
  }
  /**
 * 更新教師的可用時間表設定。

**業務邏輯**：
- 驗證使用者為有效的教師
- 驗證時間表格式和時間段的合理性
- 檢查時間段是否重疊
- 更新教師的可用時間表
- 回傳更新後的時間表資訊

 * @summary 更新教師時間表
 */
  putApiTeachersSchedule<TData = WeeklyScheduleResponse>(
    weeklyScheduleRequest: WeeklyScheduleRequest,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  putApiTeachersSchedule<TData = WeeklyScheduleResponse>(
    weeklyScheduleRequest: WeeklyScheduleRequest,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  putApiTeachersSchedule<TData = WeeklyScheduleResponse>(
    weeklyScheduleRequest: WeeklyScheduleRequest,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  putApiTeachersSchedule<TData = WeeklyScheduleResponse>(
    weeklyScheduleRequest: WeeklyScheduleRequest,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.put<TData>(
      `/api/teachers/schedule`,
      weeklyScheduleRequest,
      options,
    );
  }
  /**
 * 檢查指定時間段是否與教師現有行程衝突。

**業務邏輯**：
- 驗證使用者為有效的教師
- 檢查指定時間段與現有預約的衝突
- 檢查時間段是否在教師可用時間內
- 回傳衝突檢查結果和詳細資訊

 * @summary 檢查時間衝突
 */
  getApiTeachersScheduleConflicts<TData = ScheduleConflictCheckSuccessResponse>(
    params: DeepNonNullable<GetApiTeachersScheduleConflictsParams>,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  getApiTeachersScheduleConflicts<TData = ScheduleConflictCheckSuccessResponse>(
    params: DeepNonNullable<GetApiTeachersScheduleConflictsParams>,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  getApiTeachersScheduleConflicts<TData = ScheduleConflictCheckSuccessResponse>(
    params: DeepNonNullable<GetApiTeachersScheduleConflictsParams>,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  getApiTeachersScheduleConflicts<TData = ScheduleConflictCheckSuccessResponse>(
    params: DeepNonNullable<GetApiTeachersScheduleConflictsParams>,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.get<TData>(`/api/teachers/schedule/conflicts`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  }
}

export type PostApiTeachersApplyClientResult =
  NonNullable<TeacherApplicationSuccessResponse>;
export type GetApiTeachersApplyStatusClientResult =
  NonNullable<TeacherApplyStatusSuccessResponse>;
export type GetApiTeachersBasicInfoClientResult =
  NonNullable<TeacherBasicInfoSuccessResponse>;
export type PutApiTeachersBasicInfoClientResult =
  NonNullable<TeacherBasicInfoUpdateSuccessResponse>;
export type PostApiTeachersResubmitClientResult =
  NonNullable<TeacherResubmitSuccessResponse>;
export type PostApiTeachersSubmitClientResult =
  NonNullable<TeacherSubmitSuccessResponse>;
export type GetApiTeachersProfileClientResult =
  NonNullable<TeacherProfileSuccessResponse>;
export type PutApiTeachersProfileClientResult =
  NonNullable<TeacherProfileUpdateSuccessResponse>;
export type GetApiTeachersWorkExperiencesClientResult =
  NonNullable<WorkExperienceListSuccessResponse>;
export type PostApiTeachersWorkExperiencesClientResult =
  NonNullable<WorkExperienceBatchCreateSuccessResponse>;
export type PutApiTeachersWorkExperiencesClientResult =
  NonNullable<WorkExperienceUpsertResponse>;
export type PutApiTeachersWorkExperiencesIdClientResult =
  NonNullable<WorkExperienceUpdateSuccessResponse>;
export type DeleteApiTeachersWorkExperiencesIdClientResult =
  NonNullable<WorkExperienceDeleteSuccessResponse>;
export type GetApiTeachersLearningExperiencesClientResult =
  NonNullable<LearningExperienceListSuccessResponse>;
export type PostApiTeachersLearningExperiencesClientResult =
  NonNullable<LearningExperienceBatchCreateSuccessResponse>;
export type PutApiTeachersLearningExperiencesClientResult =
  NonNullable<LearningExperienceUpsertResponse>;
export type PutApiTeachersLearningExperiencesIdClientResult =
  NonNullable<LearningExperienceUpdateSuccessResponse>;
export type DeleteApiTeachersLearningExperiencesIdClientResult =
  NonNullable<LearningExperienceDeleteSuccessResponse>;
export type GetApiTeachersCertificatesClientResult =
  NonNullable<CertificateListSuccessResponse>;
export type PostApiTeachersCertificatesClientResult =
  NonNullable<CertificateBatchCreateSuccessResponse>;
export type PutApiTeachersCertificatesClientResult =
  NonNullable<CertificateUpsertResponse>;
export type PutApiTeachersCertificatesIdClientResult =
  NonNullable<CertificateUpdateSuccessResponse>;
export type DeleteApiTeachersCertificatesIdClientResult =
  NonNullable<CertificateDeleteSuccessResponse>;
export type GetApiTeachersScheduleClientResult =
  NonNullable<WeeklyScheduleResponse>;
export type PutApiTeachersScheduleClientResult =
  NonNullable<WeeklyScheduleResponse>;
export type GetApiTeachersScheduleConflictsClientResult =
  NonNullable<ScheduleConflictCheckSuccessResponse>;
