/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * Talent Match API
 * 全面重構後的 Talent Match 後端 API 文件
 * OpenAPI spec version: 2.0.0
 */
import { HttpClient } from '@angular/common/http';
import type {
  HttpContext,
  HttpEvent,
  HttpHeaders,
  HttpParams,
  HttpResponse as AngularHttpResponse,
} from '@angular/common/http';

import { Injectable, inject } from '@angular/core';

// import type { DeepNonNullable } from '@orval/core/src/utils/deep-non-nullable';

// 使用 TypeScript 內建的 NonNullable 型別
type DeepNonNullable<T> = T extends (...args: any[]) => any
  ? T
  : T extends any[]
  ? _DeepNonNullableArray<T[number]>
  : T extends object
  ? _DeepNonNullableObject<T>
  : NonNullable<T>;

type _DeepNonNullableArray<T> = Array<DeepNonNullable<NonNullable<T>>>;

type _DeepNonNullableObject<T> = {
  [P in keyof T]-?: DeepNonNullable<NonNullable<T[P]>>;
};

import { Observable } from 'rxjs';

import type {
  CheckConflictsResponse,
  CreateTeacherCertificateRequest,
  DeleteTeachersLearningExperiencesId200,
  DeleteTeachersWorkExperiencesId200,
  GetScheduleResponse,
  GetTeachersLearningExperiences200,
  GetTeachersProfile200,
  GetTeachersScheduleConflictsParams,
  GetTeachersWorkExperiences200,
  PostTeachersLearningExperiences201,
  PostTeachersLearningExperiencesBody,
  PostTeachersResubmit200,
  PostTeachersSubmit200,
  PostTeachersSubmitBody,
  PutTeachersLearningExperiencesId200,
  PutTeachersLearningExperiencesIdBody,
  PutTeachersProfile200,
  TeacherApplicationCreateResponse,
  TeacherApplicationRequest,
  TeacherApplicationStatusResponse,
  TeacherApplicationUpdateRequest,
  TeacherApplicationUpdateResponse,
  TeacherCertificateCreateResponse,
  TeacherCertificateDeleteResponse,
  TeacherCertificateListResponse,
  TeacherCertificateUpdateResponse,
  TeacherProfileUpdateRequest,
  UpdateScheduleRequest,
  UpdateScheduleResponse,
  UpdateTeacherCertificateRequest,
  WorkExperienceCreateRequest,
  WorkExperienceCreateResponse,
  WorkExperienceUpdateRequest,
  WorkExperienceUpdateResponse,
} from '../talentMatchAPI.schemas';

interface HttpClientOptions {
  headers?: HttpHeaders | Record<string, string | string[]>;
  context?: HttpContext;
  params?:
    | HttpParams
    | Record<
        string,
        string | number | boolean | ReadonlyArray<string | number | boolean>
      >;
  reportProgress?: boolean;
  withCredentials?: boolean;
  credentials?: RequestCredentials;
  keepalive?: boolean;
  priority?: RequestPriority;
  cache?: RequestCache;
  mode?: RequestMode;
  redirect?: RequestRedirect;
  referrer?: string;
  integrity?: string;
  transferCache?: { includeHeaders?: string[] } | boolean;
  timeout?: number;
}

@Injectable({ providedIn: 'root' })
export class TeacherFeaturesService {
  private readonly http = inject(HttpClient);
  /**
 * 學生可以透過此端點申請成為教師。需要提供國籍和自我介紹資訊。

**業務規則:**
- 只有學生角色可以申請
- 帳號狀態必須為活躍
- 每個使用者只能有一個申請記錄
- 自我介紹至少需要100字元
- 國籍欄位不可超過50字元

 * @summary 申請成為教師
 */
  postTeachersApply<TData = TeacherApplicationCreateResponse>(
    teacherApplicationRequest: TeacherApplicationRequest,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  postTeachersApply<TData = TeacherApplicationCreateResponse>(
    teacherApplicationRequest: TeacherApplicationRequest,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  postTeachersApply<TData = TeacherApplicationCreateResponse>(
    teacherApplicationRequest: TeacherApplicationRequest,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  postTeachersApply<TData = TeacherApplicationCreateResponse>(
    teacherApplicationRequest: TeacherApplicationRequest,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.post<TData>(
      `/teachers/apply`,
      teacherApplicationRequest,
      options,
    );
  }
  /**
 * 取得當前使用者的教師申請狀態和詳細資訊。

**回應內容包含:**
- 申請基本資訊（國籍、自我介紹）
- 申請狀態（待審核、已通過、已拒絕）
- 申請時間和審核時間
- 審核備註（如有）

 * @summary 查詢申請狀態
 */
  getTeachersApplication<TData = TeacherApplicationStatusResponse>(
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  getTeachersApplication<TData = TeacherApplicationStatusResponse>(
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  getTeachersApplication<TData = TeacherApplicationStatusResponse>(
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  getTeachersApplication<TData = TeacherApplicationStatusResponse>(
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.get<TData>(`/teachers/application`, options);
  }
  /**
 * 更新教師申請的資料內容。只能在「待審核」或「已拒絕」狀態下進行修改。

**業務規則:**
- 只能更新國籍和自我介紹
- 已通過的申請無法修改
- 被拒絕的申請修改後會重新設為待審核狀態
- 自我介紹長度限制：100-1000字元
- 國籍長度限制：1-50字元

 * @summary 更新申請資料
 */
  putTeachersApplication<TData = TeacherApplicationUpdateResponse>(
    teacherApplicationUpdateRequest: TeacherApplicationUpdateRequest,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  putTeachersApplication<TData = TeacherApplicationUpdateResponse>(
    teacherApplicationUpdateRequest: TeacherApplicationUpdateRequest,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  putTeachersApplication<TData = TeacherApplicationUpdateResponse>(
    teacherApplicationUpdateRequest: TeacherApplicationUpdateRequest,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  putTeachersApplication<TData = TeacherApplicationUpdateResponse>(
    teacherApplicationUpdateRequest: TeacherApplicationUpdateRequest,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.put<TData>(
      `/teachers/application`,
      teacherApplicationUpdateRequest,
      options,
    );
  }
  /**
 * 重新提交被拒絕的教師申請。只有被拒絕的申請才能重新提交。

**業務規則:**
- 只有被拒絕狀態的申請才能重新提交
- 重新提交後申請狀態會重置為待審核
- 審核相關欄位會被清空（審核時間、審核員、審核備註）
- 重新設定提交時間為當前時間

 * @summary 重新提交申請
 */
  postTeachersResubmit<TData = PostTeachersResubmit200>(
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  postTeachersResubmit<TData = PostTeachersResubmit200>(
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  postTeachersResubmit<TData = PostTeachersResubmit200>(
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  postTeachersResubmit<TData = PostTeachersResubmit200>(
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.post<TData>(`/teachers/resubmit`, undefined, options);
  }
  /**
 * 提交完整的教師申請，系統會驗證所有必填資料完整性。

**前置驗證條件:**
- 必須有教師基本申請記錄（國籍、自我介紹）
- 至少一筆工作經驗記錄
- 至少一筆學習經歷記錄（含檔案）
- 至少一張證書記錄（含檔案）
- 申請尚未提交過

**業務規則:**
- 提交後申請狀態設為待審核
- 記錄提交時間
- 已提交的申請無法重複提交

 * @summary 最終提交教師申請
 */
  postTeachersSubmit<TData = PostTeachersSubmit200>(
    postTeachersSubmitBody: PostTeachersSubmitBody,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  postTeachersSubmit<TData = PostTeachersSubmit200>(
    postTeachersSubmitBody: PostTeachersSubmitBody,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  postTeachersSubmit<TData = PostTeachersSubmit200>(
    postTeachersSubmitBody: PostTeachersSubmitBody,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  postTeachersSubmit<TData = PostTeachersSubmit200>(
    postTeachersSubmitBody: PostTeachersSubmitBody,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.post<TData>(
      `/teachers/submit`,
      postTeachersSubmitBody,
      options,
    );
  }
  /**
 * 取得已通過審核的教師基本資料，包含統計資訊。

**權限要求:**
- 需要已通過審核的教師身份
- 未通過審核的申請無法存取此端點

**回應內容包含:**
- 基本資料（國籍、自我介紹）
- 申請狀態和審核資訊
- 統計數據（學生數、課程數、評分、收入）

 * @summary 取得教師基本資料
 */
  getTeachersProfile<TData = GetTeachersProfile200>(
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  getTeachersProfile<TData = GetTeachersProfile200>(
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  getTeachersProfile<TData = GetTeachersProfile200>(
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  getTeachersProfile<TData = GetTeachersProfile200>(
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.get<TData>(`/teachers/profile`, options);
  }
  /**
 * 更新已通過審核的教師基本資料。修改重要資料後將觸發重新審核。

**業務規則:**
- 只有已通過審核的教師可以使用此功能
- 修改重要資料後申請狀態會變為待審核
- 審核相關欄位會被清空
- 支援部分更新（可只更新國籍或自我介紹其中之一）

**驗證規則:**
- 國籍：1-50字元
- 自我介紹：100-1000字元

 * @summary 更新教師基本資料
 */
  putTeachersProfile<TData = PutTeachersProfile200>(
    teacherProfileUpdateRequest: TeacherProfileUpdateRequest,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  putTeachersProfile<TData = PutTeachersProfile200>(
    teacherProfileUpdateRequest: TeacherProfileUpdateRequest,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  putTeachersProfile<TData = PutTeachersProfile200>(
    teacherProfileUpdateRequest: TeacherProfileUpdateRequest,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  putTeachersProfile<TData = PutTeachersProfile200>(
    teacherProfileUpdateRequest: TeacherProfileUpdateRequest,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.put<TData>(
      `/teachers/profile`,
      teacherProfileUpdateRequest,
      options,
    );
  }
  /**
 * 取得當前教師的所有工作經驗記錄列表。

**權限要求:**
- 需要教師身份
- 只能查看自己的工作經驗

**回應內容:**
- 按建立時間降序排列
- 包含完整的工作經驗資訊
- 提供總筆數資訊

 * @summary 取得工作經驗列表
 */
  getTeachersWorkExperiences<TData = GetTeachersWorkExperiences200>(
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  getTeachersWorkExperiences<TData = GetTeachersWorkExperiences200>(
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  getTeachersWorkExperiences<TData = GetTeachersWorkExperiences200>(
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  getTeachersWorkExperiences<TData = GetTeachersWorkExperiences200>(
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.get<TData>(`/teachers/work-experiences`, options);
  }
  /**
 * 新增一筆工作經驗記錄。

**業務規則:**
- 需要教師身份
- 在職工作經驗不可填寫結束日期
- 離職工作經驗必須填寫結束日期
- 結束日期不得早於開始日期
- 年份範圍：1900-當前年份+1
- 月份範圍：1-12

 * @summary 新增工作經驗
 */
  postTeachersWorkExperiences<TData = WorkExperienceCreateResponse>(
    workExperienceCreateRequest: WorkExperienceCreateRequest,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  postTeachersWorkExperiences<TData = WorkExperienceCreateResponse>(
    workExperienceCreateRequest: WorkExperienceCreateRequest,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  postTeachersWorkExperiences<TData = WorkExperienceCreateResponse>(
    workExperienceCreateRequest: WorkExperienceCreateRequest,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  postTeachersWorkExperiences<TData = WorkExperienceCreateResponse>(
    workExperienceCreateRequest: WorkExperienceCreateRequest,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.post<TData>(
      `/teachers/work-experiences`,
      workExperienceCreateRequest,
      options,
    );
  }
  /**
 * 更新指定的工作經驗記錄。

**權限要求:**
- 需要教師身份
- 只能更新自己的工作經驗

**業務規則:**
- 支援部分更新（可只更新部分欄位）
- 在職工作經驗不可填寫結束日期
- 離職工作經驗必須填寫結束日期
- 結束日期不得早於開始日期

 * @summary 更新工作經驗
 */
  putTeachersWorkExperiencesId<TData = WorkExperienceUpdateResponse>(
    id: number,
    workExperienceUpdateRequest: WorkExperienceUpdateRequest,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  putTeachersWorkExperiencesId<TData = WorkExperienceUpdateResponse>(
    id: number,
    workExperienceUpdateRequest: WorkExperienceUpdateRequest,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  putTeachersWorkExperiencesId<TData = WorkExperienceUpdateResponse>(
    id: number,
    workExperienceUpdateRequest: WorkExperienceUpdateRequest,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  putTeachersWorkExperiencesId<TData = WorkExperienceUpdateResponse>(
    id: number,
    workExperienceUpdateRequest: WorkExperienceUpdateRequest,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.put<TData>(
      `/teachers/work-experiences/${id}`,
      workExperienceUpdateRequest,
      options,
    );
  }
  /**
 * 刪除指定的工作經驗記錄。

**權限要求:**
- 需要教師身份
- 只能刪除自己的工作經驗

**注意事項:**
- 刪除操作無法復原
- 建議在前端提供確認對話框

 * @summary 刪除工作經驗
 */
  deleteTeachersWorkExperiencesId<TData = DeleteTeachersWorkExperiencesId200>(
    id: number,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  deleteTeachersWorkExperiencesId<TData = DeleteTeachersWorkExperiencesId200>(
    id: number,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  deleteTeachersWorkExperiencesId<TData = DeleteTeachersWorkExperiencesId200>(
    id: number,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  deleteTeachersWorkExperiencesId<TData = DeleteTeachersWorkExperiencesId200>(
    id: number,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.delete<TData>(`/teachers/work-experiences/${id}`, options);
  }
  /**
 * 取得目前教師的所有學習經歷記錄，依開始年份降序排列。

**權限要求:**
- 需要教師權限
- 帳號狀態必須為活躍

 * @summary 取得學習經歷清單
 */
  getTeachersLearningExperiences<TData = GetTeachersLearningExperiences200>(
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  getTeachersLearningExperiences<TData = GetTeachersLearningExperiences200>(
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  getTeachersLearningExperiences<TData = GetTeachersLearningExperiences200>(
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  getTeachersLearningExperiences<TData = GetTeachersLearningExperiences200>(
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.get<TData>(`/teachers/learning-experiences`, options);
  }
  /**
 * 建立新的學習經歷記錄。

**業務規則:**
- 需要教師權限
- 結束年月不能早於開始年月
- 年份範圍必須合理（不超過20年）
- 不能設定未來年份（除了預計畢業年份）

**檔案上傳:**
- TODO: 檔案上傳功能開發中
- 支援格式：PDF, JPG, JPEG, PNG
- 檔案大小限制：5MB

 * @summary 建立學習經歷
 */
  postTeachersLearningExperiences<TData = PostTeachersLearningExperiences201>(
    postTeachersLearningExperiencesBody: PostTeachersLearningExperiencesBody,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  postTeachersLearningExperiences<TData = PostTeachersLearningExperiences201>(
    postTeachersLearningExperiencesBody: PostTeachersLearningExperiencesBody,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  postTeachersLearningExperiences<TData = PostTeachersLearningExperiences201>(
    postTeachersLearningExperiencesBody: PostTeachersLearningExperiencesBody,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  postTeachersLearningExperiences<TData = PostTeachersLearningExperiences201>(
    postTeachersLearningExperiencesBody: PostTeachersLearningExperiencesBody,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.post<TData>(
      `/teachers/learning-experiences`,
      postTeachersLearningExperiencesBody,
      options,
    );
  }
  /**
 * 更新指定的學習經歷記錄。只能更新屬於自己的學習經歷。

**業務規則:**
- 需要教師權限
- 只能更新屬於自己的學習經歷
- 結束年月不能早於開始年月
- 年份範圍必須合理

**檔案上傳:**
- TODO: 檔案上傳功能開發中
- 如果上傳新檔案，會取代原有檔案

 * @summary 更新學習經歷
 */
  putTeachersLearningExperiencesId<TData = PutTeachersLearningExperiencesId200>(
    id: number,
    putTeachersLearningExperiencesIdBody: PutTeachersLearningExperiencesIdBody,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  putTeachersLearningExperiencesId<TData = PutTeachersLearningExperiencesId200>(
    id: number,
    putTeachersLearningExperiencesIdBody: PutTeachersLearningExperiencesIdBody,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  putTeachersLearningExperiencesId<TData = PutTeachersLearningExperiencesId200>(
    id: number,
    putTeachersLearningExperiencesIdBody: PutTeachersLearningExperiencesIdBody,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  putTeachersLearningExperiencesId<TData = PutTeachersLearningExperiencesId200>(
    id: number,
    putTeachersLearningExperiencesIdBody: PutTeachersLearningExperiencesIdBody,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.put<TData>(
      `/teachers/learning-experiences/${id}`,
      putTeachersLearningExperiencesIdBody,
      options,
    );
  }
  /**
 * 刪除指定的學習經歷記錄。只能刪除屬於自己的學習經歷。

**業務規則:**
- 需要教師權限
- 只能刪除屬於自己的學習經歷
- 刪除後相關檔案也會一併刪除（TODO: 檔案系統開發中）

**注意事項:**
- 此操作無法復原
- 相關證書檔案會一併刪除

 * @summary 刪除學習經歷
 */
  deleteTeachersLearningExperiencesId<
    TData = DeleteTeachersLearningExperiencesId200,
  >(
    id: number,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  deleteTeachersLearningExperiencesId<
    TData = DeleteTeachersLearningExperiencesId200,
  >(
    id: number,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  deleteTeachersLearningExperiencesId<
    TData = DeleteTeachersLearningExperiencesId200,
  >(
    id: number,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  deleteTeachersLearningExperiencesId<
    TData = DeleteTeachersLearningExperiencesId200,
  >(
    id: number,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.delete<TData>(
      `/teachers/learning-experiences/${id}`,
      options,
    );
  }
  /**
 * 取得已認證教師的所有證書記錄

**功能特色：**
- 只能查看自己的證書列表
- 依建立時間倒序排列
- 支援完整的證書資訊展示

**權限控制：**
- 需要有效的 JWT Token
- 自動依據 Token 中的教師ID篩選資料

 * @summary 取得教師證書列表
 */
  getTeachersCertificates<TData = TeacherCertificateListResponse>(
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  getTeachersCertificates<TData = TeacherCertificateListResponse>(
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  getTeachersCertificates<TData = TeacherCertificateListResponse>(
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  getTeachersCertificates<TData = TeacherCertificateListResponse>(
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.get<TData>(`/teachers/certificates`, options);
  }
  /**
 * 新增教師的證書記錄，支援多種證書類型

**證書類型支援：**
- teaching_license: 教師證書
- language_certification: 語言認證
- professional_certificate: 專業證照
- academic_degree: 學位證書

**檔案規範：**
- 支援格式：PDF, JPG, JPEG, PNG
- 檔案大小：最大 5MB
- 檔案路徑：需為有效的系統路徑

**驗證規則：**
- 發證機構：1-100字元
- 證書名稱：1-200字元
- 持有人姓名：1-100字元
- 證書編號：1-100字元（需唯一）
- 證書主題：1-200字元
- 類別ID：1-50字元

 * @summary 新增教師證書
 */
  postTeachersCertificates<TData = TeacherCertificateCreateResponse>(
    createTeacherCertificateRequest: CreateTeacherCertificateRequest,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  postTeachersCertificates<TData = TeacherCertificateCreateResponse>(
    createTeacherCertificateRequest: CreateTeacherCertificateRequest,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  postTeachersCertificates<TData = TeacherCertificateCreateResponse>(
    createTeacherCertificateRequest: CreateTeacherCertificateRequest,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  postTeachersCertificates<TData = TeacherCertificateCreateResponse>(
    createTeacherCertificateRequest: CreateTeacherCertificateRequest,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.post<TData>(
      `/teachers/certificates`,
      createTeacherCertificateRequest,
      options,
    );
  }
  /**
 * 更新指定的教師證書記錄，支援部分欄位更新

**更新特色：**
- 支援部分欄位更新（Partial Update）
- 自動驗證證書所有權
- 保持資料一致性和完整性

**可更新欄位：**
- verifying_institution: 發證機構
- license_name: 證書名稱
- holder_name: 持有人姓名
- license_number: 證書編號
- file_path: 檔案路徑
- category_id: 證書類別
- subject: 證書主題

**權限控制：**
- 只能更新自己的證書
- 系統自動驗證證書所有權
- 防止跨用戶資料篡改

 * @summary 更新教師證書
 */
  putTeachersCertificatesId<TData = TeacherCertificateUpdateResponse>(
    id: number,
    updateTeacherCertificateRequest: UpdateTeacherCertificateRequest,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  putTeachersCertificatesId<TData = TeacherCertificateUpdateResponse>(
    id: number,
    updateTeacherCertificateRequest: UpdateTeacherCertificateRequest,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  putTeachersCertificatesId<TData = TeacherCertificateUpdateResponse>(
    id: number,
    updateTeacherCertificateRequest: UpdateTeacherCertificateRequest,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  putTeachersCertificatesId<TData = TeacherCertificateUpdateResponse>(
    id: number,
    updateTeacherCertificateRequest: UpdateTeacherCertificateRequest,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.put<TData>(
      `/teachers/certificates/${id}`,
      updateTeacherCertificateRequest,
      options,
    );
  }
  /**
 * 刪除指定的教師證書記錄，操作不可逆

**刪除特性：**
- 物理刪除（不可恢復）
- 自動驗證證書所有權
- 同時清理相關檔案資源

**安全措施：**
- 只能刪除自己的證書
- 系統自動驗證所有權
- 防止誤刪或惡意刪除

**注意事項：**
- 刪除後無法恢復
- 建議刪除前先確認證書資訊
- 相關的檔案也會一併清理

 * @summary 刪除教師證書
 */
  deleteTeachersCertificatesId<TData = TeacherCertificateDeleteResponse>(
    id: number,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  deleteTeachersCertificatesId<TData = TeacherCertificateDeleteResponse>(
    id: number,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  deleteTeachersCertificatesId<TData = TeacherCertificateDeleteResponse>(
    id: number,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  deleteTeachersCertificatesId<TData = TeacherCertificateDeleteResponse>(
    id: number,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.delete<TData>(`/teachers/certificates/${id}`, options);
  }
  /**
 * 教師可以查詢自己設定的可預約時段。

**業務規則:**
- 需要教師身份認證
- 按照星期和時間排序回傳
- 包含啟用/停用狀態

 * @summary 取得可預約時段設定
 */
  getTeachersSchedule<TData = GetScheduleResponse>(
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  getTeachersSchedule<TData = GetScheduleResponse>(
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  getTeachersSchedule<TData = GetScheduleResponse>(
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  getTeachersSchedule<TData = GetScheduleResponse>(
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.get<TData>(`/teachers/schedule`, options);
  }
  /**
 * 教師可以設定或更新自己的可預約時段。

**業務規則:**
- 需要教師身份認證
- 會完全替換現有時段設定
- 傳空陣列可清空所有時段
- 時間格式需為 HH:MM
- 結束時間必須晚於開始時間
- 星期範圍 0-6 (週日到週六)

 * @summary 更新可預約時段設定
 */
  putTeachersSchedule<TData = UpdateScheduleResponse>(
    updateScheduleRequest: UpdateScheduleRequest,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  putTeachersSchedule<TData = UpdateScheduleResponse>(
    updateScheduleRequest: UpdateScheduleRequest,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  putTeachersSchedule<TData = UpdateScheduleResponse>(
    updateScheduleRequest: UpdateScheduleRequest,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  putTeachersSchedule<TData = UpdateScheduleResponse>(
    updateScheduleRequest: UpdateScheduleRequest,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.put<TData>(
      `/teachers/schedule`,
      updateScheduleRequest,
      options,
    );
  }
  /**
 * 檢查教師的可預約時段與現有預約是否有衝突。

**業務規則:**
- 需要教師身份認證
- 可指定檢查時間範圍和特定時段
- 預設檢查未來30天內的衝突
- 只檢查已確認的預約

 * @summary 檢查時段衝突
 */
  getTeachersScheduleConflicts<TData = CheckConflictsResponse>(
    params?: DeepNonNullable<GetTeachersScheduleConflictsParams>,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  getTeachersScheduleConflicts<TData = CheckConflictsResponse>(
    params?: DeepNonNullable<GetTeachersScheduleConflictsParams>,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  getTeachersScheduleConflicts<TData = CheckConflictsResponse>(
    params?: DeepNonNullable<GetTeachersScheduleConflictsParams>,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  getTeachersScheduleConflicts<TData = CheckConflictsResponse>(
    params?: DeepNonNullable<GetTeachersScheduleConflictsParams>,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.get<TData>(`/teachers/schedule/conflicts`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  }
}

export type PostTeachersApplyClientResult =
  NonNullable<TeacherApplicationCreateResponse>;
export type GetTeachersApplicationClientResult =
  NonNullable<TeacherApplicationStatusResponse>;
export type PutTeachersApplicationClientResult =
  NonNullable<TeacherApplicationUpdateResponse>;
export type PostTeachersResubmitClientResult =
  NonNullable<PostTeachersResubmit200>;
export type PostTeachersSubmitClientResult = NonNullable<PostTeachersSubmit200>;
export type GetTeachersProfileClientResult = NonNullable<GetTeachersProfile200>;
export type PutTeachersProfileClientResult = NonNullable<PutTeachersProfile200>;
export type GetTeachersWorkExperiencesClientResult =
  NonNullable<GetTeachersWorkExperiences200>;
export type PostTeachersWorkExperiencesClientResult =
  NonNullable<WorkExperienceCreateResponse>;
export type PutTeachersWorkExperiencesIdClientResult =
  NonNullable<WorkExperienceUpdateResponse>;
export type DeleteTeachersWorkExperiencesIdClientResult =
  NonNullable<DeleteTeachersWorkExperiencesId200>;
export type GetTeachersLearningExperiencesClientResult =
  NonNullable<GetTeachersLearningExperiences200>;
export type PostTeachersLearningExperiencesClientResult =
  NonNullable<PostTeachersLearningExperiences201>;
export type PutTeachersLearningExperiencesIdClientResult =
  NonNullable<PutTeachersLearningExperiencesId200>;
export type DeleteTeachersLearningExperiencesIdClientResult =
  NonNullable<DeleteTeachersLearningExperiencesId200>;
export type GetTeachersCertificatesClientResult =
  NonNullable<TeacherCertificateListResponse>;
export type PostTeachersCertificatesClientResult =
  NonNullable<TeacherCertificateCreateResponse>;
export type PutTeachersCertificatesIdClientResult =
  NonNullable<TeacherCertificateUpdateResponse>;
export type DeleteTeachersCertificatesIdClientResult =
  NonNullable<TeacherCertificateDeleteResponse>;
export type GetTeachersScheduleClientResult = NonNullable<GetScheduleResponse>;
export type PutTeachersScheduleClientResult =
  NonNullable<UpdateScheduleResponse>;
export type GetTeachersScheduleConflictsClientResult =
  NonNullable<CheckConflictsResponse>;
