/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * Talent Match API
 * 全面重構後的 Talent Match 後端 API 文件

🆕 v2.1 新功能：整合式課程建立 API，支援同時上傳圖片和設定價格方案
 * OpenAPI spec version: 2.1.0
 */
import { HttpClient } from '@angular/common/http';
import type {
  HttpContext,
  HttpEvent,
  HttpHeaders,
  HttpParams,
  HttpResponse as AngularHttpResponse,
} from '@angular/common/http';

import { Injectable, inject } from '@angular/core';

// import type { DeepNonNullable } from '@orval/core/src/utils/deep-non-nullable';

// 使用 TypeScript 內建的 NonNullable 型別
type DeepNonNullable<T> = T extends (...args: any[]) => any
  ? T
  : T extends any[]
  ? _DeepNonNullableArray<T[number]>
  : T extends object
  ? _DeepNonNullableObject<T>
  : NonNullable<T>;

type _DeepNonNullableArray<T> = Array<DeepNonNullable<NonNullable<T>>>;

type _DeepNonNullableObject<T> = {
  [P in keyof T]-?: DeepNonNullable<NonNullable<T[P]>>;
};

import { Observable } from 'rxjs';

import type {
  GetApiPurchasesParams,
  PurchaseListSuccessResponse,
} from '../talentMatchAPI.schemas';

interface HttpClientOptions {
  headers?: HttpHeaders | Record<string, string | string[]>;
  context?: HttpContext;
  params?:
    | HttpParams
    | Record<
        string,
        string | number | boolean | ReadonlyArray<string | number | boolean>
      >;
  reportProgress?: boolean;
  withCredentials?: boolean;
  credentials?: RequestCredentials;
  keepalive?: boolean;
  priority?: RequestPriority;
  cache?: RequestCache;
  mode?: RequestMode;
  redirect?: RequestRedirect;
  referrer?: string;
  integrity?: string;
  transferCache?: { includeHeaders?: string[] } | boolean;
  timeout?: number;
}

@Injectable({ providedIn: 'root' })
export class PurchaseRecordsService {
  private readonly http = inject(HttpClient);
  /**
 * 取得目前登入使用者的所有購買記錄，包含課程詳細資訊、教師資料、訂單資訊和堂數使用情況。

**業務邏輯**：
- 驗證使用者身份認證
- 根據使用者 ID 查詢購買記錄
- 可選擇性篩選特定課程的購買記錄
- 批次查詢相關課程、教師、訂單資料以避免 N+1 查詢問題
- 按購買時間降序排列回傳結果
- 包含堂數統計資訊 (總堂數、已使用、剩餘堂數)

 * @summary 取得使用者購買記錄列表
 */
  getApiPurchases<TData = PurchaseListSuccessResponse>(
    params?: DeepNonNullable<GetApiPurchasesParams>,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  getApiPurchases<TData = PurchaseListSuccessResponse>(
    params?: DeepNonNullable<GetApiPurchasesParams>,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  getApiPurchases<TData = PurchaseListSuccessResponse>(
    params?: DeepNonNullable<GetApiPurchasesParams>,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  getApiPurchases<TData = PurchaseListSuccessResponse>(
    params?: DeepNonNullable<GetApiPurchasesParams>,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.get<TData>(`/api/purchases`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  }
}

export type GetApiPurchasesClientResult =
  NonNullable<PurchaseListSuccessResponse>;
