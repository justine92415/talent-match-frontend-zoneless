/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * Talent Match API
 * 全面重構後的 Talent Match 後端 API 文件

🆕 v2.1 新功能：整合式課程建立 API，支援同時上傳圖片和設定價格方案
 * OpenAPI spec version: 2.1.0
 */
import { HttpClient } from '@angular/common/http';
import type {
  HttpContext,
  HttpEvent,
  HttpHeaders,
  HttpParams,
  HttpResponse as AngularHttpResponse,
} from '@angular/common/http';

import { Injectable, inject } from '@angular/core';

// import type { DeepNonNullable } from '@orval/core/src/utils/deep-non-nullable';

// 使用 TypeScript 內建的 NonNullable 型別
type DeepNonNullable<T> = T extends (...args: any[]) => any
  ? T
  : T extends any[]
  ? _DeepNonNullableArray<T[number]>
  : T extends object
  ? _DeepNonNullableObject<T>
  : NonNullable<T>;

type _DeepNonNullableArray<T> = Array<DeepNonNullable<NonNullable<T>>>;

type _DeepNonNullableObject<T> = {
  [P in keyof T]-?: DeepNonNullable<NonNullable<T[P]>>;
};

import { Observable } from 'rxjs';

import type {
  GetApiVideosParams,
  VideoListSuccessResponse,
  VideoUploadRequest,
  VideoUploadSuccessResponse,
} from '../talentMatchAPI.schemas';

interface HttpClientOptions {
  headers?: HttpHeaders | Record<string, string | string[]>;
  context?: HttpContext;
  params?:
    | HttpParams
    | Record<
        string,
        string | number | boolean | ReadonlyArray<string | number | boolean>
      >;
  reportProgress?: boolean;
  withCredentials?: boolean;
  credentials?: RequestCredentials;
  keepalive?: boolean;
  priority?: RequestPriority;
  cache?: RequestCache;
  mode?: RequestMode;
  redirect?: RequestRedirect;
  referrer?: string;
  integrity?: string;
  transferCache?: { includeHeaders?: string[] } | boolean;
  timeout?: number;
}

@Injectable({ providedIn: 'root' })
export class VideoManagementService {
  private readonly http = inject(HttpClient);
  /**
 * 教師上傳影片檔案到系統。統一採用本地儲存方式，不再支援 YouTube 連結。

**業務邏輯**：
- 驗證教師身份和權限
- 解析 multipart/form-data 表單資料
- 驗證影片檔案格式和大小（支援 MP4, AVI, MOV, WMV，最大 500MB）
- 驗證影片基本資料（名稱、分類、介紹）
- 上傳檔案到 Firebase Storage
- 建立影片記錄到資料庫
- 自動清理暫存檔案

**檔案要求**：
- 支援格式：MP4, AVI, MOV, WMV, QuickTime
- 檔案大小：最大 500MB
- 儲存位置：Firebase Storage (`videos/teacher_{teacherId}/`)

 * @summary 上傳影片檔案
 */
  postApiVideos<TData = VideoUploadSuccessResponse>(
    videoUploadRequest: VideoUploadRequest,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  postApiVideos<TData = VideoUploadSuccessResponse>(
    videoUploadRequest: VideoUploadRequest,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  postApiVideos<TData = VideoUploadSuccessResponse>(
    videoUploadRequest: VideoUploadRequest,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  postApiVideos<TData = VideoUploadSuccessResponse>(
    videoUploadRequest: VideoUploadRequest,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    const formData = new FormData();
    formData.append(`name`, videoUploadRequest.name);
    formData.append(`category`, videoUploadRequest.category);
    formData.append(`intro`, videoUploadRequest.intro);
    if (videoUploadRequest.videoFile !== undefined) {
      formData.append(`videoFile`, videoUploadRequest.videoFile);
    }

    return this.http.post<TData>(`/api/videos`, formData, options);
  }
  /**
 * 取得目前登入教師的影片列表。支援分頁、分類篩選和關鍵字搜尋。

**業務邏輯**：
- 驗證教師身份和權限
- 驗證查詢參數
- 只回傳該教師的影片（權限隔離）
- 支援分類模糊搜尋篩選
- 支援關鍵字搜尋（影片名稱和介紹）
- 分頁查詢，預設每頁 20 筆
- 依建立時間倒序排列
- 排除已軟刪除的影片

**查詢功能**：
- `category`: 分類篩選（模糊搜尋）
- `search`: 關鍵字搜尋（搜尋標題和介紹）
- `page`: 分頁頁碼
- `per_page`: 每頁筆數（最大 100）

 * @summary 取得教師影片列表
 */
  getApiVideos<TData = VideoListSuccessResponse>(
    params?: DeepNonNullable<GetApiVideosParams>,
    options?: HttpClientOptions & { observe?: 'body' },
  ): Observable<TData>;
  getApiVideos<TData = VideoListSuccessResponse>(
    params?: DeepNonNullable<GetApiVideosParams>,
    options?: HttpClientOptions & { observe: 'events' },
  ): Observable<HttpEvent<TData>>;
  getApiVideos<TData = VideoListSuccessResponse>(
    params?: DeepNonNullable<GetApiVideosParams>,
    options?: HttpClientOptions & { observe: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  getApiVideos<TData = VideoListSuccessResponse>(
    params?: DeepNonNullable<GetApiVideosParams>,
    options?: HttpClientOptions & { observe?: any },
  ): Observable<any> {
    return this.http.get<TData>(`/api/videos`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  }
}

export type PostApiVideosClientResult = NonNullable<VideoUploadSuccessResponse>;
export type GetApiVideosClientResult = NonNullable<VideoListSuccessResponse>;
